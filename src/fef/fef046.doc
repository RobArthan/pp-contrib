=TEX
% $Date$ $Id$ $Revision$
\documentstyle[hol1,11pt,TQ]{article}
\long\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\def\Note#1{{\small\bf[Note: #1]}}
\makeindex
%\underscoreoff
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Phase 3 Technical Overview and Final Report}  %% Mandatory field
\TPPref{DS/FMU/FEF/046}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{R.~D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document gives an overview of the formal work carried out under the phase 3 of the FEF project and serves as the final report on that work.
It also discusses the relationship between earlier work and the phase 3 work and suggests some possible directions for future research.
The work described was carried out under the DRA Front End Filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[Issue \SCCSversion ({\FormatDate{$Date$
}}) ] First draft. 

\end{description}

\subsection{Changes Forecast}
None.

\pagebreak
\section{GENERAL}

\subsection{Scope}

This document gives an overview of the formal work carried out under the phase 3 of the FEF project and serves as the final report on that work.
It also discusses the relationship between earlier work and phase 3 work and suggests some possible directions for future research.
It constitutes deliverable D19 asked for in the phase 3 proposal \cite{DS/FMU/FEF/039}.

\subsection{Introduction}
This document is organised into sections as follows:

\begin{description}
\item[Section \ref{overview}] gives an overview of the formal work.
It is intended to serve as an introduction to the documents \cite{DS/FMU/FEF/040,DS/FMU/FEF/042,DS/FMU/FEF/043}.
\item[Section \ref{application}] discusses how the earlier single level treatment  might be adapted so that the multi-level approach of phase 3 would apply to it.
\item[Section \ref{conclusions}] gives some conclusions drawn from the phase 3 work and suggests possible future directions.
\end{description}

Sections \ref{architecture} and \ref{labelling} of this document presuppose familiarity with DRA's original paper on multi-level security policy for SWORD, \cite{securityprops}.
\pagebreak
\section{OVERVIEW OF THE FORMAL TREATMENT}\label{overview}
Sections \ref{policy}, \ref{architecture} and \ref{labelling} below discuss the specifications and conjectures made in the documents \cite{DS/FMU/FEF/040}, \cite{DS/FMU/FEF/042} and \cite{DS/FMU/FEF/043} respectively.

The proof scripts relating to these three specification documents are collected together in one document \cite{DS/FMU/FEF/044} which causes each theorem to be saved in the theory containing the specification to which it relates.
This is a slight variation on the approach used in phases 1 and 2.
A collected theory listing is supplied in \cite{DS/FMU/FEF/045}.

\subsection{Multi-level Formal Security Policy}\label{policy}
The main topic of  \cite{DS/FMU/FEF/040} is a generic formulation of the no-flows-down policy which can be instantiated to cover both the single level (as in \cite{DS/FMU/FEF/003}) and the multi-level case (as in \cite{securityprops}).
A subsidiary topic is the problem of when extraction of a labelled component from a multi-level object is a secure operation.
This latter topic largely serves to give some opportunities for doing proof to validate the generic policy; it also suggests some directions for further theoretical work.
The two topics are discussed more fully in sections \ref{genericpolicy} and \ref{componentextraction} below.

\subsubsection{The Generic Policy}\label{genericpolicy}

The single level policy of \cite{DS/FMU/FEF/003} is formulated for ``behavioural models'', that is to say systems viewed as functions mapping input sequences to output sequences.
Since we can treat an input sequence or an output sequence as a single object with an appropriate multi-level structure, it makes little difference in a multi-level formulation whether we model systems as functions mapping sequences to sequences or as functions mapping input objects to output objects.
In the following discussion, therefore, we just talk of inputs and outputs.

Informally then, the non-interference style statement of the multi-level no-flows-down policy should read something like:

\begin{quotation}
\em
A {\em multi-level secure system} is a function, $b$ say, such that for any classification $c$ and pair of inputs $i_1$ and $i_2$, which appear the same at and below $c$, the corresponding outputs $b(i_1)$ and $b(i_2)$ also appear the same at and below $c$.
\end{quotation}

As already mentioned, the generality of the definition means that we no longer need to worry about sequences of inputs and outputs.
Now, the functional composition of two systems which are multi-level secure in the above sense will again be multi-level secure;
thus, one can hope to handle information flows in a state-based system in a uniform way: if there are no illicit flows from the inputs to the state and no illicit flows from the state to the outputs, then one can expect the system to be secure (and could expect a general proof of this fact, given an appropriate rigorous formulation).

Here then, the only thing left to explain is what it means to be the ``same at and below classification $c$''.
The first goal of \cite{DS/FMU/FEF/040} is, therefore, a general formulation of this notion.
The treatment is influenced by an informal notion of ``classified information space'' (a name which is not used  in \cite{DS/FMU/FEF/040} because, as suggested below, it is not yet clear what the ``right'' formalisation is).
Very informally, a classified information space is to be a set, $X$ say, endowed with the right additional structure to serve as the domain or range of a multi-level secure system in the above sense.
That is to say, $X$ must come supplied with a way of determining when two elements $x_1$ and $x_2$ appear the same at and below a give classification $c$.
One approach to capturing such a property would be to say:

\begin{quotation}
\em
A {\em classified information space}, $X$, is a set given as the product,  $\prod_{c \in \mbox{{\scriptsize\it Class}}} V$, where $V$ is some set of values.
I.e., the elements of $X$ are functions, $x$ say, on the set {\it Class};
the value $x_c$ of such an element at a class $c$ represents the information in $x$ which is classified at $c$.
Two elements $x$ and $y$ are then defined to be the {\em same at and below classification $c$} iff. $x_d = y_d$ for any classification $d$ dominated by $c$.
\end{quotation}

There are however problems with this; in particular:

\begin{enumerate}
\item
In practice, the domains and ranges of systems are not usually presented this way:
e.g., the single-level policy is couched in terms of an equivalence relation on the input and output sequences parameterised by the classification ({\it same\_ins} and {\it same\_outs}).
Indeed, one might feel that the definition suggested poly-instantiation too strongly to be natural for a system such as SWORD.
\item
The definition does not allow for invariants on the inputs.
Now, in some ways this is a good thing, because the non-interference style formulation of the no-flows-down policy may well fail to capture the right intuitions given ill-chosen invariants.
E.g., assume that inputs are constrained so that there are two components at disjoint classifications, $c$ and $d$ say, which must have the same value (so the invariant is $x_c = x_d$);
while it is far from clear what the intention behind such an invariant would be, it certainly prevents the non-interference from properly constraining the potential flows between information classified at $c$ and information classified at $d$.
However, actual systems such as SWORD may have benign invariants of various sorts (e.g. relating to the structure of a database table) and so a definition general enough to allow invariants is required).
\end{enumerate}

As a result of the above considerations, \cite{DS/FMU/FEF/040} formulates the multi-level policy on the assumption that the domain and range of a system are given the structure of what are called in  \cite{DS/FMU/FEF/040} ``indexed equivalence relations''.
This notion is informally defined as follows:

\begin{quotation}
\em
An {\em indexed equivalence relation} is a family $s$ of equivalence relations on a set $X$ indexed by sets of classifications in such a way that if $A \subseteq B$ are two sets of classes, the equivalence relations $s_B$ associated with $B$ is finer than that associated with $A$.
\end{quotation}

The idea is that the the indexed equivalence relation will be chosen so that, for any set $A$ of classes, two values $x$ and $y$ are related by $s_A$ iff. $x$ and $y$ appear to be the same at all classifications in $A$.
This notion of indexed equivalence relation certainly addresses the problems mentioned above.
It turns out to be straightforward to prove that the resulting generic policy generalises the single level ones and the formulation allows for arbitrary invariants to be imposed.
In fact, the definition is, perhaps, a little too liberal in that it permits invariants of the malign sort discussed under item 2 above.
It is an open question whether there is any natural condition that one can impose which ensures that invariants are benign (see the end of section \ref{componentextraction} for more discussion of this point).
\cite{DS/FMU/FEF/040} therefore defines a generic version of the multi-level security policy using a formulation of the structure required on inputs and outputs based on this notion of indexed equivalence relation.
It is conjectured in \cite{DS/FMU/FEF/040} and proved in \cite{DS/FMU/FEF/044} that the generic definition does indeed embrace the single level policy of \cite{DS/FMU/FEF/003} as a special case  (see {\it conj\_040\_1} in \cite{DS/FMU/FEF/040}).

\subsubsection{Component Extraction}\label{componentextraction}

Section 3  of \cite{DS/FMU/FEF/040} is concerned with exploring one approach to the result labelling property which was initially considered.
However, further work on the problem suggested that it would be more useful in the short term to try an approach which exploited more of the specific details of \cite{securityprops}.
Thus apart from any intrinsic interest it may have, section 3 of \cite{DS/FMU/FEF/040} mainly serves to validate some of the definitions in the earlier parts of the document.

The idea in section 3 of \cite{DS/FMU/FEF/040} is to consider the question: when is the operation of extracting a labelled component from an object a secure operation?
Here, by labelled component, we mean a value extracted from the object together with a label giving the classification of that value.
More formally, extraction of a labelled component is modelled by two functions $V$ and $C$ say.
For an object $x$, $V(x)$ is the value at $x$ and $C(x)$ is the classification label.

Now, given an arbitrary function, $f$ say on a set, $X$ endowed with an indexed equivalence relation $s$ and given an element $x$ one may consider the set of classes at or above which information has flowed into the result when $f(x)$ is computed.
This notion permits a non-interference style formulation, given as the definition of a constant {\it Influenced} in  \cite{DS/FMU/FEF/040}, which is somewhat reminiscent of the definition of {\em RESULT\_INFLUENCES} in \cite{securityprops}.
Given $s$, $x$ and $f$, $\mbox{{\it Influenced}}\,s\,x\,f$ is the set of classes at or above which information has flowed into $f(x)$.
Loosely speaking, one would hope that a pair of functions, $V$ and $C$, would gived a secure means of extracting a labelled component if for each $x$, $\mbox{{\it Influenced}}\,s\,x\,V$ was a set of classes dominated by $C(x)$.
That is to say extraction of a labelled component is secure if the label dominates every class at or above which information may have flowed into the extracted value.

It turns out that a little bit of extra machinery is required to make these ideas work properly: the labelling function $C$ is itself a possible source of information flow and so must itself be classified; for simplicity, \cite{DS/FMU/FEF/040} takes the clearance of the client extracting the component as given and uses that to classify $C$.
With this extra twist, it turns out that a condition like the one mentioned in the previous paragraph is necessary, but not sufficient.
The necessity is is conjectured in \cite{DS/FMU/FEF/040} and proved in \cite{DS/FMU/FEF/044} (see {\it conj\_040\_2} in \cite{DS/FMU/FEF/040}).
The fact that the condition is not sufficient is shown informally by an example in \cite{DS/FMU/FEF/040}.
The lack of sufficiency is closely connected with the issue of invariants which undermine the non-interference style formulation of no-flows-down mentioned in section \ref{genericpolicy} above.
It seems likely that if there are natural criteria under which the condition would be sufficient, then those criteria would be precisely what distingueishes benign invariants from malign ones.
However, it is by no means certain whether natural criteria of this sort can be formulated, and more work would need to be done to explore this question.
In a specific application, if there were any doubt, one would have to check in some way that the particular indexed equivalence relations used allowed enough freedom for the formulation of the policy to mean what is intended.

\subsection{Multi-level Architectural Model}\label{architecture}
The document \cite{DS/FMU/FEF/042} gives a fairly straightforward transcription into HOL of the key ideas of \cite[section~3]{securityprops}.
Certain adjustments have been made in the transcription for the following main reasons:

\begin{enumerate}
\item
The result labelling property requires us to deal with outputs from SWORD which have not been sanitised (so that we can make assertions about information flow into parts of the outputs of a query which the requesting client is not cleared to see).
\item
The formulation of the policy is intended to exploit the generic treatment of such things in \cite{DS/FMU/FEF/040}.
\end{enumerate}

Item 1 here is accomodated in \cite{DS/FMU/FEF/042} by giving an explicit architectural construction of the system using a construction function {\em SWORD\_construction} which works by filtering the outputs of a non-sanitising machine.

Item 2 is reflected in the way the policy itself is formulated and in the rephrasing of the relevant parts of \cite{securityprops} to fall under the concept of an indexed equivalence relation used in \cite{DS/FMU/FEF/040}.

A more detailed discussion of the relationship between the HOL transcription and the Z treatment in \cite{securityprops} is given in \cite{DS/FMU/FEF/042} itself, particularly section 1.3.

\subsection{The Labelling Property for SWORD}\label{labelling}
The document \cite{DS/FMU/FEF/043} is concerned with the result labelling property of \cite[section 4]{securityprops}.
The labelling property seems to be a rather tricky notion to formalise in general;
the approach taken in \cite{DS/FMU/FEF/043} goes about as far as one usefully can without detailed consideration of the query language semantics.
Given a suitably ``factored'' account of the full semantics for SSQL, the treatment could be instantiated to allow for all the details (although, unless done with care, this could turn out to be a complex task).

The basic idea behind to \cite{DS/FMU/FEF/043} is to assume that the process of evaluating a (select) query has been factored into four stages.
The stages correspond to the four levels of the tree which appears as the result of a query as discussed in \cite[section 2.3]{securityprops}.
The intuition is of a process which proceeds in four stages.
After stage $i$, ($i = 0, 1, 2, 3$), levels $0 \ldots i - 1$ of the tree have been completely determined, and level $i$ is thought of as containing an encoding of how the actual values at that level are to be computed.
Since there are only four levels, after stage $3$ the value of the result must be completely determined.

The approach taken to the result labelling property assumes that a factorisation of the query evaluation process is given.
For a given query and input sequence, we may use the factorisation to ``pre-evaluate'' the first $i$ stages of query evaluation and then assert that the labels are correct at level $i$ if they give a bound on the classification of the information they label (with the information content of the preceding stages effectively factored out).

For example, assume that database contains the table:

\def\IntField#1#2{\hbox to 1.5in{#1 \hfil [#2]}}
\def\StringField#1#2{\hbox to 1.5in{{\tt "}#1{\tt "} \hfil [#2]}}
\begin{tabular}{ll}
\hbox to \tabstop {\hfill} &
\begin{tabular}{|c|c|c|}
\multicolumn{3}{l}{Tab}\\\hline
Key & Cargo & Transport\\\hline\hline
\IntField{1}{U} & \StringField{Slings}{S} & \StringField{Wagon}{U} \\\hline
\IntField{2}{U} & \StringField{Arrows}{S} & \StringField{Wagon}{U} \\\hline
\IntField{3}{U} & \StringField{Torpedoes}{S} & \StringField{Ship}{U} \\\hline
\end{tabular}
\end{tabular}

Consider the query:

=GFT SSQL Example
SELECT Transport FROM Tab WHERE Cargo = "Torpedoes"
=TEX

Clearly, the secret information accessed by the selection criteria here has been revealed to a client which issues this query and sees the result:


\begin{tabular}{ll}
\hbox to \tabstop {\hfill} &
\begin{tabular}{|c|}\hline
\StringField{Ship}{U} \\\hline
\end{tabular}
\end{tabular}

In the factorisation of the query evaluation, it is intended that by the third stage everything about the result will have been determined except for the actual values in the fields of the rows to be returned.
Thus the secret information revealed by the selection criteria for each row has been computed, and no longer contributes to the fourth stage of evaluation.
Thus the fourth stage might, perhaps, act like evaluation of the query:

=GFT SSQL Example
SELECT Transport FROM Tab WHERE Key = 3
=TEX

Information flow analysis of this query shows that it is acceptable to label the result field as unclassified.

Two points should be emphasised however:

\begin{enumerate}
\item
The information flow analysis on the factored query evaluation does not, of itself, imply that it is secure for a client to downgrade a field which is labelled at a classification below that of the query.
\item
The factorisation must be constructed in such a way that the information flow analysis correctly captures intuitions about the labels.
\end{enumerate}

To address the first point one would really need to know more about the client in question and its role in the overall system.
It was not felt to be within the scope of the phase 3 work to attempt to identify what clients might attempt to do with a result from the database.

As an example of the second point, consider the query:

=GFT SSQL Example
SELECT Cargo & Transport FROM Tab WHERE Key = 3
=TEX

If the first three stages of evaluation go too far, then the fourth stage might act like evaluation of the query:

=GFT SSQL Example
SELECT "Torpedoes" & Transport FROM Tab WHERE Key = 3
=TEX

Here, the information flow analysis would permit the labelling:

\begin{tabular}{ll}
\hbox to \tabstop {\hfill} &
\begin{tabular}{|c|}\hline
\StringField{TorpedoesShip}{U} \\\hline
\end{tabular}
\end{tabular}

which is intuitively incorrect, since information from a field classified secret appears in the result.
More detailed consideration of the structure of the query language would presumably enable one to state formally how far each stage may go.
\pagebreak
\section{APPLYING THE RESULTS}\label{application}
This section considers the application of the results of phase 3 to the earlier single level treatment as used in phase 1 or phase 2.
For definiteness, and because it was the phase in which detailed reasoning about the query language evaluation was first required, we will restrict attention here to phase 2 (although most of what is said is equally applicable to the phase 1 work on the query language semantics).

A number of architectural and policy issues would need to be considered before applying the phase 3 work to the earlier treatments.
The phase 3 statement of the security policy is stated in \cite{DS/FMU/FEF/042} using a single level view of the output of the system.
This reflects the fact that SWORD does not return unsanitised data to the client.
In the Z parts of \cite{securityprops}, {\it MACHINEs} are modelled as if their outputs were unsanitised multi-level objects.
In \cite{DS/FMU/FEF/042,DS/FMU/FEF/043}, where unsanitised multi-level output objects are needed (e.g., to specify the labelling property), they are the outputs of an internal component of the architecture.
These architectural differences would need to be reconciled and the relationship between the result labelling property and the policy itself considered.

In \cite{securityprops}, it is suggested that the result labelling property is to be exploited by certain clients to perform security-critical functions such as downgrades.
It might be best to take the expected behaviour of such clients into account with a view to defining an overall system security policy.
The result labelling property might then appear as a critical property of the SWORD subsystem used to prove the overall security.
Such an approach would help to validate the result labelling property against a policy which would depend less on internal details of the implementation and the query language semantics.

As regards the supplying an appropriate factorisation of the query evaluation, the treatment of the select query in \cite{DS/FMU/FEF/032} is suggestive.
The function {\it AllTuples} there which models the select query, is already organised as the composite of the composite of four subsidiary operations, {\it Join, Where, Group} and {\it Project}.
The last of these operations corresponds quite closely with what one would expect to happen at the fourth stage of query evaluation as discussed in section {labelling} above.

\section{CONCLUSIONS AND FUTURE DIRECTIONS}\label{conclusions}

A formulation in HOL of a multi-level treatment of the security policy for SWORD along the lines suggested in \cite{securityprops} has been investigated.
Several approaches to the result labelling property have been considered and an approach using a factorisation of the query evaluation process has been selected as the most promising.
In order to validate the specification work several non-trivial conjectures have been stated and proved.

The multi-level policy has been formulated in a generic way; it is parameterised by the information required to view the inputs and outputs of a system as multi-level objects.
As with any non-interference policy, care must be taken to ensure that invariants on the inputs and outputs do not subvert the means for prohibiting information flows.
It would be of theoretical interest and practical value to have a better criteria for recognising such malign invariants; the framework of \cite{DS/FMU/FEF/040} provides a simple but general context in which to investigate this.

The work on result labelling would probably be best progressed by attempting to relate it to some possible scenarios of use for SWORD.
Given more knowledge of the circumstances under which clients are likely to use labels for downgrades, one might try to validate the result labelling property against an overall security policy for the clients and SWORD together.
Once this was done, it would then be appropriate to reconcile the architectural mismatches between the \cite{DS/FMU/FEF/041} and the phase 2 treatment and then to adapt the existing single-level treatment in the light of the multi-level policy and the result labelling property.


\end{document}
