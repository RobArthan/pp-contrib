=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Errors in the SSQL Specification}  %% Mandatory field
\TPPref{DS/FMU/FEF/002}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}  %% Mandatory field (with sensible default)
\TPPstatus{Informal}			%% Mandatory field
\TPPtype{Technical Note}
\TPPkeywords{}
\TPPauthor{G.~M.~Prout & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{A record of errors found in the SSQL specification, and changes made from Annex 2 
of the ITT for the DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File 
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\subsection{Changes Forecast}
None
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document provides a record of the errors found in the
SSQL specifications provided by DRA. It also indicates alterations made from
the original specification.
\subsection{Introduction}
The basis of contract RSRE 1C/6130 is the Secure Database Technical Proposal, \cite{DS/FMU/017}. The SSQL specifications referred to in that document are those of the Annexes to the ITT, \cite{ittdra}. Since ICL's bid was accepted, we have been supplied with two new versions of specifications of secure SSQL. This document outlines errors found in these two new specifications. This document also indicates changes made from the ITT specifications, including substantial additions to those original specifications.
\section{ERRORS IN SPECIFICATION OF 28/2/92}
\begin{table}[hbp]
\center
\begin{tabular}{|l|p{5.5in}|}\hline
Page  &  Description  \\\hline \hline
8,9	& $col\_name$ in all three $Set\_clause$ functions should be $Col\_name$. \\\hline
25	& $nullValue$ missing from error list.\\\hline
26	& $Val$  may be of type $Code$.\\\hline
27	& $Float$ already used as an identifier.\\\hline
28	& Spurious reference to column existence classification. \\\hline
28	& $TableSpec$ has spurious argument $Class$. \\\hline
30	& $\_lub\_$ for `worths' should be of 
type $Worth\ ­\ Worth\ ­\ Worth$ . \\\hline
33	&  Type error in second definition of\ $\_**\_$ ($a$ is not a list; should be nil).\\\hline
34	& $projectTuples$ should take a $Table\_spec$ not a $TableSpec$. Brackets missing around $visible\ spec$.\\\hline
37	& All references to $Action$ should be to $Query$, except $action$ and $guaranteed\_action$ which should
be removed. Missing arguments from $update$.\\\hline
38	& $Action$ no longer a syntactic function.\\\hline
39	& $set\_func\_all$ and $set\_func\_distinct$ call $Value$ which has missing $v$ argument.\\\hline
41	& Error in description of $Table\_spec$. \\\hline
45,46	& In $Query\ delete$ and $Query\ update$, argument to $changeSpec$  has incorrect type. \\\hline \hline
\end{tabular}
\caption{Errors in 28/2/92 spec}
\label{FEB}
\end{table}
\newpage
\section{ERRORS IN SPECIFICATION OF 18/3/92}

\begin{table}[hbp]
\center
\begin{tabular}{|l|p{5.5in}|}\hline
Page  &  Description  \\\hline \hline
7	& Constructor $vase$ should be $case$. \\\hline
7	& $row\_existence$ and $joined\_row\_existence$ missing from list of constructors.\\\hline
10	& $col\_name$ in all three $Set\_clause$ functions should be $Col\_name$.\\\hline
27	& $notGuaranteed$ no longer relevant. No errors for when a user tries to access a table whose classification is not dominated by his clearance. \\\hline
30	& $Tab$ is used in definition of $Reference$ although it has not yet been defined.\\\hline
33	& $\_lub\_$ for `worths' should be of 
type $Worth\ ­\ Worth\ ­\ Worth$ . \\\hline
35	&  Type error in second definition of\ $\_**\_$ ($a$ is not a list; should be nil).\\\hline
36	& $projectTuples$ should take a $Table\_spec$ not a $TableSpec$. Brackets missing around $visible\ spec$.\\\hline
37	& All references to $Action$ should be to $Query$, except $action$ and $guaranteed\_action$ which should
be removed. Missing arguments from $update$.\\\hline
38	& $Action$ no longer a syntactic function.\\\hline
39	& $set\_func\_all$ and $set\_func\_distinct$ call $Value$ which has missing $v$ argument.\\\hline
41	& Error in description of $Table\_spec$. \\\hline
45,46	& In $Query\ delete$ and $Query\ update$, argument to $changeSpec$  has incorrect type. \\\hline \hline
51	& The description of  $Query\ update$ implies that classification of a field can only be raised.  \\\hline \hline
\end{tabular}
\caption{Errors in 18/3/92 spec}
\label{MAR}
\end{table}

\section{ADDITIONS AND CHANGES TO ANNEX 2}
\subsection{Specification of 28/2/92}
\begin{enumerate}
\item
$Action$ is no longer a sort.
\item
Constructor $let$ added; constructors $action$ and $guaranteed\_action$  deleted.
\item
Constructor $update$ has extra clauses $groupby$ and $having$.
\item
Operators $definitely$ and $possibly$ added.
\item
Errors $noSuchTable$, $noSuchDirectory$, $ambiguousEvaluate$, $ambiguousHaving$ 
and $nullValue$ have been added.
\item
$tooTall$ changed
\item
$GroupedResult$, $Maybe$ and $MaybeResult$ added. 
\item
$make\_data$ now classified at user's clearance rather than bottom
\item
Definition of $lookup$ in place.
\item
$check\_where\_complete$ added.
\item
$resultBool$ and $resultClass$ changed.
\item
$engroup$ and $eliminate$ added (because of `groupby' and `having').
\item
Significant changes made to syntactic clauses and functions because of new/different constructors and because of identified `holes' in Annex 2 to the ITT \cite{ittdra} being plugged.
\end{enumerate}

\subsection{Specification of 18/3/92}
Modifications on 28/2/92 version are marked by sidelines.
\section{FURTHER ISSUES}
There is a problem if a user tries to access a table whose classification is not dominated by his clearance;
suggest an $accessDenied$ error message.

It is not secure for a user to delete rows whose existence class is below his clearance.
$deleteQuery$ now insists that the user clearance be the same as the existence class.
\section{PHASE TWO SPECIFICATION PROBLEMS}
Many minor errors reported in the transformation specs of 06/01/93 (see file of replaced specs).

The following  give rise to possible security violations: 
\subsection{Output Filter}
Output filter specs faxed on 21st January incorrect.
\subsubsection{Definitions}
Function $filter\_where$ should discard rows where boolean is 
true.

\subsubsection{Select Query Filter}
Check query which determines whether or not a SELECT should
 proceed has been omitted.
\subsection{Transformations}
\subsubsection{$SELECT$s in $FROM$-list}
Insecurity reported on 16th February. Problem with
=GFT SSQL query
SELECT * FROM
	SELECT X FROM Y GROUPBY Z
=TEX
With an outer select, if user is not cleared to see everything 
in the $GROUP\,BY$-column, then an additional TSQL check query 
is generated. Not the case with an inner select. $tuple\_list\sb{make\_outer}$ checks clearance, $tuple\_list\sb{make}$ does not.
\subsubsection{Column Existence}
Column existence class `forgotten' in transformations.
\subsubsection{$SELECT$s in Expressions}

Neither the checks on the groupby columns, nor the checks on the class
of the where clause are made in the places where selects appear within
an expression (EXISTS and single-value). This gives rise to the same
sort of insecurities as with missing the $GROUP\,BY$ checks for a $SELECT$
in a $FROM$-list (see above).

\subsubsection{Directory and Table Classes}
These are not mentioned in the query transformations.

\subsubsection{Ordering of Output Tables}
This is not specified and is a possible source of insecurity if output
tables are not put in some fixed order not dependent on information the
client is not cleared to see.

\subsubsection{$simplify\sb{ands}$ and $simplify\sb{ors}$}
The algorithms of $simplify\sb{ands}$ and $simplify\sb{ors}$ give
rise to insecurities. In $simplify\sb{ands}$,  if the expression evaluates
to $true$, then the client knows that all the operands are $true$ and the class
is the l.u.b. of the classes of the operands, whereas if the expression evaluates
to $false$ then the client knows that some operand is $false$ and the class
is taken to be the g.l.b. of the classes of the operands which are
$false$. Consider the case where the classes of the false operands are incomparable -
the g.l.b is bottom. Replaced by l.u.b.s. Similar problem (and solution) for 
$simplify\sb{ors}$.


\section{PROBLEMS DETECTED DURING PHASE 2 PROOFS}
During the Phase 2 proof stage it was discovered necessary to
make minor amendments to the $HideDerTableData$ operation
in version 1.16 of \cite{DS/FMU/FEF/026}  and the value and table computation
specifications in version 1.13 of \cite{DS/FMU/FEF/032}.  (The versions
mentioned are those of the drafts delivered to DRA just before the phase 2
proof work was begun in anger.)

\subsection{$HideDerTableData$}

Originally, $HideDerTableData$ in \cite{DS/FMU/FEF/026} threw away not
only rows whose existence the client is not cleared to know but also
rows where the class of the $Where$ clause is not dominated by the
clearance of the user. This was intended to model not only the phase 1
hiding operation on the table, but also,  mistakenly, the action of the
output filter.  However, the $Where$ operation only throws away rows
whose existence the client is not cleared to know (so that the output
filter can determine whether or not a $MayNotBeComplete$ message is
appropriate).  $HideDerTableData$ has been modified to retain rows for
which the user is not cleared to evaluate the $WHERE$ clause. This
gives stronger inductive hypotheses for the proofs about the value and
table computations of \cite{DS/FMU/FEF/032}, from which the desired
facts about the results of the output filtering still follow.

This change is essentially concerned with the internal details of
the formalisation and has no direct impact for the security of the
system.

\subsection{$Where$}

The specification of $Where$ in \cite{DS/FMU/FEF/032} was changed (a)
so that rows for which the client is not cleared to evaluate the
$WHERE$ clause are retained and (b) so that rows whose existence the
user is not cleared to know are removed at the outset.
(a) was just an oversight in transcribing the effect of
$tuple\_list\sb{make\_outer}$. (b) was found necessary to ensure that
aggregate functions such as $COUNT(*)$ inside the $WHERE$ clause itself
are not a source of covert channels. E.g. the output produced by a query such as:

=GFT SSQL query
SELECT * FROM X WHERE COUNT(*) = 1
=TEX

should only depend on rows whose existence the client is cleared to know.

\subsection{$Group$}

The specification of $Group$ in \cite{DS/FMU/FEF/032} was changed
so that the clearance returned does not depend on the result of the
grouping if the client is not cleared to know the information required
to partition the table into groups. If this is not done then the clearance
is itself a possible covert channel. This covert channel would not arise in
practice in an implementation which signals possible insecurity in inner selects
by raising exceptions. 

\subsection{$Alltuples$}

The specification of $Alltuples$ in \cite{DS/FMU/FEF/032} was changed
so that the clearance returned does not depend on the result of
$Group$ function if the client is not cleared to compute
the operands of the $Alltuples$ operation.


As with the change to $Group$, if this is not done then the clearance
is itself a possible covert channel; moreover, the covert channel would
not arise in practice in an implementation which signals possible
insecurity in inner selects by raising exceptions.

\subsection{$ExistsTuples$/$SingleValue$}

As formalised in version 1.13 of \cite{DS/FMU/FEF/032}, the clearance
returned by these value forms would itself be a possible covert channel.
They have been modified to model more closely an implementation which
detects immediately the situation where the client is not cleared to evaluate
the operand table.

\subsection{$SetFuncAllAnd$/$SetFuncAllOr$/$BinOpAnd$/$BinOpOr$}

In version 1.13 of \cite{DS/FMU/FEF/032}, the logical operators were
formulated so that $AND$, for example, would return the l.u.b. of
the clearances associated with $false$ operands if there were any such operands.
This make the clearance returned a possible covert channel. The $AND$ operation
is now defined to return the l.u.b. of the clearances associated with the
$false$ operands which the client is cleared to see (if there are any). This
is secure and permits the desired use of forms such as:

=GFT SSQL Example
	my_clearance DOM CLASS OF x AND x > 0
=TEX

(In fact, the current formulation would still be secure, no matter
what fixed means of combining the clearances were used instead of l.u.b.,
since only clearances associated with $false$ value the client is cleared
to know are combined.)

\section{PHASE 2 ISSUES}

\subsection{Ordering of Tables}

The formulation of \cite{DS/FMU/FEF/034} uses an ordering on the tables
computed which is independent of the values held in the columns of the
tables and so the ordering is not a potential covert channel. If in the
actual implementation data-dependent ordering criteria are used then
the system will be insecure unless steps are taken to ensure that the client
is cleared to know the information required to order the table.

\subsection{Modelling Issues}
See section 3.5 of \cite{DS/FMU/FEF/034} for a discussion of modelling
assumptions made in the phase 2 formal treatment.

\end{document}




