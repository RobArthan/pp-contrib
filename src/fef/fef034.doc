
=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Phase II Proof Strategy}  %% Mandatory field
\TPPref{DS/FMU/FEF/034}  %% Mandatory field
\def\SCCSversion{$Revision$%
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$%
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{R.~D.~Arthan & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document discusses proof opportunities and proof
strategies for phase II of the
DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[Issue \SCCSversion(\FormatDate{$Date$%
})] First draft for review by DRA.
\end{description}

\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document identifies various opportunites for proofs in phase II
of the Front End Filter project and comments upon their significance. 
It also contains discussion of and formal definitions relating to the
problem of finding the proofs.

\subsection{Introduction}
The specifications for phase II of the Front End Filter project are
somewhat more complicated in structure than those of phase I.
This is partly because of the greater complexity of the informal specifications
and indeed of the system they model. It is also because the separation
of security concerns from other concerns is less straightforward for the
Front End implementation than it is for the SSQL semantics.
 
The three main documents in the phase II specifications in which
the issues which are felt to be practically amenable to formal
reasoning are separated out in stages in the three
documents \cite{DS/FMU/FEF/022,DS/FMU/FEF/026,DS/FMU/FEF/032}.
These are concerned with an {\em Architectural Model}, a
{\em TSQL Execution Model} and the {\em Table Computations},
respectively.

The specifications in these documents draw on supporting material
from the phase I specifications and from the documents
\cite{DS/FMU/FEF/021,DS/FMU/FEF/024,DS/FMU/FEF/025,DS/FMU/FEF/028,DS/FMU/FEF/029}
as necessary. Each of \cite{DS/FMU/FEF/022,DS/FMU/FEF/026,DS/FMU/FEF/032}
identifies critical properties for the stage it is concerned with, and
each of these provides an opportunity for formal proof work.

It is the intention of the present document to give a brief overview
of the three stages of the discussion and to discuss in more detail
the strategy for carrying out partial proofs of selected critical
properties. As a result of preliminary correspondence and discussion with DRA,
it is intended to concentrate effort on the security properties which relate
most directly with the specifications of the table computations
produced by the Front End Transformations.

This document itself gives some partial proofs demonstrating how the overall
security properties of the system may be reduced to properties of its
subsystems and how the material of \cite{DS/FMU/FEF/026,DS/FMU/FEF/032}
recasts aspects of the critical properties on one of the subsystems into a more
explicit and tractable form. These partial proofs are presented as
\Product\ proofs of theorems whose conclusions are, in this document, always
the overall security property for the SWORD system. The theorems have
assumptions which are best thoughts of as lemmas in a putative security
proof which have not yet been proved. Here, for example, the first partial proof
shows that the system is secure provided its top-level subsystems possess
certain security properties and that the architectural construction of the
system from its subsystems has a certain property.
Each partial proof step replaces one or more of these assumptions from an earlier
theorem by zero or more new assumptions, the
aim being that any new assumptions should be more tractable or more plausible,
than the assumptions they replace.
Here, in the final partial proof, the subsystem security
property relating to the $SELECT$ query has been replaced by three new
assumptions which express the desired security property in a rather more explicit
fashion.

\section{PRELIMINARIES}
The following \Product{} instructions set up the new theory $fef034$,
which is used to hold definitions relating to the properties to be proved.

=SML 
open_theory "fef032";
(force_delete_theory "fef034" handle _ => ());
new_theory€"fef034"›;
set_pc"hol";
=TEX
\section{SYSTEM CONSTRUCTION}
The present document provides a convenient point to pull together
the constructions of the other phase II specification to give the
formal definition of the behavioural model of the SWORD system
whose security properties we wish to investigate by formal proof:

πHOLCONST
‹	€FE_SWORD_SYSTEM› : (Query, ANSWER) BEHAVIOURS
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	FE_SWORD_SYSTEM = FE_SWORD reprState TSQLtf STP outputFilter
∞

Thus the model is obtained by applying the architectural
construction function $FE\_SWORD$ of \cite{DS/FMU/FEF/022} to the
the representation function and subsystems defined in
\cite{DS/FMU/FEF/022,DS/FMU/FEF/025,DS/FMU/FEF/021,DS/FMU/FEF/024}.

The overall security conjecture we are interested in is the assertion
that this behavioural model satisfies the security policy defined
in \cite{DS/FMU/FEF/003}. This may be captured in the following definition:

πHOLCONST
‹	€FE_SWORD_SYSTEM_secure› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	FE_SWORD_SYSTEM_secure § FE_SWORD_SYSTEM ç secure
∞

\section{ARCHITECTURAL MODEL}\label{ARCHITECTURALMODEL}

A formal model of the architecture of the Front End Implementation
of SWORD is given in \cite{DS/FMU/FEF/022}. This architectural model
defines how certain subsystems with specified interfaces are combined
to produce a behavioural model of the SWORD system to which the formal
security policy of \cite{DS/FMU/FEF/003} applies directly.
\cite{DS/FMU/FEF/022} also defines critical properties on the subsystem
and states a conjecture that the policy is satisfied if these hold.

The subsystems identified in \cite{DS/FMU/FEF/022} are as follows:

\begin{itemize}
\item
The target DBMS, thought of as a processor of TSQL queries.
\item
An Output Filter, informally specified in \cite{filter},
whose main role is to purge data from the output of
the target DBMS which the client is not cleared to see.
\item
The SSQL Transformation Processor, informally specified in cite{trans},
whose main role is to map SSQL queries into
sequences of one or two TSQL queries to
be executed on the target DBMS.
\end{itemize}

The architectural construction is also parameterised by a representation
function which is really an artefact of the modelling approach rather than
a subsystem in its own right.

The main functional aspect described in \cite{DS/FMU/FEF/022} is the
overall interconnection of the three subsystems. In particular, it
defines the way the optional check queries produced by the
SSQL Transformation Processor are used to prevent execution of queries
which would otherwise cause illegal information flows which the Output
Filter is not able to suppress.

\cite{DS/FMU/FEF/022} identifies five critical properties. Four of
these, $subsys\_secureA \ldots subsys\_secureD$ constrain only
the SSQL transformation processor and the target DBMS. The fifth
$subsys\_secureE$ constrains all three subsystems. What is, in effect,
the conjunction of the five properties is given the name
$subsys\_secure$; it is conjectured that, if the three subsystems
have this combined property, then the SWORD system constructed from them
by the architectural model will satisfy the the security policy.

The architectural security conjecture taken from the
informal discussion at the end of \cite{DS/FMU/FEF/022} may be recorded
for future reference in a metalanguage variable\footnote{%
Because this conjecture is polymorphic, i.e. contains type variables,
\Product\ does not allow us to define a boolean constants
to capture it in the theory database (essentially because the truth
value might depend on the instantiation of the type variables in the
conjecture, which would render the definition inconsistent). Consequently,
we use a term held in a metalanguage variables to record the conjecture rather
than follow the style of \cite{DS/FMU/FEF/007}.%
}%
:

=SML
val €SWORD_architecture_secure_conj› = ¨
	µrepr dbms stp filter∑
			(dbms, stp, filter) ç subsys_secure repr
		¥	FE_SWORD repr dbms stp filter ç secure
Æ;
=TEX

It is expected that the proof of this lemma would be quite similar to
that of the unwinding result proved during phase I for the SSQL
semantics (see \cite{DS/FMU/FEF/007}). Indeed, it is likely that the
commonality between the two could be exploited to adapt parts of the
phase I proofs for re-use here.  These common parts would be those
concerned with showing that appropriate critical properties on the
transition function of the system entail the security of the
behavioural model constructed from it. The more novel part of the proof
would mainly be concerned with the function $mkTf\sb{f}$ of
\cite{DS/FMU/FEF/022} which constructs the transition functions on the
system and is largely concerned with looking after the optional check
query and the check it makes.

The particular instance of this conjecture with which we are concerned
is captured by the following definition.

πHOLCONST
‹	€Architecture_Secure› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	Architecture_Secure §
‹		(TSQLtf, STP, outputFilter) ç subsys_secure reprState
‹		¥
‹		FE_SWORD_SYSTEM ç secure
‹		
∞

On the basis of the definition of $subsys\_secure$ the hypothesis
here might be expected to reduce to 5 subsidiary security properties as
follows:

πHOLCONST
‹	€Subsys_SecureA› : BOOL;
‹	€Subsys_SecureB› : BOOL;
‹	€Subsys_SecureC› : BOOL;
‹	€Subsys_SecureD› : BOOL;
‹	€Subsys_SecureE› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	(Subsys_SecureA § (TSQLtf, STP) ç subsys_secureA reprState) ±
‹	(Subsys_SecureB § (TSQLtf, STP) ç subsys_secureB reprState) ±
‹	(Subsys_SecureC § (TSQLtf, STP) ç subsys_secureC reprState) ±
‹	(Subsys_SecureD § (TSQLtf, STP) ç subsys_secureD reprState) ±
‹	(Subsys_SecureE § (TSQLtf, STP, outputFilter) ç subsys_secureE reprState)
∞

Of these five, it is part E  which constrains the flow
of information into the output of a transition; parts C and D constrain the
information flows into the result state of a transition; parts A and B are,
in essence,
structural requirements ensuring that the subsystems fit together sensibly.

We may now give the following partial proof of the overall system
security property, given the architectural security property and the
security properties of the subsystems as assumptions.
=SML
set_goal(
	[¨Architecture_SecureÆ,
	 ¨Subsys_SecureAÆ,
	 ¨Subsys_SecureBÆ,
	 ¨Subsys_SecureCÆ,
	 ¨Subsys_SecureDÆ,
	 ¨Subsys_SecureEÆ],
				¨FE_SWORD_SYSTEM_secureÆ);
=TEX
=SML
a(all_asm_ante_tac THEN rewrite_tac (map get_spec
	[¨Architecture_SecureÆ, ¨Subsys_SecureAÆ, ¨Subsys_SecureBÆ,
	¨Subsys_SecureCÆ, ¨Subsys_SecureDÆ, ¨Subsys_SecureEÆ,
	¨subsys_secureÆ,
	¨FE_SWORD_SYSTEM_secureÆ]));
a(PC_T1 "sets_ext" REPEAT strip_tac);
val €Theorem1› = save_pop_thm "Theorem1";
=TEX
Only the SSQL $SELECT$ query falls within the scope of phase I of the project.
Consequently, further proof work concentrates on the conjecture
$Subsys\_SecureE$.
 
\section{EXECUTION MODEL}\label{EXECUTIONMODEL}
The formal definition of the Output Filter, the SSQL Transformation Processor
and the TSQL semantics for SWORD is given in the documents
\cite{DS/FMU/FEF/028,DS/FMU/FEF/029,DS/FMU/FEF/024,DS/FMU/FEF/021}.
This material is related to the architectural model by the execution
model defined in \cite{DS/FMU/FEF/026}. This execution model serves both
to bring these pieces together and to relate the specification of the
transformations to a conceptually simpler semantic description of how
SSQL queries are intended to be executed on the target database. 
This is achieved, in effect, by proposing an alternative means of
constructing the TSQL database semantics. This construction, formalised
as the function $EM$ of \cite{DS/FMU/FEF/026}, is parameterised by
two things: a compiler mapping a TSQL query to the function of
the database state it computes, and an update operation which computes
the state transformation resulting from the application of
a compiled query in a given state. The desired relationship between
the compiler and update functions and the TSQL semantics as specified
in \cite{DS/FMU/FEF/021} is captured in the relation $Correct\_Compile$
of \cite{DS/FMU/FEF/026}.

The notion of compiler used in the Execution Model is also used
in \cite{DS/FMU/FEF/026} to formalise the requirements
on the results of the transformation processing in semantic terms, independent
of the syntactic details of the transformations as (partially) dealt with in
\cite{DS/FMU/FEF/029}. This is captured in the function $STP\_secure\_E$
of \cite{DS/FMU/FEF/026}. The main conjecture associated with the
security properties of the Execution Model as regards the $SELECT$
query is then captured by the following definitions, the first of which
asserts of the SSQL Transformation Processor, $STP$, that 
there exist compiler and update subsystems from which it could be constructed.

πHOLCONST
‹	€Correct_Compile_STP_secure_E› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	Correct_Compile_STP_secure_E §
‹	(∂ compile upd ∑
‹		(compile, upd) ç Correct_Compile ± STP ç STP_secure_E compile)
∞

πHOLCONST
‹	€EM_SecureE› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	EM_SecureE § (Correct_Compile_STP_secure_E ¥ Subsys_SecureE)
∞

We can use the above definitions to produce a partial proof of overall
security in which these critical properties replace $Subsys\_SecureE$
=SML
set_goal(
	[¨Architecture_SecureÆ,
	 ¨Subsys_SecureAÆ,
	 ¨Subsys_SecureBÆ,
	 ¨Subsys_SecureCÆ,
	 ¨Subsys_SecureDÆ,
	 ¨EM_SecureEÆ,
	 ¨Correct_Compile_STP_secure_EÆ],
				¨FE_SWORD_SYSTEM_secureÆ);
=TEX
=SML
a(all_asm_ante_tac
	THEN rewrite_tac (map get_spec [¨EM_SecureEÆ, ¨Correct_Compile_STP_secure_EÆ]));
a(REPEAT strip_tac
	THEN all_asm_fc_tac[all_¥_intro Theorem1] THEN all_asm_fc_tac[]);
val €Theorem2› = save_pop_thm "Theorem2";
=TEX
\section{TABLE COMPUTATIONS}\label{TABLECOMPUTATIONS}
The requirement on the results of the transformation
processing captured by $STP\_secure\_E$ is still rather implicit and is
expressed in terms of properties of query execution as a whole rather than
in terms of the information flow properties which individual
SSQL language constructs must possess.
The intention of \cite{DS/FMU/FEF/032} is, in effect, to construct
a stronger requirement than $STP\_secure\_E$ by induction over the abstract syntax
of SSQL and by means which are independent of the compilation function.
This gives a model of query execution which can, at least informally, be
related quite directly to the transformation processing.

The main goal of \cite{DS/FMU/FEF/032} is the construction of a
set $TableComputations$ of functions whose signatures are the same as
(a slight simplification of) those of the result of compiling queries using the
compilers considered in the Execution Model. This set is, to be more precise,
a family of sets parameterised by the client clearance. The set is constructed
by induction over a collection of functions each of which represents
the semantics of an SSQL construct, viewed as being executed using the
techniques implicit in the transformations. The computation performed by each of
these semantic functions may be readily checked against the transformations
for the corresponding SSQL construct. 

After constructing the set $TableComputations$, \cite{DS/FMU/FEF/032} then
defines two sets which may be used to relate it to the considerations
of \cite{DS/FMU/FEF/026}. The first of these, $OkTableComputation$,
is the set of all possible table computations which are secure
by dint of a characterisation like that given in \cite{DS/FMU/FEF/026}.
The second, $OkSTP$, is, roughly speaking, the set of objects of the
same type as the SSQL Query Transformation Processor, $STP$, which always produce
query sequences whose compiled forms perform computations contained in the set
$TableComputations$.

We can now define two assertions which we conjecture to be true
of these sets. The first of these conjectures asserts that the
$OkSTP$ is contained in the condition $STP\_Secure\_E$
of \cite{DS/FMU/FEF/026}:

πHOLCONST
‹	€OkSTP_Secure_E_Lemma› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	OkSTP_Secure_E_Lemma §
‹	µcompile∑
‹		((OkSTP compile): (Query, FILTER_PARS)STP_TYPE ) Ä
‹		STP_secure_E compile
∞

In the above, the type constraint is required, since
for technical reasons connected with the primitive definitional
mechanisms of \Product, it is necessary to constrain the assertion to the
particular type of SSQL Transformation Processors with which we are concerned
rather than leaving the set as a polymorphic one\footnote{%
\Product\ enforces this restriction since, otherwise, the definition might
be inconsistent, because the value of the constant defined might depend on how
the polymorphic defining property was instantiated.)}.

The second conjecture asserts that the
table computations defined in the previous section do have
the $OkTableComputation$ property.


πHOLCONST
‹	€TableComputationsSecure›
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	TableComputationsSecure §
‹	µcc∑ TableComputations cc Ä OkTableComputation cc
∞

The definitions in \cite{DS/FMU/FEF/032}
of the terms involved in these two conjectures have
been chosen to make the following proof fairly straightforward:

=SML
set_goal([], ¨TableComputationsSecure ¥ OkSTP_Secure_E_LemmaÆ);
=TEX
=SML
a(PC_T1 "hol2"
	rewrite_tac(map get_spec[
		¨TableComputationsSecureÆ, ¨OkTableComputationÆ,
		¨OkSTP_Secure_E_LemmaÆ, ¨ConditionEÆ,
		¨OkSTPÆ, ¨STP_secure_EÆ, ¨LetÆ]));
a(REPEAT_UNTIL is_± strip_tac THEN all_asm_fc_tac[]);
a(lemma_tac¨compile (Fst (destVal (x (q, c)))) = Ã tl∑ (Snd (dte tl), [])Æ
	THEN1 (asm_rewrite_tac[ext_thm]
		THEN PC_T1"prop_eq_pair" REPEAT strip_tac
		THEN asm_rewrite_tac[]));
a(asm_ante_tac ¨ri ç RiskInputs c (compile (Fst (destVal (x (q, c)))))Æ
	THEN asm_rewrite_tac[]);
a(strip_tac THEN all_asm_fc_tac[] THEN all_asm_fc_tac[]);
a(REPEAT strip_tac);
val €Theorem3› = save_pop_thm "Theorem3";
=TEX

We now give the lowest level of partial proof of the overall system
security for this document. We use the following definition in stating
the result to be proved.

πHOLCONST
‹	€Correct_Compile_OkSTP› : BOOL
˜¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
‹	Correct_Compile_OkSTP §
‹	(∂ compile upd ∑
‹		(compile, upd) ç Correct_Compile ± STP ç OkSTP compile)
∞

=SML
set_goal(
	[¨Architecture_SecureÆ,
	 ¨Subsys_SecureAÆ,
	 ¨Subsys_SecureBÆ,
	 ¨Subsys_SecureCÆ,
	 ¨Subsys_SecureDÆ,
	 ¨EM_SecureEÆ,
	 ¨Correct_Compile_OkSTPÆ,
	 ¨TableComputationsSecureÆ],
				¨FE_SWORD_SYSTEM_secureÆ);
=TEX
=SML
a(all_asm_ante_tac THEN rewrite_tac (map get_spec
	[¨Correct_Compile_OkSTPÆ]));
a(REPEAT strip_tac
	THEN PC_T1 "hol2" all_fc_tac[rewrite_rule[get_spec¨OkSTP_Secure_E_LemmaÆ]
		Theorem3]);
a(fc_tac[rewrite_rule[get_spec¨Correct_Compile_STP_secure_EÆ](all_¥_intro Theorem2)]);
a(all_asm_fc_tac[]);
val €Theorem4› = save_pop_thm "Theorem4";
=TEX
So, in $Theorem4$ the assumption $Subsys\_SecureE$ has been replaced
by three new assumptions, of which we believe that $Correct\_Compile\_OkSTP$
is at least a highly plausible (and certainly desired) property of the
implementation, and that the other two are likely to be amenable to
further, perhaps partial, proof work.

\section{CLOSING DOWN}
=IGN
output_theory{theory = "fef034",out_file = "fef034th.doc"};
=TEX
The following \Product{} instruction restores the previous proof context.
=SML
pop_pc();
=TEX

\newpage
\HOLindexOff
\input{fef034th.tex}
\HOLindexOn
\newpage
\twocolumn[\section{INDEX} \label{INDEX}]
\small
\printindex

\end{document}

=IGN




