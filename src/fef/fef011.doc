=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Proof of Security (IIb)}  %% Mandatory field
\TPPref{DS/FMU/FEF/011}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{G.~M.~Prout & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document provides a formal proof for two of the conjuncts
of the security property
on the relationship between $hide$ and $updateState$ for the
DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[Issue \SCCSversion(\FormatDate{$Date$
})] Some theorems renamed; proof context renamed.
\end{description}

\subsection{Changes Forecast}
Changes  may be necessary  as a result of issues raised
during  the transcription of the specification.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document provides a formal proof  that the components $hide$ and $updateState$ 
satisfy some of their critical 
requirements, as specified in 
the proof strategy \cite{DS/FMU/FEF/007}. It constitutes part of deliverable D6 
of work package 1c, as given
in section 7 of the Secure Database Technical Proposal, \cite{DS/FMU/017}.

\subsection{Introduction}

This document is a proof script which provides a formal proof which contributes to the proof
 of the second conjunct of $Lemma1$,
the requirement on the critical components  $hide$ and $updateState$, described in the proof strategy document \cite{DS/FMU/FEF/007}.

{\bf Lemma1}
=GFT 
	?Ù 	hide ç secureHide ± (hide,updateState) ç secureUpdate
=TEX

In this document, we give proofs of the third and fourth conjuncts of $secureUpdate$:
=GFT
	?Ù 	µ c s e ∑ Fst(Snd(updateState (c,e,s))) = c
=TEX

and

=GFT
	?Ù 	µ c sâ1 sâ2 e ∑ hide (c, sâ1) = hide (c, sâ2)
			 ¥ Snd (updateState (c, e, sâ1)) = Snd (updateState (c, e, sâ2))
=TEX


\section{PRELIMINARIES}
The following \Product{} instructions set up the new theory $fef011$.

=SML 
open_theory "fef010";
new_theory€"fef011"›;
push_merge_pcs["hol","wrk049","'pair1"] ;
=TEX

\section{CONSISTENCY PROOFS}
We satisfy the consistency proof obligations
for constants defined in \cite{DS/FMU/FEF/004} that
are needed in the proofs that follow.
=SML
val €InsertEffect_def› = get_spec¨InsertEffectÆ;
push_consistency_goal¨destInsertÆ;
a(rewrite_tac[InsertEffect_def]);
a(∂_tac¨(OutL,OutL o OutR,OutL o OutR o OutR,OutR o OutR o OutR)Æ);
a(rewrite_tac[]);
save_consistency_thm¨destInsertÆ(pop_thm());
val €destInsert_def› = get_spec¨destInsertÆ;
=TEX
=GFT HOL output
destInsert_def = 
Ù µ i d u s
  ∑ destInsert (InsertEffect i) = i
      ± destDelete (DeleteEffect d) = d
      ± destUpdate (UpdateEffect u) = u
      ± destSelect (SelectEffect s) = s
=TEX

=SML
push_consistency_goal¨tabFromEffectÆ;
a(rewrite_tac[get_spec¨InsertEffectÆ]);
a(∂_tac¨Ã x : Effect ∑
	if IsL x
	then Fst(OutL x)
	else if IsL(OutR x)
	then Fst(OutL(OutR x))
	else Fst(OutL(OutR(OutR x)))Æ);
a(rewrite_tac[sum_clauses]);
save_consistency_thm¨tabFromEffectÆ(pop_thm());
val €tabFromEffect_def› = get_spec¨tabFromEffectÆ;
=TEX
=GFT HOL output
tabFromEffect_def = 
Ù µ i d u
  ∑ tabFromEffect (InsertEffect i) = Fst i
      ± tabFromEffect (DeleteEffect d) = Fst d
      ± tabFromEffect (UpdateEffect u) = Fst u
=TEX

=SML
push_consistency_goal¨giveValÆ;
a(∂_tac¨InL,InR,OutL,OutR,IsL,IsRÆ);
a(rewrite_tac[sum_clauses]);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a(∂_tac¨OutL veÆTHEN asm_rewrite_tac[]);
a(∂_tac¨OutR veÆTHEN asm_rewrite_tac[]);
save_consistency_thm¨giveValÆ(pop_thm());
val €giveVal_def› = get_spec¨giveValÆ;
=TEX
=GFT HOL output
giveVal_def = 
Ù µ v e ve
  ∑ giveVal v = InL v
      ± giveError e = InR e
      ± destVal (giveVal v) = v
      ± destError (giveError e) = e
      ± (isVal ve § (∂ vâ1∑ ve = giveVal vâ1))
      ± (isError ve § (∂ eâ1∑ ve = giveError eâ1))
=TEX
\subsection{Retrieving the Remaining Definitions of Constants}

=SML
val €changeSpec_def› = conv_rule(MAP_C let_conv)(get_spec¨changeSpecÆ);
val €replaceRows_def› = get_spec¨replaceRowsÆ;
val €updateQuery_def› = get_spec¨updateQueryÆ;
val €isInsert_def› = get_spec¨isInsertÆ;
val €isDelete_def› = get_spec¨isDeleteÆ;
val €isUpdate_def› = get_spec¨isUpdateÆ;
val €isSelect_def› = get_spec¨isSelectÆ;
val €getTable_def› = get_spec¨getTableÆ;
val €tabExists_def› = get_spec¨tabExistsÆ;
val €colDefaults_def› = get_spec¨colDefaultsÆ;
val €visibleCols_def› = get_spec¨visibleColsÆ;
val €revealRow_def› = conv_rule(MAP_C let_conv)(get_spec¨revealRowÆ);
val €insertQuery_def› = conv_rule(MAP_C let_conv)(get_spec¨insertQueryÆ);
val €updateRow_def› = conv_rule(MAP_C let_conv)(get_spec¨updateRowÆ);
val €updateField_def› = get_spec¨updateFieldÆ;
val €updateStateR_def› = conv_rule(MAP_C let_conv)(get_spec¨updateStateRÆ);
val €updateState_def› = conv_rule(MAP_C let_conv)(get_spec¨updateStateÆ);
=TEX

\section{AUXILIARY THEOREMS}
First we simplify some of the constant defining theorems.
=SML
val €giveVal_eq_thm› = save_thm("giveVal_eq_thm",prove_rule[giveVal_def]
	¨µ x y ∑ giveVal x = giveVal y § x = yÆ);
val €giveError_eq_thm› = save_thm("giveError_eq_thm",prove_rule[giveVal_def]
	¨µ x y ∑ giveError x = giveError y § x = yÆ);
val €≥isError_giveVal_thm› = save_thm("≥isError_giveVal_thm",
	prove_rule[get_spec¨isErrorÆ]¨µ v ∑ ≥isError(giveVal v)Æ);
val €≥isVal_giveError_thm› = save_thm("≥isVal_giveError_thm",
	prove_rule[get_spec¨isErrorÆ]¨µ e ∑ ≥isVal(giveError e)Æ);
val €isVal_def› = all_µ_intro(nth 4 (strip_±_rule (all_µ_elim giveVal_def)));
val €isError_def› = all_µ_intro(nth 5 (strip_±_rule (all_µ_elim giveVal_def)));
=TEX
=GFT HOL output
giveVal_eq_thm = Ù µ x y∑ giveVal x = giveVal y § x = y
giveError_eq_thm = Ù µ x y∑ giveError x = giveError y § x = y
≥isError_giveVal_thm = Ù µ v∑ ≥ isError (giveVal v)
≥isVal_giveError_thm = Ù µ e∑ ≥ isVal (giveError e)
isVal_def = Ù µ ve∑ isVal ve § (∂ vâ1∑ ve = giveVal vâ1)
isError_def = Ù µ ve∑ isError ve § (∂ eâ1∑ ve = giveError eâ1)
=TEX
=SML
val thm1 = (push_goal([],¨µ x y z ∑ ≥((z = InL x) ± (z = InR y))Æ);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
pop_thm());
=TEX
We provide the obvious results for sum types.
=SML
push_goal([],¨µq∑ (isInsert q ± ≥(isDelete q ≤ isUpdate q ≤ isSelect q))
	≤ (isDelete q ± ≥(isInsert q ≤ isUpdate q ≤ isSelect q))		
	≤ (isUpdate q ± ≥(isInsert q ≤ isDelete q ≤ isSelect q))
	≤ (isSelect q ± ≥(isInsert q ≤ isDelete q ≤ isUpdate q))Æ);
a(rewrite_tac[isInsert_def,InsertEffect_def]);
a(µ_tac THEN strip_tac THEN strip_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(prove_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1.1" *** *)
a(strip_asm_tac(µ_elim¨qÆsum_cases_thm));
(* *** Goal "1.1.1" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.1.2" *** *)
a(strip_asm_tac(µ_elim¨zÆsum_cases_thm));
(* *** Goal "1.1.2.1" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(strip_asm_tac(µ_elim¨z'Æsum_cases_thm));
(* *** Goal "1.1.2.2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN  asm_rewrite_tac[]);
(* *** Goal "1.1.2.2.2" *** *)
a(∂_tac¨z''ÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "1.2" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.3" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.4" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.5" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.6" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.7" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.8" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.9" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.10" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(asm_prove_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "2.1" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.2" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.3" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.4" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.5" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.6" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
=TEX
=SML
(* *** Goal "2.7" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.8" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "2.9" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.10" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.11" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.12" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "3" *** *)
a(asm_prove_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "3.1" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.2" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.3" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.4" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.5" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.6" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
=TEX
=SML
(* *** Goal "3.7" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.8" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3.9" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3.10" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3.11" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3.12" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "4" *** *)
a(asm_prove_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "4.1" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.2" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.3" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.4" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.5" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.6" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "4.7" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4.8" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
val €query_type› = save_pop_thm"query_type";
=TEX
=GFT HOL output
query_type = Ù µ q
  ∑ isInsert q ± ≥ (isDelete q ≤ isUpdate q ≤ isSelect q)
      ≤ isDelete q ± ≥ (isInsert q ≤ isUpdate q ≤ isSelect q)
      ≤ isUpdate q ± ≥ (isInsert q ≤ isDelete q ≤ isSelect q)
      ≤ isSelect q ± ≥ (isInsert q ≤ isDelete q ≤ isUpdate q)
=TEX

=SML
push_goal([],¨µu∑ (isItem u ± ≥(isClass u ≤ isData u))
	≤ (isClass u ± ≥(isItem u ≤ isData u))		
	≤ (isData u ± ≥(isItem u  ≤ isClass u))Æ);
a(rewrite_tac[get_spec¨isItemÆ,get_spec¨ItemUpdateÆ]);
a(prove_tac[] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1" *** *)
a(strip_asm_tac(µ_elim¨uÆsum_cases_thm));
(* *** Goal "1.1" *** *)
a(asm_fc_tac[]);
(* *** Goal "1.2" *** *)
a(strip_asm_tac(µ_elim¨zÆsum_cases_thm));
(* *** Goal "1.2.1" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.2.2" *** *)
a(∂_tac¨z'ÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "3" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
(* *** Goal "4" *** *)
a(fc_tac[thm1] THEN asm_fc_tac[]);
val €update_type› = save_pop_thm"update_type";
=TEX
=GFT HOL output
update_type = 
Ù µ u
  ∑ isItem u ± ≥ (isClass u ≤ isData u)
      ≤ isClass u ± ≥ (isItem u ≤ isData u)
      ≤ isData u ± ≥ (isItem u ≤ isClass u)
=TEX

=SML
push_goal([],¨µv∑ (isVal v ± ≥ isError v)
	≤ (isError v ± ≥ isVal v)Æ);
a(rewrite_tac[isVal_def,isError_def,giveVal_def]);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1" *** *)
a(fc_tac[sum_cases_thm]);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(∂_tac¨eâ1ÆTHEN asm_rewrite_tac[]);
val €val_or_error_type› = save_pop_thm"val_or_error_type";
=TEX
=GFT HOL output
val_or_error_type = 
Ù µ v∑ isVal v ± ≥ isError v ≤ isError v ± ≥ isVal v
=TEX


\section{PROOF OF SECURITY OF CRITICAL COMPONENTS}
\subsection{Proof of Conjunct 4}
=SML
push_goal([],¨µ c s e ∑ Fst(Snd(updateState (c,e,s))) = cÆ);
a(REPEAT µ_tac);
a(LEMMA_T¨e = (Fst e,Snd e)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],rewrite_tac[updateStateR_def,updateState_def]]);
a(EVERY[strip_asm_tac(µ_elim ¨Fst eÆ query_type),
	asm_rewrite_tac[],
	cases_tac¨≥ Snd e = []Æ,
	asm_rewrite_tac[],
	cases_tac¨tabExists c (tabFromEffect (Fst e)) (repState s)Æ,
	asm_rewrite_tac[],
	cases_tac¨c dominates TS_class (getTable (tabFromEffect (Fst e)) (repState s))Æ,
	asm_rewrite_tac[]]);
val €conjunct4› = save_pop_thm"conjunct4";
=TEX
=GFT HOL output
conjunct4 = Ù µ c s e∑ Fst (Snd (updateState (c, e, s))) = c
=TEX
\subsection{Conjunct 3}
\subsubsection{Auxiliary Lemmas}
Before we give a proof of conjunct 3, we provide a
series of auxiliary results.
=SML
push_goal([],¨µ c s ∑ isState(hideR(c, repState s))Æ);
a(REPEAT strip_tac);
a(strip_asm_tac (µ_elim¨sÆisState_lemma));
a(strip_asm_tac (list_µ_elim[¨cÆ,¨repState sÆ]hideR_lemma));
val €isState_lemma3› = save_pop_thm"isState_lemma3";
=TEX
=GFT HOL output
isState_lemma3 = Ù µ c s∑ isState (hideR (c, repState s))
=TEX
=SML
push_goal([],¨µ c sâ1 sâ2 ∑ 
	hide(c,sâ1) = hide(c,sâ2) 
	§ 
	hideR (c, repState sâ1) = hideR (c, repState sâ2)Æ);
a(rewrite_tac[hide_def,rewrite_rule[isState_lemma3]
	(list_µ_elim[¨hideR (c, repState sâ1)Æ,¨hideR (c, repState sâ2)Æ]isState_lemma2)]);
val €hide_eq_lemma› = save_pop_thm"hide_eq_lemma";
=TEX
=GFT HOL output
hide_eq_lemma = 
Ù µ c sâ1 sâ2
  ∑ hide (c, sâ1) = hide (c, sâ2)
      § hideR (c, repState sâ1) = hideR (c, repState sâ2) : THM
=TEX
=SML
push_goal([],¨µ c sâ1 sâ2
        ∑ hide (c, sâ1) = hide (c, sâ2) 
	¥ µ i ∑  tabExists c i (repState sâ1) § tabExists c i (repState sâ2)Æ);
a(rewrite_tac[tabExists_def,hideR_def,hide_eq_lemma,í_thm,
	r_ª_r_thm,rel_ext_clauses,graph_thm]);
a(REPEAT µ_tac);
a(strip_asm_tac (rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sâ1ÆisState_lemma)));
a(strip_asm_tac (rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sâ2ÆisState_lemma)));
a(DROP_NTH_ASM_T 4  ante_tac THEN DROP_NTH_ASM_T 2 ante_tac 
	THEN rewrite_tac[™_def,get_spec¨IdeLÆ,get_spec¨DirectorySÆ,°_def,∏_def,
	get_spec¨UniverseÆ,dom_def,í_thm,r_ª_r_thm,graph_thm,rel_ext_clauses,get_spec¨$Æ] 
	THEN strip_tac THEN strip_tac THEN strip_tac);
a(µ_tac THEN §_T strip_asm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(strip_asm_tac(list_µ_elim[¨repState sâ1Æ,¨Front iÆ,¨yÆ]at_thm1));
a(DROP_NTH_ASM_T 6 (asm_tac o list_µ_elim[¨Front iÆ,¨cleanDirectory c yÆ]));
a(LEMMA_T¨∂ z
             ∑ (c dominates Dir_exist z ± (Front i, z) ç repState sâ1)
                 ± cleanDirectory c y = cleanDirectory c zÆasm_tac);
(* *** Goal "1.1" *** *)
a(∂_tac¨yÆ THEN  asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(±_tac THEN_LIST[∂_tac¨zÆTHEN asm_rewrite_tac[],
	strip_asm_tac(list_µ_elim[¨repState sâ2Æ,¨Front iÆ,¨zÆ]at_thm1)]);
a(DROP_NTH_ASM_T 8 ante_tac THEN DROP_NTH_ASM_T 7 ante_tac 
	THEN asm_rewrite_tac[]);
a(REPEAT ¥_tac);
a(DROP_NTH_ASM_T 4 ante_tac THEN 
	asm_rewrite_tac[cleanDirectory_def,dir_components,get_spec¨MkDirectoryÆ] 
	THEN strip_tac);
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[] THEN strip_tac 
	THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 10 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a(DROP_NTH_ASM_T 12 (strip_asm_tac o list_µ_elim[¨Front iÆ,¨yÆ]));
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
a(rewrite_tac[rel_ext_clauses,graph_thm,r_ª_r_thm] 
	THEN ¥_T (asm_tac o list_µ_elim[¨Last iÆ,¨cleanTable c y'Æ]));
a(LEMMA_T¨∂ z∑ (Last i, z) ç Dir_tables y ± cleanTable c y' = cleanTable c zÆasm_tac);
=TEX
=SML
(* *** Goal "1.2.1" *** *)
a(∂_tac¨y'Æ THEN  asm_rewrite_tac[]);
(* *** Goal "1.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨z'ÆTHEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(strip_asm_tac(list_µ_elim[¨repState sâ2Æ,¨Front iÆ,¨yÆ]at_thm1));
a(DROP_NTH_ASM_T 6 (asm_tac o list_µ_elim[¨Front iÆ,¨cleanDirectory c yÆ]));
a(LEMMA_T¨∂ z
             ∑ (c dominates Dir_exist z ± (Front i, z) ç repState sâ2)
                 ± cleanDirectory c y = cleanDirectory c zÆasm_tac);
(* *** Goal "2.1" *** *)
a(∂_tac¨yÆ THEN  asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(±_tac THEN_LIST[∂_tac¨zÆTHEN asm_rewrite_tac[],
	strip_asm_tac(list_µ_elim[¨repState sâ1Æ,¨Front iÆ,¨zÆ]at_thm1)]);
a(DROP_NTH_ASM_T 8 ante_tac THEN DROP_NTH_ASM_T 7 ante_tac 
	THEN asm_rewrite_tac[]);
a(REPEAT ¥_tac);
a(DROP_NTH_ASM_T 4 ante_tac THEN 
	asm_rewrite_tac[cleanDirectory_def,dir_components,get_spec¨MkDirectoryÆ] 
	THEN strip_tac);
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[] THEN strip_tac 
	THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 10 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a(DROP_NTH_ASM_T 13 (strip_asm_tac o list_µ_elim[¨Front iÆ,¨yÆ]));
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
a(rewrite_tac[rel_ext_clauses,graph_thm,r_ª_r_thm] 
	THEN ¥_T (asm_tac o list_µ_elim[¨Last iÆ,¨cleanTable c y'Æ]));
a(LEMMA_T¨∂ z∑ (Last i, z) ç Dir_tables y ± cleanTable c y' = cleanTable c zÆasm_tac);
(* *** Goal "2.2.1" *** *)
a(∂_tac¨y'Æ THEN  asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨z'ÆTHEN asm_rewrite_tac[]);
val €tabExists_lemma› = save_pop_thm"tabExists_lemma";
=TEX
=GFT HOL output
tabExists_lemma = 
Ù µ c sâ1 sâ2
  ∑ hide (c, sâ1) = hide (c, sâ2)
      ¥ (µ i∑ tabExists c i (repState sâ1) § tabExists c i (repState sâ2))
=TEX

=SML
push_goal([],¨µ c tâ1 tâ2 sâ1 sâ2 i ∑ (c dominates TS_class tâ1 ± c dominates TS_class tâ2 
	± cleanTable c tâ1 = cleanTable c tâ2)
	¥ Snd (insertQuery (c, i, sâ1,tâ1)) = Snd (insertQuery (c, i, sâ2,tâ2))Æ);
=TEX
=SML
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN asm_rewrite_tac
	[cleanTable_def,get_spec¨MkTableSpecÆ,tab_components] THEN strip_tac);
a(lemma_tac¨colDefaults c tâ1 = colDefaults c tâ2Æ);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[ext_thm,colDefaults_def,visibleCols_def]);
(* *** Goal "2" *** *)
a(LEMMA_T¨i = (Fst i,Snd i)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],asm_rewrite_tac[insertQuery_def]]);
a(cases_tac¨≥ Elems
                           (Map
                               (MkRow c o colDefaults c tâ2)
                               (Snd i))
                         Ä RowSÆTHEN asm_rewrite_tac[]);
val €cleanTable_insertQuery_lemma› = save_pop_thm"cleanTable_insertQuery_lemma";
=TEX
=GFT HOL output
cleanTable_insertQuery_lemma =
Ù µ c tâ1 tâ2 sâ1 sâ2 i
  ∑ c dominates TS_class tâ1
        ± c dominates TS_class tâ2
        ± cleanTable c tâ1 = cleanTable c tâ2
      ¥ Snd (insertQuery (c, i, sâ1, tâ1))
        = Snd (insertQuery (c, i, sâ2, tâ2))
=TEX
=SML
push_goal([],¨µ c tâ1 tâ2 ∑ cleanTable c tâ1 = cleanTable c tâ2 ¥ 	
	((c dominates (TS_class tâ1) ± c dominates (TS_class tâ2))
	¥ updateRow c (TS_class tâ1) = updateRow c (TS_class tâ2))Æ);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 3 ante_tac);
a(asm_rewrite_tac[cleanTable_def,tab_components,get_spec¨MkTableSpecÆ]
	THEN strip_tac THEN asm_rewrite_tac[]);
val €updateRow_lemma› = save_pop_thm"updateRow_lemma";
=TEX
=GFT HOL output
updateRow_lemma = 
Ù µ c tâ1 tâ2
  ∑ cleanTable c tâ1 = cleanTable c tâ2
      ¥ c dominates TS_class tâ1 ± c dominates TS_class tâ2
      ¥ updateRow c (TS_class tâ1) = updateRow c (TS_class tâ2)
=TEX


=SML
push_goal([],¨µ c tc dâ1 dâ2 u ∑ 
	(isError(updateField c tc (u,dâ1)) ± replaceData c dâ1 = replaceData c dâ2)
	¥  updateField c tc (u,dâ1) = updateField c tc (u,dâ2)Æ);
a(REPEAT strip_tac);
a(POP_ASM_T (ante_tac o rewrite_rule[replaceData_def]));
a(cases_tac¨c dominates Dat_class dâ1Æ THEN 
	cases_tac¨c dominates Dat_class dâ2Æ THEN asm_rewrite_tac[]THEN strip_tac);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule[get_spec¨MkDataÆ,data_components]));
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "3" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule[get_spec¨MkDataÆ,data_components]));
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "4" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule[get_spec¨MkDataÆ,data_components]));
a(DROP_NTH_ASM_T 4 ante_tac THEN rewrite_tac[updateField_def]);
a(cases_tac¨c = tcÆTHEN asm_rewrite_tac[]);
a(cases_tac¨isItem uÆTHEN asm_rewrite_tac[]);
a(cases_tac¨isClass uÆTHEN asm_rewrite_tac[]);
a(cases_tac¨destClass u dominates Dat_class dâ2Æ
	THEN asm_rewrite_tac[≥isError_giveVal_thm]);
val €isError_updateField_lemma› = save_pop_thm"isError_updateField_lemma";
=TEX
=GFT HOL output
isError_updateField_lemma =
Ù µ c tc dâ1 dâ2 u
  ∑ isError (updateField c tc (u, dâ1))
        ± replaceData c dâ1 = replaceData c dâ2
      ¥ updateField c tc (u, dâ1) = updateField c tc (u, dâ2)
=TEX

=SML
push_goal([],¨µ c râ1 râ2 t u ∑
	(isError (updateRow c (TS_class t) (u, râ1)) ± 
	isError (updateRow c (TS_class t) (u, râ2))
	± cleanRow c (Snd (cleanColCons c t)) râ1
             = cleanRow c (Snd (cleanColCons c t)) râ2 ±
	Dom u Ä {n |∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n})
	¥ updateRow c (TS_class t) (u,râ1) = updateRow c (TS_class t) (u,râ2)Æ);
a(REPEAT strip_tac);
a(POP_ASM_T (strip_asm_tac o rewrite_rule[sets_ext_clauses,visibleCols_def,dom_def]));
a(DROP_NTH_ASM_T 2 (strip_asm_tac o rewrite_rule
	[cleanRow_def,get_spec¨MkRowÆ,row_components]));
a(DROP_NTH_ASM_T 5 ante_tac THEN DROP_NTH_ASM_T 4 ante_tac 
	THEN rewrite_tac[updateRow_def]);
=TEX
=SML
a(cases_tac¨≥ u ç FunctionalÆ THEN asm_rewrite_tac[]);
a(cases_tac¨((RelCombine u (R_data râ1)
                                     ª Graph (updateField c (TS_class t)))
                                   í {x|isError x})
                                 ª Graph destError = {}Æ
	THEN cases_tac¨((RelCombine u (R_data râ2)
                                     ª Graph (updateField c (TS_class t)))
                                   í {x|isError x})
                                 ª Graph destError = {}Æ
	THEN asm_rewrite_tac[≥isError_giveVal_thm,giveError_eq_thm]);
a(¥_T (fn _ => id_tac) THEN ¥_T (fn _ => id_tac) THEN 
	POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T (fn _ => id_tac));
=TEX
=SML
a(lemma_tac¨((RelCombine u (R_data râ1)
                           ª Graph (updateField c (TS_class t)))
                         í {x|isError x})
                       ª Graph destError
             = ((RelCombine u (R_data râ2)
                           ª Graph (updateField c (TS_class t)))
                         í {x|isError x})
                       ª Graph destErrorÆ);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[rel_ext_clauses,r_ª_r_thm,rel_combine_def,graph_thm,í_thm]);
a(REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(DROP_NTH_ASM_T 9 (asm_tac o µ_elim¨xÆ));
a(LEMMA_T¨∂y∑ (x, y) ç uÆasm_tac);
(* *** Goal "1.1.1" *** *)
a(∂_tac¨Fst z'Æ THEN asm_rewrite_tac[]);
(* *** Goal "1.1.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac 
	THEN ¥_T asm_tac);
a(DROP_NTH_ASM_T 8 (asm_tac o rewrite_rule[rel_ext_clauses,filterRow_def,
	r_ª_r_thm,graph_thm,Ú_thm]));
a(POP_ASM_T (asm_tac o list_µ_elim[¨xÆ,¨replaceData c (Snd z')Æ]));
=TEX
=SML
a(LEMMA_T¨∂z∑ ((∂ c'∑ c' ç Snd (cleanColCons c t) ± CS_posn c' = x)
                   ± (x, z) ç R_data râ1)
                 ± replaceData c (Snd z') = replaceData c zÆasm_tac); 
(* *** Goal "1.1.2.1" *** *)
a(∂_tac¨Snd z'ÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',z'')Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 10 ante_tac THEN asm_rewrite_tac[]);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],¥_tac]);
a(strip_asm_tac (list_µ_elim[¨cÆ,¨TS_class tÆ,¨Snd z'Æ,¨z''Æ,¨Fst z'Æ]
	isError_updateField_lemma));
a(asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "1.2" *** *)
a(DROP_NTH_ASM_T 9 (asm_tac o µ_elim¨xÆ));
a(LEMMA_T¨∂y∑ (x, y) ç uÆasm_tac);
(* *** Goal "1.2.1" *** *)
a(∂_tac¨Fst z'Æ THEN asm_rewrite_tac[]);
(* *** Goal "1.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac 
	THEN ¥_T asm_tac);
a(DROP_NTH_ASM_T 8 (asm_tac o rewrite_rule[rel_ext_clauses,filterRow_def,
	r_ª_r_thm,graph_thm,Ú_thm]));
a(POP_ASM_T (asm_tac o list_µ_elim[¨xÆ,¨replaceData c (Snd z')Æ]));
a(LEMMA_T¨∂z∑ ((∂ c'∑ c' ç Snd (cleanColCons c t) ± CS_posn c' = x)
                   ± (x, z) ç R_data râ2)
                 ± replaceData c (Snd z') = replaceData c zÆasm_tac); 
=TEX
=SML
(* *** Goal "1.2.2.1" *** *)
a(∂_tac¨Snd z'ÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.2.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',z'')Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 10 ante_tac THEN asm_rewrite_tac[]);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],¥_tac]);
a(strip_asm_tac (list_µ_elim[¨cÆ,¨TS_class tÆ,¨Snd z'Æ,¨z''Æ,¨Fst z'Æ]
	isError_updateField_lemma));
a(asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
val €isError_updateRow_lemma› = save_pop_thm"isError_updateRow_lemma";
=TEX
=GFT HOL output
isError_updateRow_lemma = 
Ù µ c tc dâ1 dâ2 u
  ∑ isError (updateField c tc (u, dâ1))
        ± replaceData c dâ1 = replaceData c dâ2
      ¥ updateField c tc (u, dâ1) = updateField c tc (u, dâ2)
=TEX
=SML
push_goal([],¨µ c râ1 râ2 t u ∑
	(isVal (updateRow c (TS_class t) (u, râ1)) 
	± cleanRow c (Snd (cleanColCons c t)) râ1
             = cleanRow c (Snd (cleanColCons c t)) râ2 ±
	Dom u Ä {n |∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n})
	¥ isVal (updateRow c (TS_class t) (u, râ2))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T (strip_asm_tac o rewrite_rule[sets_ext_clauses,visibleCols_def,dom_def]));
a(DROP_NTH_ASM_T 2 (strip_asm_tac o rewrite_rule
	[cleanRow_def,get_spec¨MkRowÆ,row_components]));
a(DROP_NTH_ASM_T 4 ante_tac THEN rewrite_tac[updateRow_def]);
=TEX
=SML
a(cases_tac¨≥ u ç FunctionalÆ
	THEN cases_tac¨((RelCombine u (R_data râ1)
                                     ª Graph (updateField c (TS_class t)))
                                   í {x|isError x})
                                 ª Graph destError = {}Æ
	THEN cases_tac¨((RelCombine u (R_data râ2)
                                     ª Graph (updateField c (TS_class t)))
                                   í {x|isError x})
                                 ª Graph destError = {}Æ
	THEN asm_rewrite_tac[≥isVal_giveError_thm,giveVal_def]);
=TEX
=SML
(* *** Goal "1" *** *)
a(¥_tac THEN prove_∂_tac);
(* *** Goal "2" *** *)
a(swap_nth_asm_concl_tac 1);
a(POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T ante_tac);
a(rewrite_tac[rel_ext_clauses,r_ª_r_thm,rel_combine_def,graph_thm,í_thm]);
a(REPEAT strip_tac);
a(swap_nth_asm_concl_tac 5);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 7 (asm_tac o rewrite_rule
	[rel_ext_clauses,filterRow_def,r_ª_r_thm,graph_thm,Ú_thm]));
a(POP_ASM_T(asm_tac o list_µ_elim[¨xÆ,¨replaceData c (Snd z')Æ]));
a(DROP_NTH_ASM_T 9 (asm_tac o µ_elim¨xÆ));
a(LEMMA_T¨∂z∑ ((∂ c'∑ c' ç Snd (cleanColCons c t) ± CS_posn c' = x)
                   ± (x, z) ç R_data râ2)
                 ± replaceData c (Snd z') = replaceData c zÆasm_tac); 
=TEX
=SML
(* *** Goal "2.1" *** *)
a(∂_tac¨Snd z'Æ THEN asm_rewrite_tac[]);
a(LEMMA_T¨∂y∑ (x, y) ç uÆasm_tac);
(* *** Goal "2.1.1" *** *)
a(∂_tac¨Fst z'Æ THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN 
	¥_T asm_tac);
=TEX
=SML
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨xÆ THEN REPEAT strip_tac);
a(∂_tac¨yÆ THEN rewrite_tac[]);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',z'')Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],¥_tac]);
a(strip_asm_tac (list_µ_elim[¨cÆ,¨TS_class tÆ,¨Snd z'Æ,¨z''Æ,¨Fst z'Æ]
	isError_updateField_lemma));
a(asm_rewrite_tac[]);
val €isVal_updateRow_lemma› = save_pop_thm"isVal_updateRow_lemma";
=TEX
=GFT HOL output
isVal_updateRow_lemma =
Ù µ c râ1 râ2 t u
  ∑ isVal (updateRow c (TS_class t) (u, râ1))
        ± cleanRow c (Snd (cleanColCons c t)) râ1
          = cleanRow c (Snd (cleanColCons c t)) râ2
        ± Dom u Ä {n|∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n}
      ¥ isVal (updateRow c (TS_class t) (u, râ2))
=TEX

=SML
push_goal([],¨µ c râ1 râ2 t u ∑
	(cleanRow c (Snd (cleanColCons c t)) râ1
             = cleanRow c (Snd (cleanColCons c t)) râ2 ±
	Dom u Ä {n |∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n})
	¥ 	(isError (updateRow c (TS_class t) (u, râ1)) 
		§ isError (updateRow c (TS_class t) (u, râ2)))Æ);
a(REPEAT µ_tac THEN ¥_tac);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(strip_asm_tac(µ_elim¨(updateRow c (TS_class t) (u, râ2))Æval_or_error_type));
a(DROP_NTH_ASM_T 5(asm_tac o eq_sym_rule));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨râ2Æ,¨râ1Æ,¨tÆ,¨uÆ]isVal_updateRow_lemma));
a(strip_asm_tac(µ_elim¨(updateRow c (TS_class t) (u, râ1))Æval_or_error_type));
(* *** Goal "2" *** *)
a(strip_asm_tac(µ_elim¨(updateRow c (TS_class t) (u, râ1))Æval_or_error_type));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨râ1Æ,¨râ2Æ,¨tÆ,¨uÆ]isVal_updateRow_lemma));
a(strip_asm_tac(µ_elim¨(updateRow c (TS_class t) (u, râ2))Æval_or_error_type));
val €isError_§_updateRow_lemma› = save_pop_thm"isError_§_updateRow_lemma";
=TEX
=GFT HOL output
Ù µ c râ1 râ2 t u
  ∑ cleanRow c (Snd (cleanColCons c t)) râ1
          = cleanRow c (Snd (cleanColCons c t)) râ2
        ± Dom u Ä {n|∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n}
      ¥ (isError (updateRow c (TS_class t) (u, râ1))
        § isError (updateRow c (TS_class t) (u, râ2)))
=TEX
=SML
push_goal([],¨µ  x y (u : Ó ™ (Ó ™ Update)) c t ∑ ((x, y) ç u ± Dom (ﬁ (Ran u))
             Ä {n|∂ c'∑ c' ç Snd (cleanColCons c t) ± CS_posn c' = n})
	¥ Dom y Ä {n|∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n}Æ);
a(rewrite_tac[sets_ext_clauses,dom_thm,ran_thm,ﬁ_def]THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(DROP_NTH_ASM_T 2 (asm_tac o µ_elim¨x'Æ));
a(LEMMA_T¨(∂ y s∑ (x', y) ç s ± (∂ x∑ (x, s) ç u))Æasm_tac);
(* *** Goal "1" *** *)
a(∂_tac¨y'Æ THEN ∂_tac¨yÆ THEN asm_rewrite_tac[]);
a(∂_tac¨xÆ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[visibleCols_def]);
val €dom_ﬁ_ran_lemma› = save_pop_thm"dom_ﬁ_ran_lemma";
=TEX
=GFT HOL output
dom_ﬁ_ran_lemma = 
Ù µ x y u c t
  ∑ (x, y) ç u
        ± Dom (ﬁ (Ran u))
          Ä {n|∂ c'∑ c' ç Snd (cleanColCons c t) ± CS_posn c' = n}
      ¥ Dom y Ä {n|∂ c'∑ c' ç visibleCols c t ± CS_posn c' = n}
=TEX
=SML
push_goal([],¨µ(l:Row LIST) (last:Row) (s : Row ) (u : Ó ™ (Ó ™ Update)) ∑ 
	Dom(Á~Í (Squash (Id (Dom (ListRel l í s))))
                             ª u) ° Dom{(# l + 1, last)}={}Æ); 
a(REPEAT µ_tac);
a(rewrite_tac[enumerate_def,r_ª_r_thm,inv_rel_def,dom_def,id_def,squash_def,
	list_rel_def,í_thm,Ú_thm,dot_dot_def]);
a(rewrite_tac[°_def,sets_ext_clauses] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
val €doms_null_lemma1› = save_pop_thm"doms_null_lemma1";
=TEX
=GFT HOL output
doms_null_lemma1 = 
Ù µ l last s u
  ∑ Dom (Á~Í (Squash (Id (Dom (ListRel l í s)))) ª u)
        ° Dom {(# l + 1, last)}
      = {}
=TEX

=SML
push_goal([],¨µ(l:Row LIST) (s : Row ) (u : Ó ™ (Ó ™ Update)) ∑ 
	Dom(Á~Í {(# (Squash (Id (Dom (ListRel l í s)))) + 1, # l + 1)}
		 ª u) ° Dom(ListRel l)={}Æ); 
a(REPEAT µ_tac);
a(rewrite_tac[dom_def,inv_rel_def,r_ª_r_thm]);
a(rewrite_tac[°_def,sets_ext_clauses] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac
	[list_rel_def,í_thm,Ú_thm,dot_dot_def]);
val €doms_null_lemma2› = save_pop_thm"doms_null_lemma2";
=TEX
=GFT HOL output
doms_null_lemma2 = 
Ù µ l s u
  ∑ Dom (Á~Í {(# (Squash (Id (Dom (ListRel l í s)))) + 1, # l + 1)} ª u)
        ° Dom (ListRel l)
      = {}
=TEX

=SML
push_goal([],¨µ(l:Row LIST) (last:Row)(s : Row ) (u : Ó ™ (Ó ™ Update)) ∑ 
	µ nâ1 nâ2 ∑ (nâ1 ç Dom (((RelCombine
                           (Á~Í (Squash
                                     (Id
                                         (Dom
                                             (ListRel l í s))))
                               ª u)
                           (ListRel l)
                         ª Graph (updateRow c (TS_class tâ2)))
                       í {x|isError x})
                     ª Graph destError)
	± nâ2 ç Dom (((RelCombine
                           (Á~Í {(#
                                             (Squash
                                                 (Id
                                                     (Dom
                                                         (ListRel l í s))))
                                           + 1, # l + 1)}
                               ª u)
                           {(# l + 1, last)}
                         ª Graph (updateRow c (TS_class tâ2)))
                       í {x|isError x})
                     ª Graph destError)) ¥ nâ2 > nâ1Æ);
=TEX
=SML
a(REPEAT µ_tac);
a(rewrite_tac[list_rel_def,dot_dot_def,Ú_thm,dom_def,inv_rel_def,r_ª_r_thm,
	rel_combine_def,r_ª_r_thm,í_thm]);
a(REPEAT strip_tac);
a(asm_rewrite_tac[less_def]);
val €squash_doms_lemma› = save_pop_thm"squash_doms_lemma";
=TEX
=GFT HOL output
squash_doms_lemma = 
Ù µ l last s u nâ1 nâ2
  ∑ nâ1
          ç Dom
            (((RelCombine
                      (Á~Í (Squash (Id (Dom (ListRel l í s)))) ª u)
                      (ListRel l)
                    ª Graph (updateRow c (TS_class tâ2)))
                  í {x|isError x})
                ª Graph destError)
        ± nâ2
          ç Dom
            (((RelCombine
                      (Á~Í {(# (Squash (Id (Dom (ListRel l í s)))) + 1,
                                  # l + 1)}
                          ª u)
                      {(# l + 1, last)}
                    ª Graph (updateRow c (TS_class tâ2)))
                  í {x|isError x})
                ª Graph destError)
      ¥ nâ2 > nâ1
=TEX
=SML
push_goal([],¨µ c tâ1 tâ2 ∑ 
	cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ1)
               = cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ2)
	¥ #(ListRel (TS_rows tâ1) í {r|c dominates R_exist r}) =
	#(ListRel (TS_rows tâ2) í {r|c dominates R_exist r})Æ);
a(REPEAT µ_tac);
a(lemma_tac¨∂ l ∑ TS_rows tâ1 = lÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(lemma_tac¨∂ l1 ∑ TS_rows tâ2 = l1ÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(intro_µ_tac(¨l1Æ,¨l':Row LISTÆ));
a(rewrite_tac[cleanRows_def]);
a(REV_LIST_INDUCTION_T¨lÆasm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[map_def,map_null_thm]);
a(µ_tac THEN ¥_T (asm_tac o rewrite_rule
	[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(asm_rewrite_tac[list_rel_null_thm,í_null_thm]);
(* *** Goal "2" *** *)
a(REPEAT µ_tac);
a(intro_µ_tac(¨lastÆ,¨lastÆ));
a(REV_LIST_INDUCTION_T¨l'Æasm_tac);
=TEX
=SML
(* *** Goal "2.1" *** *)
a(rewrite_tac[map_def,map_null_thm]);
a(µ_tac THEN cases_tac¨c dominates R_exist lastÆ THEN  asm_rewrite_tac[]);
a(¥_T (asm_tac o rewrite_rule[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(asm_rewrite_tac[list_rel_Î_singleton_thm,list_rel_null_thm,
	í_null_thm,¿_í_thm,í_singleton_thm]);
(* *** Goal "2.2" *** *)
a(REPEAT µ_tac);
a(cases_tac¨c dominates R_exist last'Æ	THEN asm_rewrite_tac[] THEN
	cases_tac¨c dominates R_exist lastÆ THEN asm_rewrite_tac[map_Î_thm]);
(* *** Goal "2.2.1" *** *)
a(¥_tac THEN DROP_NTH_ASM_T 6 (ante_tac o µ_elim¨l'Æ) THEN asm_rewrite_tac[]
	THEN ¥_tac);
a(asm_rewrite_tac[list_rel_Î_singleton_thm,¿_í_thm,í_singleton_thm]);
a(lemma_tac¨µ l last ∑ (ListRel l í {r|c dominates R_exist r}) ° {(# l + 1, last)} 
	= {}Æ);
=TEX
=SML
(* *** Goal "2.2.1.1" *** *)
a(REPEAT µ_tac THEN rewrite_tac
	[list_rel_def,í_thm,Ú_thm,dot_dot_def,°_def,rel_ext_clauses]);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.1.2" *** *)
a(TOP_ASM_T (asm_tac o list_µ_elim[¨l'Æ,¨lastÆ]));
a(asm_tac(list_µ_elim[¨l'Æ,¨{r|c dominates R_exist r}Æ]fin_list_rel_í_thm));
a(asm_tac(µ_elim¨(# l' + 1, last)Æfin_set_thm5));
a(ante_tac(list_µ_elim[¨ListRel l' í {r|c dominates R_exist r}Æ,
	¨{(# l' + 1, last)}Æ]size_thm7)THEN asm_rewrite_tac[size_thm1,size_singleton_thm]);
a(¥_T rewrite_thm_tac);
a(LIST_DROP_NTH_ASM_T [1,2,3] (fn _ => id_tac));
a(POP_ASM_T (asm_tac o list_µ_elim[¨lÆ,¨last'Æ]));
a(asm_tac(list_µ_elim[¨lÆ,¨{r|c dominates R_exist r}Æ]fin_list_rel_í_thm));
a(asm_tac(µ_elim¨(# l + 1, last')Æfin_set_thm5));
a(ante_tac(list_µ_elim[¨ListRel l í {r|c dominates R_exist r}Æ,
	¨{(# l + 1, last')}Æ]size_thm7)THEN asm_rewrite_tac[size_thm1,size_singleton_thm]);
=TEX
=SML
(* *** Goal "2.2.2" *** *)
a(DROP_NTH_ASM_T 3(ante_tac o µ_elim¨last'Æ)THEN asm_rewrite_tac[map_Î_thm]);
a(¥_T asm_tac THEN ¥_tac);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]THEN strip_tac);
a(asm_rewrite_tac[list_rel_Î_í_thm]);
=TEX
=SML
(* *** Goal "2.2.3" *** *)
a(DROP_NTH_ASM_T 4(ante_tac o µ_elim¨l' Î [last]Æ) THEN asm_rewrite_tac[map_Î_thm]);
a(¥_T asm_tac THEN ¥_tac);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]THEN strip_tac);
a(asm_rewrite_tac[list_rel_Î_í_thm]);
=TEX
=SML
(* *** Goal "2.2.4" *** *)
a(asm_rewrite_tac[list_rel_Î_í_thm]);
val €cleanRows_size_lemma› = save_pop_thm"cleanRows_size_lemma";
=TEX
=GFT HOL output
cleanRows_size_lemma = 
Ù µ c tâ1 tâ2
  ∑ cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ1)
        = cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ2)
      ¥ # (ListRel (TS_rows tâ1) í {r|c dominates R_exist r})
        = # (ListRel (TS_rows tâ2) í {r|c dominates R_exist r})
=TEX
=SML
push_goal([],¨µ c tâ1 tâ2 u ∑ 
	(Dom (ﬁ (Ran u)) Ä {n|∂ c'∑ c' ç visibleCols c tâ2 ± CS_posn c' = n} ±
	cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ1)
               = cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ2))
	¥ (((RelCombine (Á~Í (revealRow c tâ1) ª u)
                             (ListRel (TS_rows tâ1))
                           ª Graph (updateRow c (TS_class tâ2)))
                         í {x|isError x})
                       ª Graph destError
             = {} § ((RelCombine (Á~Í (revealRow c tâ2) ª u)
                             (ListRel (TS_rows tâ2))
                           ª Graph (updateRow c (TS_class tâ2)))
                         í {x|isError x})
                       ª Graph destError = {})Æ);
=TEX
=SML
a(REPEAT µ_tac THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨tâ1Æ,¨tâ2Æ]cleanRows_size_lemma));
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac);
a(rewrite_tac[revealRow_def]);
a(lemma_tac¨∂ l ∑ TS_rows tâ1 = lÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(lemma_tac¨∂ l1 ∑ TS_rows tâ2 = l1ÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(intro_µ_tac(¨l1Æ,¨l':Row LISTÆ));
a(rewrite_tac[cleanRows_def]);
a(REV_LIST_INDUCTION_T¨lÆasm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[map_def,map_null_thm]);
a µ_tac;
a(REV_LIST_INDUCTION_T¨l'Æasm_tac THEN rewrite_tac
	[list_rel_null_thm,rel_combine_null_thm1]);
a(µ_tac THEN cases_tac¨c dominates R_exist lastÆTHEN asm_rewrite_tac[]);
a(¥_T (asm_tac o rewrite_rule[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(rewrite_tac[list_rel_null_thm,rel_combine_null_thm1,ª_graph_null_thm,
	ª_null_thm,squash_Î_thm]
	THEN asm_rewrite_tac[id_dom_null_thm,squash_null_thm,inv_rel_ª_null_thm,
	rel_combine_null_thm,ª_graph_null_thm]);
=TEX
=SML
(* *** Goal "2" *** *)
a(REPEAT µ_tac);
a(intro_µ_tac(¨lastÆ,¨lastÆ));
a(REV_LIST_INDUCTION_T¨l'Æasm_tac);
(* *** Goal "2.1" *** *)
a(µ_tac THEN cases_tac¨c dominates R_exist lastÆ
	THEN asm_rewrite_tac[map_def,map_null_thm]);
a(¥_T (asm_tac o rewrite_rule[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(asm_rewrite_tac[squash_Î_thm,list_rel_null_thm,rel_combine_null_thm1,
	ª_graph_null_thm,í_null_thm]);
a(rewrite_tac[id_dom_null_thm,squash_null_thm,inv_rel_ª_null_thm,
	rel_combine_null_thm,ª_graph_null_thm,í_null_thm]);
(* *** Goal "2.2" *** *)
a(REPEAT µ_tac);
a(cases_tac¨c dominates R_exist last'Æ	THEN asm_rewrite_tac[] THEN
	cases_tac¨c dominates R_exist lastÆ THEN asm_rewrite_tac[map_Î_thm]);
=TEX
=SML
(* *** Goal "2.2.1" *** *)
a(REPEAT ¥_tac);
a(DROP_NTH_ASM_T 7(ante_tac o µ_elim¨l'Æ)THEN asm_rewrite_tac[]
	THEN ¥_T asm_tac);
a(DROP_NTH_ASM_T 7 (fn _ => id_tac));
a(DROP_NTH_ASM_T 4 (fn _ => id_tac));
a(asm_rewrite_tac[squash_Î_thm,inv_rel_¿_thm,rel_combine_¿_thm1,ª_¿_thm]);
a(asm_rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[size_list_rel_Î_í_thm]);
a(¥_tac THEN DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[] 
	THEN ¥_T asm_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨lastÆ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨lÆ,¨last'Æ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma2));
a(strip_asm_tac(list_µ_elim[¨lÆ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma2));
a(strip_asm_tac(list_µ_elim[¨(Á~Í {(#
                                   (Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r
                                                   |c dominates R_exist r}))))
                                 + 1, # l + 1)}
                     ª u)Æ,¨ListRel lÆ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨(Á~Í {(#
                                   (Squash
                                       (Id
                                           (Dom
                                               (ListRel l'
                                                   í {r
                                                   |c dominates R_exist r}))))
                                 + 1, # l' + 1)}
                     ª u)Æ,¨ListRel l'Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
a(LIST_DROP_NTH_ASM_T [1,2,3,4] (fn _ => id_tac));
a(asm_rewrite_tac[ª_¿_thm,¿_í_thm,¿_null_thm]);
=TEX
=SML
a(LEMMA_T¨(((RelCombine
                         (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l + 1)}
                             ª u)
                         {(# l + 1, last')}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {} § (((RelCombine
                         (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l'
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l' + 1)}
                             ª u)
                         {(# l' + 1, last)}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {}Ærewrite_thm_tac);
=TEX
=SML
a(POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[rel_ext_clauses,rel_combine_def,r_ª_r_thm,inv_rel_def,í_thm,graph_thm]);
a(REPEAT strip_tac);
(* *** Goal "2.2.1.1" *** *)
a(swap_nth_asm_concl_tac 7);
a(REPEAT strip_tac);
a(∂_tac¨# l + 1Æ THEN rewrite_tac[]);
a(REPEAT strip_tac);
a(∂_tac¨yÆ THEN rewrite_tac[]);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last')Æ THEN rewrite_tac[]);
a(DROP_NTH_ASM_T 2 ante_tac);
=TEX
=SML
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(DROP_NTH_ASM_T 12 (asm_tac o rewrite_rule[visibleCols_def]));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2" *** *)
a(swap_nth_asm_concl_tac 7);
a(REPEAT strip_tac);
a(∂_tac¨# l' + 1Æ THEN rewrite_tac[]);
a(REPEAT strip_tac);
a(∂_tac¨yÆ THEN rewrite_tac[]);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last)Æ THEN rewrite_tac[]);
a(DROP_NTH_ASM_T 2 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(DROP_NTH_ASM_T 12 (asm_tac o rewrite_rule[visibleCols_def]));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
=TEX
=SML
(* *** Goal "2.2.2" *** *)
a(DROP_NTH_ASM_T 3(ante_tac o µ_elim¨last'Æ)THEN 
	asm_rewrite_tac[map_Î_thm,size_list_rel_Î_í_thm]);
a(¥_T asm_tac THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
a(¥_T rewrite_thm_tac);
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨lastÆ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.2.3" *** *)
a(DROP_NTH_ASM_T 4(ante_tac o µ_elim¨l' Î [last]Æ) THEN 
	asm_rewrite_tac[map_Î_thm,size_list_rel_Î_í_thm]);
a(¥_T asm_tac THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
a(¥_T (rewrite_thm_tac o eq_sym_rule));
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨last'Æ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.2.4" *** *)
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨lastÆ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨last'Æ,¨{r|c dominates R_exist r}Æ,¨uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(asm_rewrite_tac[]);
val €cleanRows_errors_or_vals_lemma› = save_pop_thm"cleanRows_errors_or_vals_lemma";
=TEX
=GFT HOL output
cleanRows_errors_or_vals_lemma = 
Ù µ c tâ1 tâ2 u
  ∑ Dom (ﬁ (Ran u)) Ä {n|∂ c'∑ c' ç visibleCols c tâ2 ± CS_posn c' = n}
        ± cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ1)
          = cleanRows c (Snd (cleanColCons c tâ2)) (TS_rows tâ2)
      ¥ (((RelCombine (Á~Í (revealRow c tâ1) ª u) (ListRel (TS_rows tâ1))
                ª Graph (updateRow c (TS_class tâ2)))
              í {x|isError x})
            ª Graph destError
          = {}
        § ((RelCombine (Á~Í (revealRow c tâ2) ª u) (ListRel (TS_rows tâ2))
                ª Graph (updateRow c (TS_class tâ2)))
              í {x|isError x})
            ª Graph destError
          = {})
=TEX
=SML
push_goal([],¨µc t∑ Graph (updateRow c (TS_class t)) ç FunctionalÆ);
a(rewrite_tac[updateRow_def,functional_def,graph_thm]THEN REPEAT strip_tac);
a(asm_rewrite_tac[]);
val €fun_updateRow_thm› = save_pop_thm"fun_updateRow_thm";
=TEX
=GFT HOL output
fun_updateRow_thm = 
Ù µ c t∑ Graph (updateRow c (TS_class t)) ç Functional
=TEX
=SML
push_goal([],¨Graph destError ç FunctionalÆ);
a(rewrite_tac[get_spec¨destErrorÆ,functional_def,graph_thm]THEN REPEAT strip_tac);
a(asm_rewrite_tac[]);
val €fun_destError_thm› = save_pop_thm"fun_destError_thm";
=TEX
=GFT HOL output
fun_destError_thm = Ù Graph destError ç Functional
=TEX
=SML
push_goal([],¨µ l r c t u ∑ u ç Functional ¥
	(((RelCombine (Á~Í (Squash
                                   (Id
                                       (Dom
                                           (ListRel l
                                               í {r|c dominates R_exist r}))))
                             ª u)
                         (ListRel l)
                       ª Graph (updateRow c (TS_class t)))
                     í {x|isError x})
                   ª Graph destError) ç FiniteÆ);
=TEX
=SML
a(REPEAT strip_tac);
a(bc_tac[fin_ª_thm]THEN_TRY rewrite_tac[fun_destError_thm]);
a(bc_tac[fin_í_thm]);
a(bc_tac[fin_ª_thm]THEN_TRY rewrite_tac[fun_updateRow_thm]);
a(bc_tac[fin_rel_combine_thm]THEN_TRY rewrite_tac[fin_list_rel_thm]);
a(bc_tac[fin_ª_thm]THEN_TRY asm_rewrite_tac[]);
a(bc_tac[fin_inv_rel_thm]);
a(bc_tac[squash_id_fin_thm]);
a(rewrite_tac[fin_list_rel_í_thm]);
val €fin_lemma1› = save_pop_thm"fin_lemma1";
=TEX
=GFT HOL output
fin_lemma1 = 
Ù µ l r c t u
  ∑ u ç Functional
      ¥ ((RelCombine
                (Á~Í
                      (Squash
                          (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                    ª u)
                (ListRel l)
              ª Graph (updateRow c (TS_class t)))
            í {x|isError x})
          ª Graph destError
        ç Finite
=TEX
=SML
push_goal([],¨µ l last r c t u ∑ u ç Functional ¥
	(((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l + 1)}
                             ª u)
                         {(# l + 1, last)}
                       ª Graph (updateRow c (TS_class t)))
                     í {x|isError x})
                   ª Graph destError) ç FiniteÆ);
=TEX
=SML
a(REPEAT strip_tac);
a(bc_tac[fin_ª_thm]THEN_TRY rewrite_tac[fun_destError_thm]);
a(bc_tac[fin_í_thm]);
a(bc_tac[fin_ª_thm]THEN_TRY rewrite_tac[fun_updateRow_thm]);
a(bc_tac[fin_rel_combine_thm]THEN_TRY rewrite_tac[fin_set_thm5]);
a(bc_tac[fin_ª_thm]THEN_TRY asm_rewrite_tac[]);
a(rewrite_tac[inv_rel_singleton_thm,fin_set_thm5]);
val €fin_lemma2› = save_pop_thm"fin_lemma2";
=TEX
=GFT HOL output
fin_lemma2 =
Ù µ l last r c t u
  ∑ u ç Functional
      ¥ ((RelCombine
                (Á~Í
                      {(#
                                  (Squash
                                      (Id
                                          (Dom
                                              (ListRel l
                                                  í {r
                                                  |c dominates R_exist r}))))
                                + 1, # l + 1)}
                    ª u)
                {(# l + 1, last)}
              ª Graph (updateRow c (TS_class t)))
            í {x|isError x})
          ª Graph destError
        ç Finite
=TEX
=SML
push_goal([],¨µ c tâ1 tâ2 sâ1 sâ2 u ∑ (c dominates TS_class tâ1 ± c dominates TS_class tâ2 
	± cleanTable c tâ1 = cleanTable c tâ2)
	¥ Snd (updateQuery (c, u, sâ1,tâ1)) = Snd (updateQuery (c, u, sâ2,tâ2))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN asm_rewrite_tac
	[cleanTable_def,get_spec¨MkTableSpecÆ,tab_components] THEN strip_tac);
a(POP_ASM_T ante_tac);
a(lemma_tac¨cleanColCons c tâ1 = cleanColCons c tâ2Æ 
	THEN_LIST[pure_once_asm_rewrite_tac[prove_rule[pair_clauses]
	¨µ p  ∑ p = (Fst p, Snd p)Æ]THEN asm_rewrite_tac[],
	DROP_NTH_ASM_T 3(fn _ => id_tac) 
	THEN  DROP_NTH_ASM_T 2(fn _ => id_tac)]);
a(TOP_ASM_T rewrite_thm_tac THEN ¥_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨cÆ,¨tâ1Æ,¨tâ2Æ]cleanRows_size_lemma));
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac);
a(LEMMA_T¨u = (Fst u,Snd u)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],rewrite_tac[updateQuery_def]]);
a(conv_tac(ONCE_MAP_C let_conv)THEN asm_rewrite_tac[visibleCols_def]);
a(cases_tac¨Snd u ç FunctionalÆ THEN
	cases_tac¨Dom (ﬁ (Ran (Snd u))) Ä 
	{n |∂ c' ∑ c' ç Snd (cleanColCons c tâ2) ± CS_posn c' = n}Æ
	THEN asm_rewrite_tac[]);
a(conv_tac(MAP_C let_conv));
a ¥_tac;
a(strip_asm_tac (rewrite_rule[visibleCols_def]
	(list_µ_elim[¨cÆ,¨tâ1Æ,¨tâ2Æ,¨Snd uÆ]cleanRows_errors_or_vals_lemma)) 
	THEN asm_rewrite_tac[]);
a(POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T (fn _ => id_tac) THEN ¥_tac);
=TEX
=SML
a(LEMMA_T¨Squash
                       (((RelCombine (Á~Í (revealRow c tâ1) ª Snd u)
                                 (ListRel (TS_rows tâ1))
                               ª Graph (updateRow c (TS_class tâ2)))
                             í {x|isError x})
                           ª Graph destError) = Squash
                       (((RelCombine (Á~Í (revealRow c tâ2) ª Snd u)
                                 (ListRel (TS_rows tâ2))
                               ª Graph (updateRow c (TS_class tâ2)))
                             í {x|isError x})
                           ª Graph destError)Ærewrite_thm_tac);
=TEX
=SML
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac 
	THEN rewrite_tac[cleanRows_def,revealRow_def]);
a(lemma_tac¨∂ l ∑ TS_rows tâ1 = lÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(lemma_tac¨∂ l1 ∑ TS_rows tâ2 = l1ÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(intro_µ_tac(¨l1Æ,¨l':Row LISTÆ));
a(REV_LIST_INDUCTION_T¨lÆasm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[map_def,map_null_thm,list_rel_null_thm,rel_combine_null_thm1,ª_graph_null_thm,
	ª_null_thm,í_null_thm,squash_null_thm]);
a µ_tac;
a(REV_LIST_INDUCTION_T¨l'Æasm_tac);
(* *** Goal "1.1" *** *)
a(rewrite_tac[list_rel_null_thm,rel_combine_null_thm1,ª_graph_null_thm,
	í_null_thm,id_dom_null_thm,squash_null_thm]);
(* *** Goal "1.2" *** *)
a(µ_tac THEN cases_tac¨c dominates R_exist lastÆTHEN asm_rewrite_tac[]);
a(¥_T (asm_tac o rewrite_rule[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(asm_rewrite_tac[list_rel_null_thm,rel_combine_null_thm,ª_graph_null_thm,í_null_thm,
	id_dom_null_thm,squash_null_thm,list_rel_Î_í_thm,inv_rel_ª_null_thm]);
=TEX
=SML
(* *** Goal "2" *** *)
a(REPEAT µ_tac);
a(intro_µ_tac(¨lastÆ,¨lastÆ));
a(REV_LIST_INDUCTION_T¨l'Æasm_tac);
(* *** Goal "2.1" *** *)
a(µ_tac THEN cases_tac¨c dominates R_exist lastÆ
	THEN asm_rewrite_tac[map_def,map_null_thm]);
a(¥_T (asm_tac o rewrite_rule[all_µ_intro(eq_sym_rule(all_µ_elim list_rel_list_thm))]));
a(asm_rewrite_tac[list_rel_null_thm,rel_combine_null_thm,ª_graph_null_thm,í_null_thm,
	id_dom_null_thm,squash_null_thm,list_rel_Î_í_thm,inv_rel_ª_null_thm]);
(* *** Goal "2.2" *** *)
a(REPEAT µ_tac);
a(cases_tac¨c dominates R_exist last'Æ	THEN asm_rewrite_tac[] THEN
	cases_tac¨c dominates R_exist lastÆ THEN asm_rewrite_tac[map_Î_thm]);
=TEX
=SML
(* *** Goal "2.2.1" *** *)
a(REPEAT ¥_tac);
a(DROP_NTH_ASM_T 7(ante_tac o µ_elim¨l'Æ)THEN asm_rewrite_tac[]
	THEN ¥_T asm_tac);
a(DROP_NTH_ASM_T 7 (fn _ => id_tac));
a(DROP_NTH_ASM_T 4 (fn _ => id_tac));
a(asm_rewrite_tac[squash_Î_thm,inv_rel_¿_thm,rel_combine_¿_thm1,ª_¿_thm]);
a(asm_rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[size_list_rel_Î_í_thm]);
a(¥_tac THEN DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[] 
	THEN ¥_T asm_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨lÆ,¨last'Æ,¨{r|c dominates R_exist r}Æ,¨Snd uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac THEN POP_ASM_T (fn _ => id_tac));
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨lastÆ,¨{r|c dominates R_exist r}Æ,¨Snd uÆ]doms_null_lemma1));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
=TEX
=SML
a(POP_ASM_T rewrite_thm_tac THEN POP_ASM_T (fn _ => id_tac));
a(strip_asm_tac(list_µ_elim[¨lÆ,¨{r|c dominates R_exist r}Æ,¨Snd uÆ]doms_null_lemma2));
a(strip_asm_tac(list_µ_elim[¨(Á~Í {(#
                                   (Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r
                                                   |c dominates R_exist r}))))
                                 + 1, # l + 1)}
                     ª Snd u)Æ,¨ListRel lÆ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac THEN POP_ASM_T (fn _ => id_tac));
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨l'Æ,¨{r|c dominates R_exist r}Æ,¨Snd uÆ]doms_null_lemma2));
a(strip_asm_tac(list_µ_elim[¨(Á~Í {(#
                                   (Squash
                                       (Id
                                           (Dom
                                               (ListRel l'
                                                   í {r
                                                   |c dominates R_exist r}))))
                                 + 1, # l' + 1)}
                     ª Snd u)Æ,¨ListRel l'Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac THEN POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[ª_¿_thm,¿_í_thm]);
=TEX
=SML
a(lemma_tac¨Ran(((RelCombine (Á~Í {(#
                                                 (Squash
                                                     (Id
                                                         (Dom
                                                             (ListRel l
           í {r|c dominates R_exist r}))))
                                               + 1, # l + 1)}
                                   ª Snd u)
                               {(# l + 1, last')}
                             ª Graph (updateRow c (TS_class tâ2)))
                           í {x|isError x})
                         ª Graph destError) = Ran(((RelCombine
                             (Á~Í {(#
                                               (Squash
                                                   (Id
                                                       (Dom
                                                           (ListRel l'
           í {r|c dominates R_exist r}))))
                                             + 1, # l' + 1)}
                                 ª Snd u)
                             {(# l' + 1, last)}
                           ª Graph (updateRow c (TS_class tâ2)))
                         í {x|isError x})
                       ª Graph destError)Æ);
=TEX
=SML
(* *** Goal "2.2.1.1" *** *)
a(POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[ran_def,rel_combine_def,r_ª_r_thm,inv_rel_def,í_thm,rel_ext_clauses,graph_thm]);
a(rewrite_tac[sets_ext_clauses]);
a(REPEAT µ_tac THEN §_T strip_asm_tac);
(* *** Goal "2.2.1.1.1" *** *)
a(∂_tac¨# l' + 1Æ THEN rewrite_tac[]);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last)Æ THEN rewrite_tac[]);
a(DROP_NTH_ASM_T 2 ante_tac);
=TEX
=SML
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
=TEX
=SML
(* *** Goal "2.2.1.1.2" *** *)
a(∂_tac¨# l + 1Æ THEN rewrite_tac[]);
a(∂_tac¨zÆ THEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last')Æ THEN rewrite_tac[]);
a(DROP_NTH_ASM_T 2 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2" *** *)
a(lemma_tac¨(Dom (((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l + 1)}
                             ª Snd u)
                         {(# l + 1, last')}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {# l + 1}
	± Dom(((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l'
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l' + 1)}
                             ª Snd u)
                         {(# l' + 1, last)}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {# l' + 1}) ≤ 
=TEX
=SML
	(Dom (((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l + 1)}
                             ª Snd u)
                         {(# l + 1, last')}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {}
	± Dom(((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l'
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l' + 1)}
                             ª Snd u)
                         {(# l' + 1, last)}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError) = {})Æ);
=TEX
=SML
(* *** Goal "2.2.1.2.1" *** *)
a(POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[rel_combine_def,inv_rel_def,sets_ext_clauses,r_ª_r_thm,
	í_thm,dom_thm,graph_thm]THEN REPEAT strip_tac);
(* *** Goal "2.2.1.2.1.1" *** *)
a(swap_nth_asm_concl_tac 7 THEN REPEAT strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last')ÆTHEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(DROP_NTH_ASM_T 4 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2.1.2" *** *)
a(swap_nth_asm_concl_tac 7 THEN REPEAT strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last')ÆTHEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(DROP_NTH_ASM_T 4 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2.1.3" *** *)
a(swap_nth_asm_concl_tac 7 THEN REPEAT strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last)ÆTHEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(DROP_NTH_ASM_T 4 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2.1.4" *** *)
a(swap_nth_asm_concl_tac 7 THEN REPEAT strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(Fst z',last)ÆTHEN asm_rewrite_tac[]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨l'Æ,¨{r|c dominates R_exist r}Æ]size_squash_id_dom_thm));
a(strip_asm_tac(list_µ_elim[¨z''Æ,¨Fst z'Æ,¨Snd uÆ,¨cÆ,¨tâ2Æ]dom_ﬁ_ran_lemma));
a(DROP_NTH_ASM_T 4 ante_tac);
a(LEMMA_T¨z' = (Fst z',Snd z')Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],pure_asm_rewrite_tac[] THEN ¥_tac]);
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_§_updateRow_lemma));
a(strip_asm_tac(list_µ_elim[¨cÆ,¨last'Æ,¨lastÆ,¨tâ2Æ,¨Fst z'Æ]isError_updateRow_lemma));
a(∂_tac¨z''Æ THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.1.2.2" *** *)
a(strip_asm_tac(list_µ_elim[¨(((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l + 1)}
                             ª Snd u)
                         {(# l + 1, last')}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError)Æ,¨(((RelCombine (Á~Í {(#
                                           (Squash
                                               (Id
                                                   (Dom
                                                       (ListRel l'
                                                           í {r
                                                           |c
           dominates R_exist r}))))
                                         + 1, # l' + 1)}
                             ª Snd u)
                         {(# l' + 1, last)}
                       ª Graph (updateRow c (TS_class tâ2)))
                     í {x|isError x})
                   ª Graph destError)Æ,¨# l + 1Æ,¨# l' + 1Æ]squash_single_thm));
=TEX
=SML
a(fc_tac[fin_lemma1] THEN fc_tac[fin_lemma2]THEN  bc_tac[squash_¿_thm]
	THEN asm_rewrite_tac[squash_doms_lemma]);
(* *** Goal "2.2.1.2.3" *** *)
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac THEN rewrite_tac[dom_null_thm] 
	THEN REPEAT ¥_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2.2" *** *)
a(DROP_NTH_ASM_T 3(ante_tac o µ_elim¨last'Æ)THEN 
	asm_rewrite_tac[map_Î_thm,size_list_rel_Î_í_thm]);
a(¥_T asm_tac THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
a(¥_T rewrite_thm_tac);
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(lemma_tac¨Dom(Á~Í (Squash (Id (Dom
                                           (ListRel l'
                                               í {r|c dominates R_exist r}))))
                             ª Snd u) ° Dom{(# l' + 1, last)}={}Æ);
(* *** Goal "2.2.2.1" *** *)
a(rewrite_tac[enumerate_def,r_ª_r_thm,inv_rel_def,dom_def,id_def,squash_def,
	list_rel_def,í_thm,Ú_thm,dot_dot_def]);
a(rewrite_tac[°_def,sets_ext_clauses] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.2.2" *** *)
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.2.3" *** *)
a(DROP_NTH_ASM_T 4(ante_tac o µ_elim¨l' Î [last]Æ) THEN 
	asm_rewrite_tac[map_Î_thm,size_list_rel_Î_í_thm]);
a(¥_T asm_tac THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
a(¥_T (rewrite_thm_tac o eq_sym_rule));
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(lemma_tac¨Dom(Á~Í (Squash (Id (Dom (ListRel l
                                               í {r|c dominates R_exist r}))))
                             ª Snd u) ° Dom{(# l + 1, last')}={}Æ);
(* *** Goal "2.2.3.1" *** *)
a(rewrite_tac[enumerate_def,r_ª_r_thm,inv_rel_def,dom_def,id_def,squash_def,
	list_rel_def,í_thm,Ú_thm,dot_dot_def]);
a(rewrite_tac[°_def,sets_ext_clauses] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.3.2" *** *)
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.2.4" *** *)
a(asm_rewrite_tac[list_rel_Î_í_thm]
	THEN rewrite_tac[list_rel_Î_singleton_thm,rel_combine_¿_thm]);
a(lemma_tac¨µl (last:Row) ∑ Dom(Á~Í (Squash (Id (Dom (ListRel l
                                               í {r|c dominates R_exist r}))))
                             ª Snd u) ° Dom{(# l + 1, last)}={}Æ);
(* *** Goal "2.2.4.1" *** *)
a(REPEAT µ_tac);
a(rewrite_tac[enumerate_def,r_ª_r_thm,inv_rel_def,dom_def,id_def,squash_def,
	list_rel_def,í_thm,Ú_thm,dot_dot_def]);
a(rewrite_tac[°_def,sets_ext_clauses] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.4.2" *** *)
a(TOP_ASM_T(strip_asm_tac o list_µ_elim[¨l'Æ,¨lastÆ]));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l' í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l' + 1, last)}Æ]rel_combine_null_thm2));
a(POP_ASM_T rewrite_thm_tac);
a(POP_ASM_T (fn _ => id_tac) 
	THEN POP_ASM_T(strip_asm_tac o list_µ_elim[¨lÆ,¨last'Æ]));
a(strip_asm_tac(list_µ_elim[¨(Á~Í (Squash
                           (Id (Dom (ListRel l í {r|c dominates R_exist r}))))
                     ª Snd u)Æ,¨{(# l + 1, last')}Æ]rel_combine_null_thm2));
a(asm_rewrite_tac[]);
val €cleanTable_updateQuery_lemma› = save_pop_thm"cleanTable_updateQuery_lemma";
=TEX
=GFT HOL output
cleanTable_updateQuery_lemma = 
Ù µ c tâ1 tâ2 sâ1 sâ2 u
  ∑ c dominates TS_class tâ1
        ± c dominates TS_class tâ2
        ± cleanTable c tâ1 = cleanTable c tâ2
      ¥ Snd (updateQuery (c, u, sâ1, tâ1))
        = Snd (updateQuery (c, u, sâ2, tâ2))
=TEX
=SML
push_goal([],¨µ c sâ1 sâ2 ∑ hide (c, sâ1) = hide (c, sâ2) ¥ 	
(µ i ∑  tabExists c i (repState sâ1) 
	¥ 	((cleanTable c (getTable i (repState sâ1))
				=
				cleanTable c (getTable i (repState sâ2)))
		±
		(c dominates TS_class (getTable i (repState sâ1))
		§
		c dominates TS_class (getTable i (repState sâ2)))))Æ);
=TEX
=SML
a(REPEAT µ_tac THEN ¥_tac THEN µ_tac THEN ¥_tac);
a(strip_asm_tac(list_µ_elim[¨cÆ,¨sâ1Æ,¨sâ2Æ]tabExists_lemma));
a(POP_ASM_T (strip_asm_tac o µ_elim¨iÆ));
a(DROP_ASMS_T (MAP_EVERY ante_tac) THEN rewrite_tac[dom_def,tabExists_def,
	hideR_def,hide_eq_lemma,í_thm,r_ª_r_thm,rel_ext_clauses,graph_thm]
	THEN REPEAT ¥_tac);
a(rewrite_tac[getTable_def]);
a(strip_asm_tac (rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sâ1ÆisState_lemma)));
a(strip_asm_tac (rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sâ2ÆisState_lemma)));
=TEX
=SML
a(DROP_NTH_ASM_T 4  ante_tac THEN DROP_NTH_ASM_T 2 ante_tac THEN 
	rewrite_tac[™_def,get_spec¨IdeLÆ,get_spec¨DirectorySÆ,°_def,∏_def,
	get_spec¨UniverseÆ,dom_def,í_thm,r_ª_r_thm,graph_thm,rel_ext_clauses,
	get_spec¨$Æ] 
	THEN strip_tac THEN strip_tac);
a(strip_asm_tac(list_µ_elim[¨repState sâ1Æ,¨Front iÆ,¨yÆ]at_thm1));
a(strip_asm_tac(list_µ_elim[¨repState sâ2Æ,¨Front iÆ,¨y''Æ]at_thm1));
a(LIST_DROP_NTH_ASM_T [7,8,9,11,12,13](MAP_EVERY ante_tac)
	THEN  asm_rewrite_tac[] THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 10 (strip_asm_tac o list_µ_elim[¨Front iÆ,¨y''Æ]));
a(DROP_NTH_ASM_T 10 (strip_asm_tac o list_µ_elim[¨Front iÆ,¨yÆ]));
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac THEN rewrite_tac[ﬂ_def,°_def] 
	THEN REPEAT ¥_tac);
=TEX
=SML
a(strip_asm_tac(list_µ_elim[¨Dir_tables yÆ,¨Last iÆ,¨y'Æ]at_thm1));
a(strip_asm_tac(list_µ_elim[¨Dir_tables y''Æ,¨Last iÆ,¨y'''Æ]at_thm1));
a(asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 19 (asm_tac o list_µ_elim[¨Front iÆ,¨cleanDirectory c yÆ]));
a(LEMMA_T¨∂ z
             ∑ (c dominates Dir_exist z ± (Front i, z) ç repState sâ1)
                 ± cleanDirectory c y = cleanDirectory c zÆasm_tac);
(* *** Goal "1" *** *)
a(∂_tac¨yÆ THEN  asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(lemma_tac¨z = y''Æ);
(* *** Goal "2.1" *** *)
a(DROP_NTH_ASM_T 18(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Front iÆ,¨zÆ,¨y''Æ]));
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac);
a(asm_rewrite_tac[cleanDirectory_def,dir_components,get_spec¨MkDirectoryÆ] THEN strip_tac);
a(DROP_NTH_ASM_T 3 ante_tac THEN rewrite_tac[rel_ext_clauses,graph_thm,r_ª_r_thm] 
	THEN ¥_T (asm_tac o list_µ_elim[¨Last iÆ,¨cleanTable c y'Æ]));
a(LEMMA_T¨∂ z∑ (Last i, z) ç Dir_tables y ± cleanTable c y' = cleanTable c zÆasm_tac);
=TEX
=SML
(* *** Goal "2.2.1" *** *)
a(∂_tac¨y'Æ THEN  asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(lemma_tac¨z' = y'''Æ);
(* *** Goal "2.2.2.1" *** *)
a(DROP_NTH_ASM_T 11(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨z'Æ,¨y'''Æ]));
=TEX
=SML
(* *** Goal "2.2.2.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac 
	THEN ¥_tac THEN asm_rewrite_tac[] THEN POP_ASM_T ante_tac);
a(rewrite_tac[cleanTable_def]);
a(cases_tac¨c dominates TS_class y'''Æ THEN cases_tac¨c dominates TS_class y'Æ 
	THEN asm_rewrite_tac[tab_components,get_spec¨MkTableSpecÆ] 
	THEN strip_tac THEN_TRY asm_rewrite_tac[]);
(* *** Goal "2.2.2.2.1" *** *)
a(REPEAT strip_tac THEN contr_tac);
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.2.2.2" *** *)
a(REPEAT strip_tac THEN contr_tac);
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
val €tabExists_cleanTable_lemma› = save_pop_thm"tabExists_cleanTable_lemma";
=TEX
=GFT HOL output
tabExists_cleanTable_lemma = Ù µ c sâ1 sâ2
  ∑ hide (c, sâ1) = hide (c, sâ2)
      ¥ (µ i
      ∑ tabExists c i (repState sâ1)
          ¥ (cleanTable c (getTable i (repState sâ1))
                = cleanTable c (getTable i (repState sâ2))
              ± (c dominates TS_class (getTable i (repState sâ1))
                § c dominates TS_class (getTable i (repState sâ2))))
=TEX
\subsubsection{Proof of Conjunct 3}

=SML
push_goal([],¨µ c sâ1 sâ2 e
        ∑ hide (c, sâ1) = hide (c, sâ2)
            ¥ Snd (updateState (c, e, sâ1)) = Snd (updateState (c, e, sâ2))Æ);
a(REPEAT strip_tac);
a(LEMMA_T¨e = (Fst e,Snd e)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],rewrite_tac[updateState_def,updateStateR_def]]);
a(lemma_tac¨(tabExists c (tabFromEffect (Fst e)) (repState sâ1) 
		¥ tabExists c (tabFromEffect (Fst e)) (repState sâ2))
	± (tabExists c (tabFromEffect (Fst e)) (repState sâ2 )
		¥ tabExists c (tabFromEffect (Fst e)) (repState sâ1))Æ);
=TEX
=SML
(* *** Goal "1" *** *)
a(strip_asm_tac(list_µ_elim[¨cÆ,¨sâ1Æ,¨sâ2Æ]tabExists_lemma)THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
(* invalid tables in sâ1 and sâ2 *)
a(strip_asm_tac(µ_elim ¨Fst eÆ query_type) THEN asm_rewrite_tac[]
	THEN cases_tac¨≥ Snd e = []Æ THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
(* valid tables in sâ1 and sâ2 *)
a(strip_asm_tac (list_µ_elim[¨cÆ,¨sâ1Æ,¨sâ2Æ]tabExists_cleanTable_lemma));
a(POP_ASM_T (strip_asm_tac o µ_elim¨tabFromEffect (Fst e)Æ));
(* *** Goal "3.1" *** *)
(* table classes not dominated  by c *)
a(EVERY[strip_asm_tac(µ_elim ¨Fst eÆ query_type),
	asm_rewrite_tac[],
	cases_tac¨≥ Snd e = []Æ,
	asm_rewrite_tac[]]);
=TEX
=SML
(* *** Goal "3.2" *** *)
(* table classes dominated by c *)
a(EVERY[strip_asm_tac(µ_elim ¨Fst eÆ query_type),
	asm_rewrite_tac[],
	cases_tac¨≥ Snd e = []Æ,
	asm_rewrite_tac[]]);
=TEX
=SML
(* Select and Delete automatically proven *)
(* *** Goal "3.2.1" *** *)
(* *** Insert *** *)
a(strip_asm_tac(list_µ_elim[¨cÆ,¨getTable (tabFromEffect (Fst e)) (repState sâ1)Æ,
	¨getTable (tabFromEffect (Fst e)) (repState sâ2)Æ,
	¨repState sâ1Æ,¨repState sâ2Æ,¨destInsert (Fst e)Æ]cleanTable_insertQuery_lemma));
=TEX
=SML
(* *** Goal "3.2.2" *** *)
(* *** Update *** *)
a(strip_asm_tac(list_µ_elim[¨cÆ,¨getTable (tabFromEffect (Fst e)) (repState sâ1)Æ,
	¨getTable (tabFromEffect (Fst e)) (repState sâ2)Æ,
	¨repState sâ1Æ,¨repState sâ2Æ,¨destUpdate (Fst e)Æ]cleanTable_updateQuery_lemma));
val €conjunct3› = save_pop_thm"conjunct3";
=TEX
=GFT HOL output
conjunct3 = Ù µ c sâ1 sâ2 e
  ∑ hide (c, sâ1) = hide (c, sâ2)
      ¥ Snd (updateState (c, e, sâ1)) = Snd (updateState (c, e, sâ2))
=TEX


\section{CLOSING DOWN}
The following \Product{} instruction restores the previous proof context.
=SML
pop_pc();
=TEX

\newpage
\HOLindexOff
\input{fef011th.tex}
\HOLindexOn
\newpage
\twocolumn[\section{INDEX} \label{INDEX}]
\small
\printindex

\end{document}
