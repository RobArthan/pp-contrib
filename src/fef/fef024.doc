=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{A HOL Specification of the Output Filter}  %% Mandatory field
\TPPref{DS/FMU/FEF/024}  %% Mandatory field
\def\SCCSversion{$Revision$
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date$
}}  %% Mandatory field (with sensible default)
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{G.~M.~Prout & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{A specification of the SWORD output filter in \Product{} HOL for the
DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[Issue \SCCSversion ({\FormatDate{93/02/03
}})]  First issue.
\end{description}

\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document gives a formal specification in \Product HOL of the SWORD front end output filter of \cite{output}.

\subsection{Introduction}
\section{PRELIMINARIES}
=SML
open_theory"fef003";
new_theory"fef024";
=TEX
Some functions (similar to those in \cite{DS/FMU/FEF/014}) for dealing with
errors are required.
General constructor, discriminator and destructor functions 
 are provided for a sum type where one component is 
 an error.

¹HOLCONST
Ü	ÛgiveValİ 	: 'a ­ 'a + 'Error;
Ü	ÛgiveErrorİ 	: 'Error ­ 'a + 'Error;
Ü	ÛdestValİ	: 'a + 'Error ­ 'a;
Ü	ÛdestErrorİ	: 'a + 'Error ­ 'Error;
Ü	ÛisValİ		: 'a + 'Error ­ BOOL;
Ü	ÛisErrorİ	: 'a + 'Error ­ BOOL
÷üüüüüüüüüüüüüü
Ü	µ v; e; ve 
Ü	·	giveVal v			= InL v
Ü	±	giveError e			= InR e
Ü	±	destVal (giveVal v)		= v 
Ü	±	destError(giveError e)	= e	
Ü	±	(isVal ve 			= ¶ v‰1 · ve = giveVal v‰1)
Ü	±	(isError ve			= ¶ e‰1 · ve = giveError e‰1)
°
¹HOLCONST
Ü	Ûseqİ : î ­ 'x  ­ 'x LIST 
÷üüüüüüüüüüüüüüüüüüüüüüü
Ü	µ n x · seq n x =	if n = 0 then []
Ü				else Cons x (seq (n - 1) x)
°
=SML
declare_infix (150,"&‰2");
=TEX
¹HOLCONST
Ü	$Û&‰2İ : ('x + STRING) ­ ('x LIST + STRING) ­ ('x LIST + STRING)
÷üüüüüüüüüüüüüüüüüüüüüüü
Ü	µ x xl · (x &‰2 xl) =
Ü	if 	isVal x
Ü		then	if	isVal xl
Ü			then	giveVal(Cons(destVal x) (destVal xl))
Ü			else	giveError (destError xl)
Ü	else	if 	isVal xl
Ü		then	giveError (destError x)
Ü		else	giveError(destError x ë destError xl)
°
¹HOLCONST
Ü	Ûpromoteİ : ('x ­ 'y + STRING) ­ ('x LIST­ 'y LIST + STRING) 
÷üüüüüüüüüüüüüüüüüüüüüüü
Ü	µ f s · promote f s = 
Ü	if 	s = [] then giveVal[]
Ü	else	(f (Hd s) &‰2 promote f (Tl s)) 	
°


\section{FILTER FUNCTIONS FOR SELECT QUERIES}
The type of the data is left as generic. The function 
$class\_of\_data$ returns the classification of a piece of data that is to
 be treated as a classification.
¹HOLCONST
Ü	Ûclass_of_dataİ: 'DATA  ­ Class
÷üüüüüüüüüüüüüü
Ü	T
°

The user's clearance is supplied as parameter to the following functions.


The function $filter\_where\_row$ takes a data list whose 
 first element is the classification 
of the where clause, removes the classification 
of the where clause from the head of the list and also 
returns a boolean which is $true$ if the user is not cleared to see the where clause. An error is returned if the data 
list is empty.

¹HOLCONST
Ü	Ûfilter_where_rowİ: 'DATA LIST ¸ Class  ­ ('DATA LIST  ¸ BOOL) + STRING
÷üüüüüüüüüüüüüü
Ü	µ d ds uc ·
Ü	filter_where_row 	([],uc) = giveError "internalError"
Ü±	filter_where_row 	(Cons d ds,uc) = giveVal (ds, ³(uc dominates (class_of_data d)))
°
The function $filter\_where$ discards rows  where the user is not cleared to see the where clause and also returns a boolean $true$ if any rows have been discarded. An error is returned if any of the data 
lists are empty.

¹HOLCONST
Ü	Ûfilter_whereİ: 'DATA LIST LIST ¸ Class  
					­ ('DATA LIST LIST ¸ BOOL) + STRING
÷üüüüüüüüüüüüüü
Ü	µ ds dss uc ·
Ü	filter_where ([],uc) = giveVal([],F)
Ü±	filter_where 	(Cons ds dss,uc) = 	
Ü		if isVal (filter_where_row(ds,uc)) ± isVal (filter_where(dss,uc))
Ü		then 	let (fds,msg) = destVal(filter_where_row(ds,uc))
Ü			in 
Ü			let (fdss,msgs) = destVal(filter_where(dss,uc))
Ü			in 	if msg then giveVal(fdss,T)
Ü				else giveVal(Cons fds fdss,msgs)
Ü		else giveError "internalError"
°
If the user is not cleared to see the data in a particular field, the string $not\_cleared$ is returned.
¹HOLCONST
Ü	Ûfilter_colsİ: Class ­ ('DATA LIST ¸ BOOL LIST)  
					­ (('DATA + STRING) LIST) + STRING
÷üüüüüüüüüüüüüü
Ü	µ d c ds bs uc ·
Ü	filter_cols uc ([],[]) = giveVal[]
Ü±	filter_cols uc (Cons d (Cons c ds),Cons T bs) =
Ü			(let fd = 	if uc dominates class_of_data c
Ü					then giveVal d
Ü					else giveError"not_cleared"
Ü			in if isVal(filter_cols uc (ds,bs))
				then giveVal(Cons fd (destVal(filter_cols uc (ds,bs))))
			else giveError"internalError")
Ü±	filter_cols uc (Cons d ds,Cons F bs) = (if isVal(filter_cols uc (ds,bs))
				then giveVal((Cons(giveVal d)(destVal(filter_cols uc (ds,bs)))))
				else giveError"internalError")
Ü±	filter_cols uc (ds,bs) = giveError"internalError"
°

The boolean parameter to the function $filter\_select$ 
 is $true$ 
if the lists of data contain the class of the where clause 
as first elements. The boolean list parameter provides 
information as to whether it is necessary to check if the 
user's clearance dominates the classification of the data
selected. $filter\_select$ returns the filtered data 
together with a boolean which determine whether or not the 
$mayNotBeComplete$ 
message should be issued.
¹HOLCONST
Ü	Ûfilter_selectİ: (BOOL ¸ BOOL LIST ¸ 'DATA LIST LIST ¸ Class)
			  ­ (('DATA + STRING) LIST LIST ¸ BOOL) + STRING
÷üüüüüüüüüüüüüü
Ü	µ cls dss uc ·
Ü	filter_select (T,cls ,dss ,uc) = 
		(if isVal (filter_where(dss,uc))
		then 	let (fdss,nc) =  destVal(filter_where(dss,uc))
			in 
			let d_or_e = promote (filter_cols uc)(Combine fdss (seq (# fdss) cls))
			in	if isVal d_or_e then giveVal(destVal d_or_e,nc)
				else giveError "internalError"
		else giveError "internalError")
Ü±	filter_select (F,cls ,dss ,uc) =  
			let d_or_e = promote (filter_cols uc)(Combine dss (seq (# dss) cls))
			in	if isVal d_or_e then giveVal(destVal d_or_e,F)
				else giveError "internalError"
°


\newpage
\twocolumn[\section{INDEX} \label{INDEX}]
\small
\printindex

\end{document}

