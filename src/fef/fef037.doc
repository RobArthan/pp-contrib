%    $Date: 2005/05/07 13:39:50 $ $Id: fef037.doc,v 1.35 2005/05/07 13:39:50 rda Exp rda $ %Z% 
% first time do this:
sccs get fef037.doc
sieve sml < fef037.doc
make Makefile

% when updating the makefile just:
sccs get fef037.doc
make Makefile
=TEX
\documentstyle[hol1,11pt,TQ]{article}
\ftlinepenalty=9999
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPtitle{FEF Makefile}
\TPPref{DS/FMU/FEF/037}
\def\SCCSversion{$Revision: 1.35 $%
}
\TPPissue{\SCCSversion}

\TPPdate{\FormatDate{$Date: 2005/05/07 13:39:50 $%
}}
\TPPproject{DRA FRONT END FILTER PROJECT}
\TPPstatus{Draft}			%% Mandatory field
\TPPtype{Standard}
\TPPkeywords{}
\TPPauthor{G.~M.~Prout & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
%\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document gives the implementation for the makefile for the
DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
%\def\TPPheadcentre{}
%\def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\def\TPPheadlhs{Lemma 1}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
%\listoftables
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[1.34] Allowed for replacement of get\_infixes.
\item[Issue 1.36] Removed dependency on ICL logo font
\item[2016/06/05] The document no longer creates a make file.
\end{description}
\subsection{Changes Forecast}
\pagebreak

\section{GENERAL}

\subsection{Scope}
This document contains some ML code supporting the makefile for the DRA front end filter project RSRE 1C/6130. The use of the UNIX $make$ facility is identified as a requirement
for this project in the `` Project Overview Document '', \cite{DS/FMU/FEF/001}.


\subsection{Introduction}

This document used to contain the literate script of a makefile and some supporting ML code.
To conform to the ProofPower contrib conventions, the make file is now maintained as a
configuration item in its own right {\tt fef.mkf} and this document just contains the ML code.
\section{MAKEFILE}

T
=DUMP xref.sml
datatype ÛTHEORY_ITEMÝ	=	ÛAliasÝ
			|	ÛAxiomÝ
			|	ÛConstantÝ 
			|	ÛDefinitionÝ
			|	ÛFixityÝ
			|	ÛTerminatorÝ
			|	ÛTheoremÝ
			|	ÛTypeAbbrevÝ
			|	ÛTypeConstructorÝ
			|	ÛUndeclaredAliasÝ
			|	ÛUndeclaredTerminatorÝ
			|	ÛUndeclaredTypeAbbrevÝ;

local

open Sort;

fun Ûstring_of_tiÝ (ti : THEORY_ITEM) : string = (
	case ti of
		Alias => "alias"
	|	Axiom => "axiom"
	|	Constant => "constant"
	|	Definition => "definition"
	|	Fixity => "fixity"
	|	Terminator => "terminator"
	|	Theorem => "theorem"
	|	TypeAbbrev => "type abbrev"
	|	TypeConstructor => "type constructor"
	|	UndeclaredAlias => "undec alias"
	|	UndeclaredTerminator => "undec terminator"
	|	UndeclaredTypeAbbrev => "undec type abbrev"
);

fun Ûti_orderÝ (ti1 : THEORY_ITEM) (ti2 : THEORY_ITEM) : int = (
	let	fun aux ti = (
			case ti of
				Alias => 0
			|	Axiom => 1
			|	Constant => 2
			|	Definition => 3
			|	Fixity => 4
			|	Terminator => 5
			|	Theorem => 6
			|	TypeAbbrev => 7
			|	TypeConstructor => 8
			|	UndeclaredAlias => 9
			|	UndeclaredTerminator => 11
			|	UndeclaredTypeAbbrev => 10
		);
	in	aux ti1 - aux ti2
	end
);

type ÛITEM_RECÝ = {name : string, cat : THEORY_ITEM, theory : string};

fun Ûir_orderÝ (ir1 : ITEM_REC) (ir2 : ITEM_REC) : int = (
	let	val {name=name1, cat=cat1, theory=theory1} = ir1;
		val {name=name2, cat=cat2, theory=theory2} = ir2;
	in	case string_order name1 name2 of
			0	=>	(case ti_order cat1 cat2 of
						0 => string_order theory1 theory2
					|	x => x)
		|	x	=>	x
	end
);

fun get_thy_recs (what : THEORY_ITEM list) (thypar : string) : ITEM_REC list = (
	let	val thy = if thypar = "-" then get_current_theory_name()else thypar;
		fun aux [] = []
		|   aux (ti :: tis) = (
			let 	val names = (
			(case ti of
				Alias => map fst (get_aliases thy)
			|	Axiom => flat (map fst (get_axioms thy))
			|	Constant => map (fst o dest_const) (get_consts thy)
			|	Definition => flat (map fst (get_defns thy))
			|	Fixity => map snd (get_left_infixes thy) @
					map snd(get_right_infixes thy) @
					map snd(get_prefixes thy) @
					map snd(get_postfixes thy) @
					get_binders thy @
					get_nonfixes thy
			|	Terminator => get_terminators thy
			|	Theorem => flat (map fst (get_thms thy))
			|	TypeAbbrev => map fst (get_type_abbrevs thy)
			|	TypeConstructor => map (fst o dest_ctype) (get_types thy)
			|	UndeclaredAlias => map fst (get_undeclared_aliases thy)
			|	UndeclaredTerminator => get_undeclared_terminators thy
			|	UndeclaredTypeAbbrev =>	get_undeclared_type_abbrevs thy)
			);
			in	map (fn n => {name=n, cat=ti, theory=thy}) names
				@ aux tis
			end
		);
	in	aux what
	end
);


fun get_thys_recs (what : THEORY_ITEM list)
		(thys : string list) : ITEM_REC list = (
	sort ir_order (flat(map (get_thy_recs what) thys))
);



fun output_index
	(what : THEORY_ITEM list)
	{theories : string list, out_file : string}  : unit = (
	let	val recs = get_thys_recs what theories;
		val chan = open_out out_file;
		fun aux s = (case explode s of "=" :: _ => " " ^ s | _ => s);
		fun outln s = output(chan, aux(translate_for_output s) ^ "\n"); 
		fun do1 {name, cat, theory} = (
			outln (name ^ "\t" ^ string_of_ti cat ^ "\t" ^ theory)
		);
	in	output(chan, "=GFT\n");
		map do1 recs;
		output(chan, "=TEX\n");
		close_out chan
	end
);


in

fun output_ol_index {theories : string list, out_file : string}  : unit = (
	let	val what =[TypeConstructor, Constant, Alias, TypeAbbrev,
			UndeclaredAlias, UndeclaredTypeAbbrev]
	in	output_index what {theories=theories, out_file=out_file}
	end
);

end;

output_ol_index {theories = (get_ancestors "fef043"), out_file = "listall.doc"};
=TEX
\twocolumn[\section{INDEX} \label{INDEX}]
\small
\printindex

\end{document}
 

