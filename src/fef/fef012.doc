=TEX
% TQtemplate.tex
\documentstyle[hol1,11pt,TQ]{article}
\def\Hide#1{}
\def\Bool{``$\it{:}bool\,$''}
\makeindex
\TPPproject{DRA FRONT END FILTER PROJECT}  %% Mandatory field
%\TPPvolume{}
%\TPPpart{}
\TPPtitle{Proof of Security (IIc)}  %% Mandatory field
\TPPref{DS/FMU/FEF/012}  %% Mandatory field
\def\SCCSversion{$Revision: 2.4 $
}
\TPPissue{\SCCSversion}  %% Mandatory field
\TPPdate{\FormatDate{$Date: 1993/11/09 17:18:36 $
}}  %% Mandatory field (with sensible default)
\TPPstatus{Approved}			%% Mandatory field
\TPPtype{Specification}
\TPPkeywords{}
\TPPauthor{G.~M.~Prout & WIN01}  %% Mandatory field
%\TPPauthors{Name 1&location 1\\Name 2&location 2\\Name 3&location 3}
\TPPauthorisation{R.B.~Jones & HAT Manager}
\TPPabstract{This document provides a formal proof for the first  conjunct
of the security property
on the relationship between $hide$ and $updateState$ for the
DRA front end filter project RSRE 1C/6130.}
%\TPPabstractB{}
%\TPPabstractC{}
%\TPPabstractD{}
%\TPPabstractE{}
%\TPPabstractF{}
\TPPdistribution{\parbox[t]{4.0in}{%
	HAT FEF File \\
	Simon Wiseman
}}
%\TPPclass{CLASSIFICATION}
\newfont{\icllogo}{icllogo50}
\def\TPPheadlhs{$\vcenter{\halign{##\cr\icllogo ICL\cr}}$}
%\def\TPPheadlhs{}
%\def\TPPheadcentre{}
%def\TPPheadrhs{}
%\def\TPPfootlhs{}
%\def\TPPfootcentre{}
%\def\TPPfootrhs{}

\begin{document}
\TPPsetsizes
\makeTPPfrontpage

\vfill
\begin{centering}

%\bf Copyright \copyright\ : International Computers Ltd \number\year

\end{centering}

\newpage
\section {DOCUMENT CONTROL}
\subsection{Contents List}
\tableofcontents
\subsection{Document Cross References}
\bibliographystyle{fmu}
\bibliography{fmu,fef}

\subsection{Changes History}
\begin{description}
\item[Issue 2.3] Ported to version 0.3 ProofPower.
\item[Issue 2.4] Now deletes theory if necessary.
\item[Issue 2.5] Allowed for set difference being left-associative.
\end{description}

\subsection{Changes Forecast}
None.
\pagebreak
\section{GENERAL}
\subsection{Scope}
This document, together with \cite{DS/FMU/FEF/011} and \cite{DS/FMU/FEF/013}, provides a formal proof  that the components $hide$ and $updateState$ 
satisfy their critical 
requirements, as specified in 
the proof strategy \cite{DS/FMU/FEF/007}. It constitutes part of deliverable D6 
of work package 1c, as given
in section 7 of the Secure Database Technical Proposal, \cite{DS/FMU/017}.

\subsection{Introduction}

This document is a proof script which provides a formal proof which contributes to the proof
 of the second conjunct of $Lemma1$,
the requirement on the critical components  $hide$ and $updateState$, described in the proof strategy document \cite{DS/FMU/FEF/007}.

{\bf Lemma1}
=GFT 
	?Ù 	hide ç secureHide ± (hide,updateState) ç secureUpdate
=TEX

In this document, we give a proof that the first conjunct of $secureUpdate$ holds for $hideR$ and $updateStateR$:
=GFT
	?Ù 	µ câ1 câ2 s e  ∑ 
			≥ hideR (câ2, repState s) 
			= hideR (câ2, Fst (updateStateR (câ1, e, repState s))) 
				¥ câ2 dominates câ1
=TEX



\section{PRELIMINARIES}
The following \Product{} instructions set up the new theory $fef012$.

=SML 
open_theory "fef011";
(force_delete_theory "fef012" handle _ => ());
new_theory€"fef012"›;
push_pc "hol";
add_rw_thms [repState_absState_def] "wrk049a";
set_merge_pcs["hol","wrk049","wrk049a","'pair1"] ;
=TEX


\section{CONSISTENCY PROOFS}
We satisfy the consistency proof obligations
for constants defined in \cite{DS/FMU/FEF/004} that
are needed in the proofs that follow.

=SML
push_consistency_goal¨destItemÆ;
a(∂_tac¨(OutL,OutL o OutR,OutR o OutR)Æ);
a(rewrite_tac[get_spec¨ItemUpdateÆ]);
save_consistency_thm¨destItemÆ(pop_thm());
val €destItem_def› = get_spec¨destItemÆ;
=TEX
=GFT HOL output
destItem_def = 
Ù µ i c d
  ∑ destItem (ItemUpdate i) = i
      ± destClass (ClassUpdate c) = c
      ± destData (DataUpdate d) = d
=TEX
\subsection{Retrieving the Remaining Constant Definition}

=SML
val €deleteQuery_def› = conv_rule(MAP_C let_conv)(get_spec¨deleteQueryÆ);
=TEX
=GFT HOL output
deleteQuery_def =
Ù µ clear i ns e s ts
  ∑ deleteQuery (clear, (i, ns), s, ts)
      = changeSpec
        i
        (replaceRows
            ts
            (Extract
                (1 .. # (TS_rows ts)
                    \ revealRow clear ts Image ns
                      ° {i|R_exist (Nth (TS_rows ts) i) = clear})
                (TS_rows ts))) s
=TEX

\section{AUXILIARY THEOREMS}
First we simplify some of the constant defining theorems.
=SML
val €destVal_def› = all_µ_intro(nth 2 (strip_±_rule (all_µ_elim giveVal_def)));
val €destError_def› = all_µ_intro(nth 3 (strip_±_rule (all_µ_elim giveVal_def)));
=TEX
=GFT HOL output
destVal_def = Ù µ v∑ destVal (giveVal v) = v
destError_def = Ù µ e∑ destError (giveError e) = e
=TEX
=SML
val €≥giveVal_eq_giveError_thm› = save_thm("≥giveVal_eq_giveError_thm",
	prove_rule[giveVal_def]¨µ v e∑ ≥(giveVal v = giveError e)Æ);
val €≥giveError_eq_giveVal_thm› = save_thm("≥giveError_eq_giveVal_thm",
	prove_rule[giveVal_def]¨µ e v∑ ≥(giveError e = giveVal v)Æ);
=TEX
=GFT HOL output
≥giveVal_eq_giveError_thm = Ù µ v e∑ ≥ giveVal v = giveError e
≥giveError_eq_giveVal_thm = Ù µ e v∑ ≥ giveError e = giveVal v
=TEX
Now some results which will be used in the main proofs.
=SML
push_goal([],¨µ l (last:Row) s (u : Ó ™ (Ó ™ Update)) ∑ 
	RelCombine((Squash(Id (Dom(ListRel l í s))))Á~Í ª u)
                               (ListRel (l Î [last]))
	= RelCombine((Squash(Id (Dom(ListRel l í s))))Á~Í ª u)
                               (ListRel l)Æ);
a(rewrite_tac[rel_combine_def,rel_ext_clauses,list_rel_def,
	dot_dot_def,length_Î_one_thm]);
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(DROP_NTH_ASM_T 5(strip_asm_tac o rewrite_rule[enumerate_def,inv_rel_def,dom_def,
	id_def,squash_def]));
a(DROP_NTH_ASM_T 8 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(DROP_NTH_ASM_T 5(strip_asm_tac o rewrite_rule[enumerate_def,inv_rel_def,dom_def,
	id_def,squash_def]));
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨z'Æ,¨lastÆ]nth_Î_thm1)));
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
(* *** Goal "4" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
(* *** Goal "5" *** *)
a(fc_tac[º_plus_one_thm]);
(* *** Goal "6" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(asm_rewrite_tac[]);
val €rel_combine_one_lemma› = save_pop_thm"rel_combine_one_lemma";
=TEX
=GFT HOL output
rel_combine_one_lemma =
 Ù µ l last s u
  ∑ RelCombine
        ((Squash (Id (Dom (ListRel l í s))))Á~Í ª u)
        (ListRel (l Î [last]))
      = RelCombine
        ((Squash (Id (Dom (ListRel l í s))))Á~Í ª u)
        (ListRel l)
=TEX
=SML
push_goal([],¨µ l last c t us∑ ((RelCombine
                     ((Squash
                               (Id
                                   (Dom
                                       (ListRel (l Î [last])
                                           í {r|c dominates R_exist r}))))Á~Í
                         ª us)
                     (ListRel (l Î [last]))
                   ª Graph (updateRow c (TS_class t)))
                 í {x|isError x})
               ª Graph destError
             = {} ¥ ((RelCombine
                       ((Squash
                                 (Id
                                     (Dom
                                         (ListRel l í {r|c dominates R_exist r}))))Á~Í
                           ª us)
                       (ListRel l)
                     ª Graph (updateRow c (TS_class t)))
                   í {x|isError x})
                 ª Graph destError
               = {}Æ); 
a(REPEAT µ_tac);
a(cases_tac¨c dominates R_exist lastÆTHEN asm_rewrite_tac
	[squash_Î_thm]);
(* *** Goal "1" *** *)
a(rewrite_tac[¿_null_thm]THEN strip_tac);
a(DROP_NTH_ASM_T 3 (fn _ => id_tac) THEN POP_ASM_T(fn _ => id_tac));
set_labelled_goal"2";
(* *** Goal "1 & 2" *** *)
a(POP_ASM_T(fn _ => id_tac) THEN strip_tac);
a(POP_ASM_T (strip_asm_tac o rewrite_rule[rel_combine_one_lemma]));
val €rel_combine_null_lemma› = save_pop_thm"rel_combine_null_lemma";
=TEX
=GFT HOL output
rel_combine_null_lemma =
Ù µ l last c t us
  ∑ ((RelCombine
                ((Squash
                          (Id
                              (Dom
                                  (ListRel (l Î [last])
                                      í {r|c dominates R_exist r}))))Á~Í
                    ª us)
                (ListRel (l Î [last]))
              ª Graph (updateRow c (TS_class t)))
            í {x|isError x})
          ª Graph destError
        = {}
      ¥ ((RelCombine
                ((Squash
                          (Id (Dom (ListRel l í {r|c dominates R_exist r}))))Á~Í
                    ª us)
                (ListRel l)
              ª Graph (updateRow c (TS_class t)))
            í {x|isError x})
          ª Graph destError
        = {}
=TEX
=SML
push_goal([],¨µ l s (u : Ó ™ (Ó ™ Update)) c t∑ 
	Dom((RelCombine((Squash(Id(Dom
		(ListRel l í {r|c dominates R_exist r}))))Á~Í ª u)
		(ListRel l)
                	ª Graph (updateRow c (TS_class t))) ª Graph destVal)
	Ä Dom(ListRel l)Æ);
a(REPEAT µ_tac);
a(rewrite_tac[enumerate_def,inv_rel_def,dom_def,id_def,squash_def,
	rel_combine_def,list_rel_def,dot_dot_def,sets_ext_clauses]);
a(rename_tac[]); (* to eliminate duplicate variable names *)
a(REPEAT strip_tac);
a(prove_∂_tac THEN asm_rewrite_tac[]);
val €dom_rel_combine_null_Ä_lemma› = save_pop_thm"dom_rel_combine_null_Ä_lemma";
=GFT HOL output
dom_rel_combine_null_Ä_lemma = 
Ù µ l s u c t
  ∑ Dom
        ((RelCombine
                ((Squash
                          (Id (Dom (ListRel l í {r|c dominates R_exist r}))))Á~Í
                    ª u)
                (ListRel l)
              ª Graph (updateRow c (TS_class t)))
            ª Graph destVal)
      Ä Dom (ListRel l)
=TEX
=SML
val €destVal_fun_thm› = save_thm("destVal_fun_thm",
	tac_proof(([],¨Graph (destVal: Row + Errors ≠ Row) ç FunctionalÆ),
	rewrite_tac[functional_def]THEN REPEAT strip_tac THEN asm_rewrite_tac[]));
=TEX
=SML
val €updateRow_fun_thm› = save_thm("updateRow_fun_thm",
	tac_proof(([],¨µ c t ∑ Graph (updateRow c (TS_class t)) ç FunctionalÆ),
	rewrite_tac[functional_def]THEN REPEAT strip_tac THEN asm_rewrite_tac[]));
=TEX

=SML
push_goal([],¨µ l s (u : Ó ™ (Ó ™ Update)) c t∑
	u ç Functional
	¥
	(RelCombine((Squash(Id(Dom
		(ListRel l í {r|c dominates R_exist r}))))Á~Í ª u)
		(ListRel l)
                	ª Graph (updateRow c (TS_class t))) ª Graph destVal ç FunctionalÆ);
a(REPEAT strip_tac);
a(lemma_tac¨RelCombine ((Squash (Id (Dom
	 (ListRel l í {r|c dominates R_exist r}))))Á~Í ª u)
                   (ListRel l) ç FunctionalÆ);
=TEX
=SML
(* *** Goal "1" *** *)
a(lemma_tac¨(Squash(Id(Dom
	(ListRel l í {r|c dominates R_exist r}))))Á~Í ç FunctionalÆ);
(* *** Goal "1.1" *** *)
a(rewrite_tac[squash_id_thm,enumerate_thm,inv_rel_def,
	functional_def] THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 4 (rewrite_thm_tac o eq_sym_rule) 
	THEN POP_ASM_T (rewrite_thm_tac o eq_sym_rule));
(* *** Goal "1.2" *** *)
a(bc_tac[rel_combine_fun_thm] THEN bc_tac[ª_fun_thm1]
	THEN asm_rewrite_tac[list_rel_fun_thm]);
=TEX
=SML
(* *** Goal "2" *** *)
a(bc_tac[ª_fun_thm] THEN bc_tac[ª_fun_thm] THEN 
	asm_rewrite_tac[destVal_fun_thm,updateRow_fun_thm]);
val €conjunct1_fun_lemma› = save_pop_thm"conjunct1_fun_lemma";
=TEX
=GFT HOL output
conjunct1_fun_lemma = 
Ù µ l s u c t
  ∑ u ç Functional
      ¥ (RelCombine
              ((Squash
                        (Id (Dom (ListRel l í {r|c dominates R_exist r}))))Á~Í
                  ª u)
              (ListRel l)
            ª Graph (updateRow c (TS_class t)))
          ª Graph destVal
        ç Functional
=TEX
=SML
push_goal([],¨µ l last c (u : Ó ™ (Ó ™ Update)) t ∑
	u ç Functional
	¥
	RelList (ListRel (l Î [last])
                         ´ (RelCombine
                             ((Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r|c dominates R_exist r}))))Á~Í
                                 ª u)
                             (ListRel l)
                           ª Graph (updateRow c (TS_class t))) ª Graph destVal)
	= RelList (ListRel l ´ (RelCombine
                             ((Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r|c dominates R_exist r}))))Á~Í
                                 ª u)
                             (ListRel l)
                           ª Graph (updateRow c (TS_class t))) ª Graph destVal) Î [last]Æ);
=TEX
=SML
a(REPEAT strip_tac);
a(bc_tac[rel_list_´_ax1]);
(* *** Goal "1" *** *)
a(bc_tac[conjunct1_fun_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(rewrite_tac[dom_rel_combine_null_Ä_lemma]);
val €conjunct1_lemma1› = save_pop_thm"conjunct1_lemma1";
=TEX
=GFT HOL output
conjunct1_lemma1 = Ù µ l last c u t
  ∑ u ç Functional
      ¥ RelList
          (ListRel (l Î [last])
              ´ (RelCombine
                  ((Squash
                            (Id
                                (Dom
                                    (ListRel l
                                        í {r|c dominates R_exist r}))))Á~Í
                      ª u)
                  (ListRel l)
                ª Graph (updateRow c (TS_class t)))
              ª Graph destVal)
        = RelList
            (ListRel l
                ´ (RelCombine
                    ((Squash
                              (Id
                                  (Dom
                                      (ListRel l
                                          í {r|c dominates R_exist r}))))Á~Í
                        ª u)
                    (ListRel l)
                  ª Graph (updateRow c (TS_class t)))
                ª Graph destVal)
          Î [last]
=TEX
=SML
push_goal([],¨µ c last l u us t ∑ 
		(us ç Functional
		± c dominates R_exist last 
		± (#(Squash (Id (Dom(ListRel (l Î [last])
                                   í {r|c dominates R_exist r})))),u) ç us) 
	¥
		RelList
                     (ListRel (l Î [last])
                         ´ (RelCombine
                             ((Squash
                                       (Id
                                           (Dom
                                               (ListRel (l Î [last])
                                                   í {r|c dominates R_exist r}))))Á~Í
                                 ª us)
                             (ListRel (l Î [last]))
                           ª Graph (updateRow c (TS_class t)))
                         ª Graph destVal) = RelList
                       (ListRel l
                           ´ (RelCombine
                               ((Squash
                                         (Id
                                             (Dom
                                                 (ListRel l
                                                     í {r
                                                     |c dominates R_exist r}))))Á~Í
                                   ª us)
                               (ListRel l)
                             ª Graph (updateRow c (TS_class t)))
                           ª Graph destVal) Î [destVal(updateRow c (TS_class t)(u,last))]Æ);
=TEX
=SML
a(REPEAT strip_tac);
a(LEMMA_T¨(RelCombine
                       ((Squash
                                 (Id
                                     (Dom
                                         (ListRel (l Î [last])
                                             í {r
                                             |c
                                                 dominates R_exist
           r}))))Á~Í
                           ª us)
                       (ListRel (l Î [last]))
                     ª Graph (updateRow c (TS_class t)))
                   ª Graph destVal
	=
	((RelCombine
                         ((Squash
                                   (Id
                                       (Dom
                                           (ListRel l
                                               í {r
                                               |c
           dominates R_exist r}))))Á~Í
                             ª us)
                         (ListRel l)
                       ª Graph (updateRow c (TS_class t)))
                     ª Graph destVal) ¿
	{(#l + 1,destVal(updateRow c (TS_class t)(u,last)))}Æ
	rewrite_thm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(asm_rewrite_tac[squash_Î_thm,inv_rel_singleton_thm,rel_combine_one_lemma]);
a(LEMMA_T¨((RelCombine
                     ({(# l + 1,
                             #
                                   (Squash
                                       (Id
                                           (Dom
                                               (ListRel l
           í {r|c dominates R_exist r}))))
                                 + 1)}
                         ª us)
                     (ListRel (l Î [last]))
                   ª Graph (updateRow c (TS_class t)))
                 ª Graph destVal) =
	{(# l + 1,
                   destVal
                       (updateRow c (TS_class t) (u, last)))}Ærewrite_thm_tac);
a(rewrite_tac[rel_combine_def,rel_ext_clauses]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "1.1" *** *)
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|c dominates R_exist r}Æ]size_squash_plus1_thm));
a(DROP_NTH_ASM_T 8 ante_tac THEN POP_ASM_T rewrite_thm_tac);
a(DROP_NTH_ASM_T 5 (rewrite_thm_tac o eq_sym_rule)THEN ¥_tac);
a(lemma_tac¨u = Fst z'Æ);
(* *** Goal "1.1.1" *** *)
a(DROP_NTH_ASM_T 8 (asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨z''Æ,¨uÆ,¨Fst z'Æ]));
(* *** Goal "1.1.2" *** *)
a(lemma_tac¨last = Snd z'Æ);
(* *** Goal "1.1.2.1" *** *)
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[list_rel_Î_singleton_thm]
	THEN REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
a(swap_nth_asm_concl_tac 1);
a(rewrite_tac[list_rel_def,dot_dot_def]);
(* *** Goal "1.1.2.2" *** *)
a(asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "1.2" *** *)
a(∂_tac¨(updateRow c (TS_class t)(u, last))Æ THEN asm_rewrite_tac[]);
a(∂_tac¨(u,last)Æ THEN rewrite_tac[list_rel_Î_singleton_thm,¿_def]);
a(prove_∂_tac);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|c dominates R_exist r}Æ]size_squash_plus1_thm));
a(POP_ASM_T (rewrite_thm_tac o eq_sym_rule)THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(bc_tac[rel_list_´_ax2]);
(* *** Goal "2.1" *** *)
a(bc_tac[conjunct1_fun_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(rewrite_tac[dom_rel_combine_null_Ä_lemma]);
val €conjunct1_lemma2› = save_pop_thm"conjunct1_lemma2";
=TEX
=GFT HOL output
conjunct1_lemma2 = 
Ù µ c last l u us t
  ∑ us ç Functional
        ± c dominates R_exist last
        ± (#
                (Squash
                    (Id
                        (Dom
                            (ListRel (l Î [last])
                                í {r|c dominates R_exist r})))), u)
          ç us
      ¥ RelList
          (ListRel (l Î [last])
              ´ (RelCombine
                  ((Squash
                            (Id
                                (Dom
                                    (ListRel (l Î [last])
                                        í {r|c dominates R_exist r}))))Á~Í
                      ª us)
                  (ListRel (l Î [last]))
                ª Graph (updateRow c (TS_class t)))
              ª Graph destVal)
        = RelList
            (ListRel l
                ´ (RelCombine
                    ((Squash
                              (Id
                                  (Dom
                                      (ListRel l
                                          í {r|c dominates R_exist r}))))Á~Í
                        ª us)
                    (ListRel l)
                  ª Graph (updateRow c (TS_class t)))
                ª Graph destVal)
          Î [destVal (updateRow c (TS_class t) (u, last))]
=TEX

\section{PROOF OF SECURITY OF CRITICAL COMPONENTS}
The main proof of this section is built up from a series of lemmas.
\subsection{Insert Lemmas}

=SML
push_goal([],¨µ câ1 câ2 t ds ∑ 
	≥ câ2 dominates câ1  
	¥ cleanTable câ2 t = cleanTable câ2 (replaceRows t 
		((TS_rows t) Î (Map((MkRow câ1) o (colDefaults câ1 t))ds)))Æ);
a(REPEAT strip_tac);
a(rewrite_tac[cleanTable_def,replaceRows_def,get_spec¨MkTableSpecÆ]);
a(cases_tac¨câ2 dominates TS_class tÆTHEN 
	asm_rewrite_tac[tab_components,get_spec¨MkTableSpecÆ,cleanColCons_def]);
a(rewrite_tac[cleanRows_def,revealRow_def]);
a(lemma_tac ¨(Map (MkRow câ1 o colDefaults câ1 t) ds)˘ {r|câ2 dominates R_exist r} = []Æ);
(* *** Goal "1" *** *)
a(REV_LIST_INDUCTION_T¨dsÆasm_tac);
(* *** Goal "1.1" *** *)
a(rewrite_tac[map_def,˘_def]);
(* *** Goal "1.2" *** *)
a(rewrite_tac[˘_thm,get_spec¨MkRowÆ]);
a(µ_tac THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]);
val €insertRows_lemma› = save_pop_thm"insertRows_lemma";
=TEX
=GFT HOL output
insertRows_lemma =
 Ù µ câ1 câ2 t ds
  ∑ ≥ câ2 dominates câ1
      ¥ cleanTable câ2 t
        = cleanTable
          câ2
          (replaceRows
              t
              (TS_rows t Î Map (MkRow câ1 o colDefaults câ1 t) ds))
=TEX

=SML
push_goal([],¨µ câ1 câ2 s i ds
        ∑ (≥ câ2 dominates câ1 ± tabExists câ1 (tabFromEffect (InsertEffect (i,ds))) (repState s))
	¥ hideR (câ2, repState s)
             = hideR(câ2, Fst(insertQuery
                           (câ1, destInsert(InsertEffect (i,ds)), repState s,getTable 
			(tabFromEffect (InsertEffect (i,ds))) (repState s))))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN rewrite_tac[destInsert_def,tabFromEffect_def,
	getTable_def,rewrite_rule[dom_def]tabExists_def]);
a(REPEAT strip_tac);
a(strip_asm_tac (pure_rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sÆisState_lemma)));
a(strip_asm_tac(list_µ_elim[¨repState sÆ,¨Front iÆ,¨yÆ]at_thm1));
=TEX
=SML
a(LIST_DROP_NTH_ASM_T[4,5,6](MAP_EVERY ante_tac) 
	THEN TOP_ASM_T rewrite_thm_tac);
a(REPEAT ¥_tac THEN DROP_NTH_ASM_T 6  ante_tac  THEN 
	rewrite_tac[™_def,get_spec¨IdeLÆ,get_spec¨DirectorySÆ,°_def,∏_def,
	get_spec¨UniverseÆ,rel_ext_clauses,get_spec¨$Æ]THEN strip_tac);
a(asm_fc_tac[]);
a(POP_ASM_T ante_tac THEN rewrite_tac[ﬂ_def,°_def]THEN REPEAT ¥_tac);
a(strip_asm_tac(list_µ_elim[¨Dir_tables yÆ,¨Last iÆ,¨y'Æ]at_thm1));
a(asm_rewrite_tac[]);
a(REPEAT µ_tac);
a(rewrite_tac[insertQuery_def]);
=TEX
=SML
a(cases_tac¨≥ Elems(Map(MkRow câ1 o colDefaults câ1 y') ds)
	Ä RowSÆTHEN asm_rewrite_tac[]);
a(asm_rewrite_tac[changeSpec_def,hideR_def,rel_ext_clauses]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[´_single]);
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "1.1" *** *)
a(∂_tac¨MkDirectory
                         (Dir_tables y
                             ´ {(Last i,
                                 replaceRows
                                     y'
                                     (TS_rows y'
                                         Î Map
                                           (MkRow câ1 o colDefaults câ1 y')
                                           ds))})
                         (Dir_exist y)
                         (Dir_class y)ÆTHEN asm_rewrite_tac[get_spec¨MkDirectoryÆ]);
a(lemma_tac¨y = zÆ);
(* *** Goal "1.1.1" *** *)
a(DROP_NTH_ASM_T 15 ante_tac THEN TOP_ASM_T (rewrite_thm_tac o eq_sym_rule)
	THEN strip_tac); 
a(DROP_NTH_ASM_T 15(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨xÆ,¨yÆ,¨zÆ]));
=TEX
=SML
(* *** Goal "1.1.2" *** *)
a(asm_rewrite_tac[cleanDirectory_def]);
a(cases_tac¨câ2 dominates Dir_class zÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
(* *** Goal "1.1.2.1" *** *)
a(lemma_tac¨y' = z'Æ);
(* *** Goal "1.1.2.1.1" *** *)
a(DROP_NTH_ASM_T 15 ante_tac THEN DROP_NTH_ASM_T 12 ante_tac 
	THEN asm_rewrite_tac[]THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 2(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨y'Æ,¨z'Æ]));
(* *** Goal "1.1.2.1.2" *** *)
a(prove_∂_tac);
a(asm_rewrite_tac[]);
a(bc_tac[insertRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(∂_tac¨y'Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 5(asm_rewrite_thm_tac o eq_sym_rule));
a(conv_tac eq_sym_conv);
a(bc_tac[insertRows_lemma] THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "1.2" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[´_single,get_spec¨MkDirectoryÆ,
	dir_components]THEN strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(GET_NTH_ASM_T 2 (rewrite_thm_tac o eq_sym_rule));
a(GET_NTH_ASM_T 6 rewrite_thm_tac);
a(rewrite_tac[cleanDirectory_def,rel_ext_clauses]);
a(cases_tac¨câ2 dominates Dir_class yÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
(* *** Goal "2.1.1" *** *)
a(∂_tac¨y'ÆTHEN asm_rewrite_tac[]);
a(conv_tac eq_sym_conv);
a(bc_tac[insertRows_lemma] THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.1.2" *** *)
a prove_∂_tac;
a(lemma_tac¨z' = y'Æ);
(* *** Goal "2.1.2.1" *** *)
a(DROP_NTH_ASM_T 13 (asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨z'Æ,¨y'Æ]));
(* *** Goal "2.1.2.2" *** *)
a(asm_rewrite_tac[]);
a(bc_tac[insertRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[´_single,get_spec¨MkDirectoryÆ,
	dir_components]THEN strip_tac);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
val €insertQuery_lemma› = save_pop_thm"insertQuery_lemma";
=TEX
=GFT HOL output
insertQuery_lemma =
Ù µ câ1 câ2 s i ds
  ∑ ≥ câ2 dominates câ1
        ± tabExists câ1 (tabFromEffect (InsertEffect (i, ds))) (repState s)
      ¥ hideR (câ2, repState s)
        = hideR
          (câ2,
              insertQuery
                  (câ1, destInsert (InsertEffect (i, ds)), repState s,
                      getTable
                          (tabFromEffect (InsertEffect (i, ds)))
                          (repState s)))
=TEX
\subsection{Delete Lemmas}


=SML
push_goal([],¨µ câ1 câ2 s t ns ∑ 
	≥ câ2 dominates câ1  
	¥ cleanTable câ2 t = cleanTable câ2 (replaceRows t 
		(Extract (1 .. #(TS_rows t) \ 
	((revealRow câ1 t) Image ns ° {i|R_exist(Nth(TS_rows t)i) = câ1}))
	(TS_rows t)))Æ);
a(REPEAT strip_tac);
a(rewrite_tac[cleanTable_def,replaceRows_def,get_spec¨MkTableSpecÆ]);
a(cases_tac¨câ2 dominates TS_class tÆTHEN 
	asm_rewrite_tac[tab_components,get_spec¨MkTableSpecÆ,cleanColCons_def]);
a(rewrite_tac[cleanRows_def,revealRow_def]);
=TEX
=SML
a(LEMMA_T¨TS_rows t ˘ {r|câ2 dominates R_exist r} = 
	Extract
                     (1 .. # (TS_rows t)
                         \ Squash
                               (Id
                                   (Dom
                                       (ListRel (TS_rows t)
                                           í {r|câ1 dominates R_exist r})))
                             Image ns
                           ° {i|R_exist (Nth (TS_rows t) i) = câ1})
                     (TS_rows t)
                   ˘ {r|câ2 dominates R_exist r}Ærewrite_thm_tac);
a(lemma_tac¨∂ l ∑ TS_rows t = lÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(REV_LIST_INDUCTION_T¨lÆasm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[extract_def,rel_list_null_thm]);
(* *** Goal "2" *** *)
a(µ_tac THEN cases_tac¨câ2 dominates R_exist lastÆTHEN 
	cases_tac¨câ1 dominates R_exist lastÆ
	THEN asm_rewrite_tac[extract_Î_single_ax,squash_Î_thm,length_Î_one_thm,
	dot_dot_def,image_¿_thm,¿_°_thm]);
(* *** Goal "2.1" *** *)
a(LEMMA_T¨# l + 1 ç {i|1 º i ± i º # l + 1}
                       \ (Squash
                               (Id(Dom(ListRel l
                                           í {r|câ1 dominates R_exist r})))
                             Image ns
                           ° {i|R_exist (Nth (l Î [last]) i) = câ1}
                         ¿ {(#(Squash(Id(Dom(ListRel l
                              í {r |câ1 dominates R_exist r}))))
                                     + 1, # l + 1)}
                             Image ns
                           ° {i|R_exist (Nth (l Î [last]) i) = câ1})Æ rewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.1.1" *** *)
a(REPEAT strip_tac THEN POP_ASM_T(asm_tac o rewrite_rule[nth_length_one_thm])
	THEN DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2" *** *)
a(rewrite_tac[extract_def]);
a(LEMMA_T¨{i|1 º i ± i º # l}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth l i) = câ1}
                         Ú ListRel l =
	{i|1 º i ± i º # l + 1}
                           \ (Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                                 Image ns
                               ° {i|R_exist (Nth (l Î [last]) i) = câ1}
                             ¿ {(#(Squash(Id(Dom(ListRel l
                                              í {r|câ1 dominates R_exist r}))))
                                         + 1, # l + 1)}
                                 Image ns
                               ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                         Ú ListRel lÆasm_rewrite_thm_tac);
=TEX
=SML
a(rewrite_tac[set_dif_¿_thm,rel_ext_clauses,Ú_def,í_def,list_rel_def,image_def,
	dot_dot_def,º_plus1_thm]);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[]);
(* *** Goal "2.1.2.1" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.1.2.2" *** *)
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.3" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.4" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[nth_length_one_thm]);
a(¥_tac THEN DROP_NTH_ASM_T 9 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.5" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.1.2.6" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.1.2.7" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.1.2.8" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.1.2.9" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.1.2.10" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.11" *** *)
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.13" *** *)
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.14" *** *)
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.15" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.1.2.16" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.1.2.17" *** *)
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.18" *** *)
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.19" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.20" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2" *** *)
a(LEMMA_T¨# l + 1
                     ç {i|1 º i ± i º # l + 1}
                       \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                           Image ns
                         ° {i|R_exist (Nth (l Î [last]) i) = câ1}Ærewrite_thm_tac);
(* *** Goal "2.2.1" *** *)
a(rewrite_tac[image_def,squash_def,enumerate_def,list_rel_def,
	id_def,dot_dot_def,length_Î_one_thm]);
a(REPEAT strip_tac);
a(DROP_NTH_ASM_T 8 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(asm_rewrite_tac[extract_def]);
a(LEMMA_T¨{i|1 º i ± i º # l}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth l i) = câ1}
                         Ú ListRel l={i|1 º i ± i º # l + 1}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth (l Î [last]) i) = câ1}
                         Ú ListRel lÆrewrite_thm_tac);
=TEX
=SML
a(rewrite_tac[list_rel_def,dot_dot_def,set_dif_def,rel_ext_clauses]);
a(REPEAT strip_tac);
(* *** Goal "2.2.2.1" *** *)
a(asm_rewrite_tac[º_plus1_thm]);
(* *** Goal "2.2.2.2" *** *)
a(asm_rewrite_tac[º_plus1_thm]);
(* *** Goal "2.2.2.3" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 2 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2.2.4" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3" *** *)
a(rewrite_tac[image_single_thm,set_dif_¿_thm]);
a(cases_tac¨# (Squash(Id(Dom(ListRel l í {r|câ1 dominates R_exist r}))))
                                   + 1
                                 ç nsÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.3.1" *** *)
a(CASES_T¨# l + 1
                     ç ({i|1 º i ± i º # l + 1}
                         \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                             Image ns
                           ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                       ° ({i|1 º i ± i º # l + 1}
                         \ {# l + 1} ° {i|R_exist (Nth (l Î [last]) i) = câ1})Æ
	asm_tac THEN TOP_ASM_T asm_rewrite_thm_tac);
(*  2.3.1.1 and 2.3.1.2 the same except for unnecessary assumption 1 *)
(* *** Goal "2.3.1.1" *** *)
a(POP_ASM_T (fn _ => id_tac));
set_labelled_goal"2.3.1.2";
=TEX
=SML
(* *** Goal "2.3.1.2" *** *)
a(POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[extract_def]);
a(LEMMA_T¨{i|1 º i ± i º # l}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth l i) = câ1}
                         Ú ListRel l = 
	({i|1 º i ± i º # l + 1}
                             \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                                 Image ns
                               ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                           ° ({i|1 º i ± i º # l + 1}
                             \ {# l + 1} ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                         Ú ListRel lÆrewrite_thm_tac);
=TEX
=SML
a(rewrite_tac[rel_ext_clauses,Ú_def,í_def,list_rel_def,image_def,dot_dot_def,º_plus1_thm]);
a(REPEAT strip_tac);
(* *** Goal "2.3.1.2.1" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.3.1.2.2" *** *)
a contr_tac;
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.3" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.4" *** *)
a contr_tac;
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.5" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.3.1.2.6" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
=TEX
=SML
(* *** Goal "2.3.1.2.7" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.9" *** *)
a(spec_nth_asm_tac 6 ¨x'Æ);
(* *** Goal "2.3.1.2.10" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.3.1.2.11" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.3.1.2.12" *** *)
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.13" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.1.2.14" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.3.2" *** *)
a(CASES_T¨# l + 1
                     ç ({i|1 º i ± i º # l + 1}
                         \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                             Image ns
                           ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                       ° {i|1 º i ± i º # l + 1}Æ
	asm_tac THEN TOP_ASM_T asm_rewrite_thm_tac);
(*  2.3.2.1 and 2.3.2.2 the same except for unnecessary assumption 1 *)
(* *** Goal "2.3.2.1" *** *)
a(POP_ASM_T (fn _ => id_tac));
set_labelled_goal"2.3.2.2";
(* *** Goal "2.3.2.2" *** *)
a(POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[extract_def]);
=TEX
=SML
a(LEMMA_T¨{i|1 º i ± i º # l}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth l i) = câ1}
                         Ú ListRel l = 
	({i|1 º i ± i º # l + 1}
                             \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                                 Image ns
                               ° {i|R_exist (Nth (l Î [last]) i) = câ1})
                           ° {i|1 º i ± i º # l + 1}
                         Ú ListRel lÆrewrite_thm_tac);
a(rewrite_tac[rel_ext_clauses,Ú_def,í_def,list_rel_def,image_def,dot_dot_def,º_plus1_thm]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "2.3.2.2.1" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.3.2.2.2" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.2.3" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.3.2.2.5" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.2.7" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.3.2.2.8" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.3.2.2.9" *** *)
a(DROP_NTH_ASM_T 6 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.2.10" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.4" *** *)
a(CASES_T¨# l + 1
                     ç {i|1 º i ± i º # l + 1}
                       \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                           Image ns
                         ° {i|R_exist (Nth (l Î [last]) i) = câ1}Æ
	asm_tac THEN TOP_ASM_T asm_rewrite_thm_tac);
(*  2.4.1 and 2.4.2 the same except for unnecessary assumption 1 *)
(* *** Goal "2.4.1" *** *)
a(POP_ASM_T (fn _ => id_tac));
set_labelled_goal"2.4.2";
(* *** Goal "2.4.2" *** *)
a(POP_ASM_T (fn _ => id_tac));
a(rewrite_tac[extract_def]);
=TEX
=SML
a(LEMMA_T¨{i|1 º i ± i º # l}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth l i) = câ1}
                         Ú ListRel l = 
	{i|1 º i ± i º # l + 1}
                           \ Squash (Id (Dom (ListRel l í {r|câ1 dominates R_exist r})))
                               Image ns
                             ° {i|R_exist (Nth (l Î [last]) i) = câ1}
                         Ú ListRel lÆrewrite_thm_tac);
a(rewrite_tac[rel_ext_clauses,Ú_def,í_def,list_rel_def,image_def,dot_dot_def,º_plus1_thm]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "2.4.2.1" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.4.2.2" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.4.2.3" *** *)
a(spec_nth_asm_tac 5 ¨x'Æ);
(* *** Goal "2.4.2.4" *** *)
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.4.2.5" *** *)
a(spec_nth_asm_tac 4 ¨x'Æ);
(* *** Goal "2.4.2.6" *** *)
a(strip_asm_tac(rewrite_rule[dot_dot_def](list_µ_elim[¨lÆ,¨xÆ,¨lastÆ]nth_Î_thm1)));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[]);
val €deleteRows_lemma› = save_pop_thm"deleteRows_lemma";
=TEX
=GFT HOL output
deleteRows_lemma =
 Ù µ câ1 câ2 s t ns
  ∑ ≥ câ2 dominates câ1
      ¥ cleanTable câ2 t
        = cleanTable
          câ2
          (replaceRows
              t
              (Extract
                  (1 .. # (TS_rows t)
                      \ revealRow câ1 t Image ns
                        ° {i|R_exist (Nth (TS_rows t) i) = câ1})
                  (TS_rows t)))
=TEX
=SML
push_goal([],¨µ câ1 câ2 s i ns
        ∑ (≥ câ2 dominates câ1 ± tabExists câ1 (tabFromEffect (DeleteEffect (i,ns))) (repState s))
	¥ hideR (câ2, repState s)
             = hideR(câ2, deleteQuery
                           (câ1, destDelete(DeleteEffect (i,ns)), repState s,getTable 
			(tabFromEffect (DeleteEffect (i,ns))) (repState s)))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN rewrite_tac[destInsert_def,tabFromEffect_def,
	getTable_def,rewrite_rule[dom_def]tabExists_def]);
a(REPEAT strip_tac);
a(strip_asm_tac (pure_rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sÆisState_lemma)));
a(strip_asm_tac(list_µ_elim[¨repState sÆ,¨Front iÆ,¨yÆ]at_thm1));
a(LIST_DROP_NTH_ASM_T[4,5,6](MAP_EVERY ante_tac) 
	THEN TOP_ASM_T rewrite_thm_tac);
a(REPEAT ¥_tac THEN DROP_NTH_ASM_T 6  ante_tac  THEN 
	rewrite_tac[™_def,get_spec¨IdeLÆ,get_spec¨DirectorySÆ,°_def,∏_def,
	get_spec¨UniverseÆ,rel_ext_clauses,get_spec¨$Æ]THEN strip_tac);
a(asm_fc_tac[]);
a(POP_ASM_T ante_tac THEN rewrite_tac[ﬂ_def,°_def]THEN REPEAT ¥_tac);
a(strip_asm_tac(list_µ_elim[¨Dir_tables yÆ,¨Last iÆ,¨y'Æ]at_thm1));
a(asm_rewrite_tac[]);
a(REPEAT µ_tac);
a(rewrite_tac[deleteQuery_def]);
a(asm_rewrite_tac[changeSpec_def,hideR_def,rel_ext_clauses]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[´_single]);
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "1.1" *** *)
a(∂_tac¨MkDirectory(Dir_tables y
                             ´ {(Last i,
                                 replaceRows
                                     y'
                                     (Extract
                                         (1 .. # (TS_rows y')
                                             \ revealRow câ1 y' Image ns
                                               ° {i
                                               |R_exist (Nth (TS_rows y') i) = câ1})
                                         (TS_rows y')))})
                         (Dir_exist y)
                         (Dir_class y)ÆTHEN asm_rewrite_tac[get_spec¨MkDirectoryÆ]);
a(lemma_tac¨y = zÆ);
=TEX
=SML
(* *** Goal "1.1.1" *** *)
a(DROP_NTH_ASM_T 14 ante_tac THEN TOP_ASM_T (rewrite_thm_tac o eq_sym_rule)
	THEN strip_tac); 
a(DROP_NTH_ASM_T 14(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨xÆ,¨yÆ,¨zÆ]));
(* *** Goal "1.1.2" *** *)
a(asm_rewrite_tac[cleanDirectory_def]);
a(cases_tac¨câ2 dominates Dir_class zÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
(* *** Goal "1.1.2.1" *** *)
a(lemma_tac¨y' = z'Æ);
(* *** Goal "1.1.2.1.1" *** *)
a(DROP_NTH_ASM_T 14 ante_tac THEN DROP_NTH_ASM_T 11 ante_tac 
	THEN asm_rewrite_tac[]THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 2(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨y'Æ,¨z'Æ]));
(* *** Goal "1.1.2.1.2" *** *)
a(prove_∂_tac);
a(asm_rewrite_tac[]);
a(bc_tac[deleteRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(∂_tac¨y'Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 5(asm_rewrite_thm_tac o eq_sym_rule));
a(conv_tac eq_sym_conv);
a(bc_tac[deleteRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac
	[´_single,get_spec¨MkDirectoryÆ,dir_components]THEN strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(GET_NTH_ASM_T 2 (rewrite_thm_tac o eq_sym_rule));
a(GET_NTH_ASM_T 6 rewrite_thm_tac);
a(rewrite_tac[cleanDirectory_def,rel_ext_clauses]);
a(cases_tac¨câ2 dominates Dir_class yÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
(* *** Goal "2.1.1" *** *)
a(∂_tac¨y'ÆTHEN asm_rewrite_tac[]);
a(conv_tac eq_sym_conv);
a(bc_tac[deleteRows_lemma] THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.1.2" *** *)
a prove_∂_tac;
a(lemma_tac¨z' = y'Æ);
(* *** Goal "2.1.2.1" *** *)
a(DROP_NTH_ASM_T 12 (asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨z'Æ,¨y'Æ]));
(* *** Goal "2.1.2.2" *** *)
a(asm_rewrite_tac[]);
a(bc_tac[deleteRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac
	[´_single,get_spec¨MkDirectoryÆ,dir_components]THEN strip_tac);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
val €deleteQuery_lemma› = save_pop_thm"deleteQuery_lemma";
=TEX
=GFT HOL output
deleteQuery_lemma =
Ù µ câ1 câ2 s i ns
  ∑ ≥ câ2 dominates câ1
        ± tabExists câ1 (tabFromEffect (DeleteEffect (i, ns))) (repState s)
      ¥ hideR (câ2, repState s)
        = hideR
          (câ2,
              deleteQuery
                  (câ1, destDelete (DeleteEffect (i, ns)), repState s,
                      getTable
                          (tabFromEffect (DeleteEffect (i, ns)))
                          (repState s)))
=TEX
\subsection{Update Lemmas}

=SML
push_goal([],¨µ câ1 câ2 d tc u 
        ∑ câ1 dominates tc ± câ2 dominates tc
	¥ (≥ câ2 dominates câ1 ± isVal(updateField câ1 tc (u, d))
	¥ replaceData câ2 d = replaceData câ2 (destVal(updateField câ1 tc (u, d))))Æ);
a(REPEAT strip_tac);
a(lemma_tac¨≥ câ1 = tcÆ);
(* *** Goal "1" *** *)
a contr_tac;
a(DROP_NTH_ASM_T 4 ante_tac THEN (POP_ASM_T (rewrite_thm_tac o eq_sym_rule))
	THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac[updateField_def]);
a(cases_tac ¨isItem uÆ THEN asm_rewrite_tac[destVal_def]
	THEN POP_ASM_T(strip_asm_tac o rewrite_rule[get_spec¨isItemÆ]) 
	THEN asm_rewrite_tac[≥isVal_giveError_thm]);
a(cases_tac¨Dat_class d dominates câ1Æ
	THEN asm_rewrite_tac[destVal_def,get_spec¨MkDataÆ,≥isVal_giveError_thm]);
a(¥_tac THEN rewrite_tac[replaceData_def]);
a(lemma_tac¨≥ câ2 dominates Dat_class dÆ);
(* *** Goal "2.1" *** *)
a contr_tac;
a(fc_tac[dominates_trans] THEN asm_fc_tac[]);
(* *** Goal "2.2" *** *)
a(asm_rewrite_tac[get_spec¨MkDataÆ]);
val €replaceData_updateField_lemma› = save_pop_thm"replaceData_updateField_lemma";
=TEX
=GFT HOL output
replaceData_updateField_lemma =
 Ù µ câ1 câ2 d tc u
  ∑ câ1 dominates tc ± câ2 dominates tc
      ¥ ≥ câ2 dominates câ1 ± isVal (updateField câ1 tc (u, d))
      ¥ replaceData câ2 d   
	  = replaceData câ2 (destVal (updateField câ1 tc (u, d)))
=TEX
=SML
push_goal([],¨µ câ1 câ2 r t u 
        ∑ câ1 dominates TS_class t ± câ2 dominates TS_class t
	¥ (≥ câ2 dominates câ1 ± isVal(updateRow câ1 (TS_class t) (u, r))
	¥ 	cleanRow câ2 (Snd (cleanColCons câ2 t)) r 
		= cleanRow câ2 (Snd (cleanColCons câ2 t)) 
			(destVal(updateRow câ1 (TS_class t) (u, r))))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T (strip_asm_tac o rewrite_rule[isVal_def]));
a(asm_rewrite_tac[destVal_def]);
a(POP_ASM_T ante_tac THEN rewrite_tac[updateRow_def]);
a(cases_tac¨≥ u ç FunctionalÆ THEN
	cases_tac¨((RelCombine u (R_data r)
                                     ª Graph (updateField câ1 (TS_class t)))
                                   í {x|isError x}) ª Graph destError  = {}Æ
	THEN asm_rewrite_tac[≥giveError_eq_giveVal_thm,giveVal_eq_thm]);
a(rewrite_tac[cleanRow_def,´_thm,get_spec¨MkRowÆ,row_components,rel_ext_clauses,
	filterRow_def,rel_combine_def]);
a(strip_tac THEN asm_rewrite_tac[] THEN REPEAT µ_tac THEN §_T strip_asm_tac);
=TEX
=SML
(* *** Goal "1" *** *)
(* Case split on there being an update for x *)
a(cases_tac¨∂ up ∑ (x,up) ç uÆ);
(* *** Goal "1.1" *** *)
a(DROP_NTH_ASM_T 6(asm_tac o list_µ_elim
	[¨xÆ,¨destVal(updateField câ1 (TS_class t)(up,z))Æ]));
a(LEMMA_T¨≥ (∂ y z
                   ∑ (∂ z'
                       ∑ ((x, Fst z') ç u ± (x, Snd z') ç R_data r)
                           ± z = updateField câ1 (TS_class t) z')
                       ± y = destVal z)
                 ± (x, destVal (updateField câ1 (TS_class t) (up,z))) ç R_data r
               ≤ (∂ z'
               ∑ (∂ z''
                   ∑ ((x, Fst z'') ç u ± (x, Snd z'') ç R_data r)
                       ± z' = updateField câ1 (TS_class t) z'')
                   ± destVal (updateField câ1 (TS_class t) (up,z)) = destVal z')Æasm_tac);
=TEX
=SML
(* *** Goal "1.1.1" *** *)
a(REPEAT strip_tac);
(* *** Goal "1.1.1.1" *** *)
a(∂_tac¨(updateField câ1 (TS_class t) (up, z))ÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(up, z)ÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.1.1.2" *** *)
a(∂_tac¨(updateField câ1 (TS_class t) (up, z))ÆTHEN asm_rewrite_tac[]);
a(∂_tac¨(up, z)ÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.1.2" *** *)
a(DROP_NTH_ASM_T 2 ante_tac THEN POP_ASM_T rewrite_thm_tac THEN ¥_tac);
a(∂_tac¨destVal (updateField câ1 (TS_class t) (up, z))ÆTHEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 8(strip_asm_tac o 
	rewrite_rule[rel_ext_clauses,rel_combine_def]));
a(list_spec_nth_asm_tac 1 [¨xÆ,¨destError(updateField câ1 (TS_class t) (up, z))Æ]);
a(spec_nth_asm_tac 1 ¨(updateField câ1 (TS_class t) (up, z))Æ);
=TEX
=SML
(* *** Goal "1.1.2.1" *** *)
a(strip_asm_tac(µ_elim¨(updateField câ1 (TS_class t) (up, z))Æval_or_error_type));
a(strip_asm_tac(list_µ_elim[¨câ1Æ,¨câ2Æ,¨zÆ,¨TS_class tÆ,¨upÆ]replaceData_updateField_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨cÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(POP_ASM_T (strip_asm_tac o rewrite_rule[] o µ_elim¨(up,z)Æ));
(* *** Goal "1.2" *** *)
a(DROP_NTH_ASM_T 6(ante_tac o list_µ_elim[¨xÆ,¨zÆ])THEN REPEAT strip_tac);
(* *** Goal "1.2.1" *** *)
a(spec_nth_asm_tac 7 ¨Fst z''Æ);
(* *** Goal "1.2.2" *** *)
a(spec_nth_asm_tac 7 ¨Fst z''Æ);
(* *** Goal "1.2.3" *** *)
a(spec_nth_asm_tac 10 ¨Fst z''Æ);
(* *** Goal "1.2.4" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨cÆTHEN asm_rewrite_tac[]);
(* *** Goal "1.2.5" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨cÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(DROP_NTH_ASM_T 5(ante_tac o list_µ_elim[¨xÆ,¨zÆ])THEN asm_rewrite_tac[]
	THEN strip_tac);
(* *** Goal "2.1" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
a(∂_tac¨cÆTHEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(∂_tac¨Snd z''ÆTHEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 10(strip_asm_tac o 
	rewrite_rule[rel_ext_clauses,rel_combine_def]));
a(list_spec_nth_asm_tac 1 [¨xÆ,¨destError(updateField câ1 (TS_class t) z'')Æ]);
a(spec_nth_asm_tac 1 ¨(updateField câ1 (TS_class t) z'')Æ);
(* *** Goal "2.2.1" *** *)
a(strip_asm_tac(µ_elim¨(updateField câ1 (TS_class t) z'')Æval_or_error_type));
a(POP_ASM_T ante_tac THEN LEMMA_T¨z'' = (Fst z'',Snd z'')Æ 
	pure_once_asm_rewrite_thm_tac THEN_LIST[rewrite_tac[],¥_T asm_tac]);
a(strip_asm_tac(list_µ_elim[¨câ1Æ,¨câ2Æ,¨Snd z''Æ,¨TS_class tÆ,¨Fst z''Æ]
	replaceData_updateField_lemma));
a(asm_rewrite_tac[]);
a(∂_tac¨cÆTHEN asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(spec_nth_asm_tac 1 ¨z''Æ);
val €cleanRow_updateRow_lemma› = save_pop_thm"cleanRow_updateRow_lemma";
=TEX
=GFT
cleanRow_updateRow_lemma = 
Ù µ câ1 câ2 r t u
  ∑ câ1 dominates TS_class t ± câ2 dominates TS_class t
      ¥ ≥ câ2 dominates câ1 ± isVal (updateRow câ1 (TS_class t) (u, r))
      ¥ cleanRow câ2 (Snd (cleanColCons câ2 t)) r
        = cleanRow
          câ2
          (Snd (cleanColCons câ2 t))
          (destVal (updateRow câ1 (TS_class t) (u, r)))
=TEX

=SML
push_goal([],¨µ câ1 câ2 s t us ∑ 
	us ç Functional 
	± ≥ câ2 dominates câ1  ± câ1 dominates TS_class t
	± ((RelCombine ((revealRow câ1 t)Á~Í ª us)(ListRel (TS_rows t))
                   ª Graph(updateRow câ1 (TS_class t)))  í {x|isError x})
                                  ª Graph destError = {}
	¥ cleanTable câ2 t = cleanTable câ2 (replaceRows
                   t
                   (RelList
                       (ListRel (TS_rows t)
                           ´ (RelCombine
                               ((revealRow câ1 t)Á~Í ª us)
                               (ListRel (TS_rows t))
                             ª Graph (updateRow câ1 (TS_class t)))
                           ª Graph destVal)
))Æ);
a(REPEAT strip_tac);
a(rewrite_tac[cleanTable_def,replaceRows_def,get_spec¨MkTableSpecÆ]);
a(cases_tac¨câ2 dominates TS_class tÆTHEN 
	asm_rewrite_tac[tab_components,get_spec¨MkTableSpecÆ,cleanColCons_def]);
a(DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac[cleanRows_def,revealRow_def]);
=TEX
=SML
a(lemma_tac¨∂ l ∑ TS_rows t = lÆTHEN_LIST
	[prove_∂_tac,POP_ASM_T rewrite_thm_tac]);
a(REV_LIST_INDUCTION_T¨lÆasm_tac);
(* *** Goal "1" *** *)
a(rewrite_tac[map_def,´_null_thm,rel_list_null_thm]);
(* *** Goal "2" *** *)
a(µ_tac THEN ¥_tac);
a(fc_tac[rel_combine_null_lemma]);
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[] THEN strip_tac);
a(cases_tac¨câ2 dominates R_exist lastÆTHEN 
	cases_tac¨câ1 dominates R_exist lastÆ
	THEN asm_rewrite_tac[] THEN DROP_NTH_ASM_T 3 (fn _ => id_tac));
=TEX
=SML
(* *** Goal "2.1" *** *)
a(cases_tac¨∂ up ∑ (#(Squash (Id (Dom (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r})))),up) ç usÆ);
(* *** Goal "2.1.1" *** *)
a(strip_asm_tac(list_µ_elim[¨câ1Æ,¨lastÆ,¨lÆ,¨upÆ,¨usÆ,¨tÆ]conjunct1_lemma2)
	THEN POP_ASM_T rewrite_thm_tac);
a(lemma_tac¨isVal(updateRow câ1 (TS_class t) (up, last))Æ);
(* *** Goal "2.1.1.1" *** *)
a(strip_asm_tac(µ_elim¨(updateRow câ1 (TS_class t) (up, last))Æval_or_error_type));
a(DROP_NTH_ASM_T 7 (strip_asm_tac o rewrite_rule[rel_ext_clauses,rel_combine_def]));
a(list_spec_nth_asm_tac 1 [¨# l + 1Æ,¨destError(updateRow câ1 (TS_class t) (up, last))Æ]);
a(spec_nth_asm_tac 1 ¨(updateRow câ1 (TS_class t) (up, last))Æ);
a(POP_ASM_T(strip_asm_tac o rewrite_rule[] o µ_elim ¨(up, last)Æ));
(* *** Goal "2.1.1.1.1" *** *)
a(spec_nth_asm_tac 1 ¨#(Squash (Id (Dom (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r}))))Æ);
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[inv_rel_def]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|câ1 dominates R_exist r}Æ]size_Î_one_thm));
(* *** Goal "2.1.1.1.2" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule[list_rel_def,dot_dot_def,
	length_Î_one_thm,nth_length_one_thm]));
=TEX
=SML
(* *** Goal "2.1.1.2" *** *)
a(LEMMA_T¨câ2 dominates R_exist
                         (destVal (updateRow câ1 (TS_class t) (up, last)))Ærewrite_thm_tac);
(* *** Goal "2.1.1.2.1" *** *)
a(POP_ASM_T ante_tac THEN rewrite_tac[updateRow_def]);
a(cases_tac¨≥ up ç FunctionalÆTHEN
	cases_tac¨((RelCombine up (R_data last)
                                 ª Graph (updateField câ1 (TS_class t)))
                               í {x|isError x})
                             ª Graph destError
                           = {}Æ
	THEN asm_rewrite_tac[≥isVal_giveError_thm,destVal_def,get_spec¨MkRowÆ,
	row_components]THEN REPEAT strip_tac);
(* *** Goal "2.1.1.2.2" *** *)
a(strip_asm_tac(list_µ_elim[¨câ1Æ,¨câ2Æ,¨lastÆ,¨tÆ,¨upÆ]
	(rewrite_rule[cleanColCons_def]cleanRow_updateRow_lemma)));
=TEX
=SML
(* *** Goal "2.1.2" *** *)
a(LEMMA_T¨RelCombine
                             ((Squash
                                       (Id
                                           (Dom
                                               (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r}))))Á~Í
                                 ª us)
                             (ListRel (l Î [last]))
	=RelCombine
                             ((Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r|câ1 dominates R_exist r}))))Á~Í
                                 ª us)
                             (ListRel l)Ærewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.1.2.1" *** *)
a(asm_rewrite_tac[squash_Î_thm]);
a(LEMMA_T¨{(# (Squash (Id (Dom (ListRel l  í 
	{r |câ1 dominates R_exist r})))) + 1, # l + 1)}Á~Í
                     ª us = {}Ærewrite_thm_tac);
(* *** Goal "2.1.2.1.1" *** *)
a(rewrite_tac[rel_ext_clauses,inv_rel_def]THEN REPEAT strip_tac);
a(spec_nth_asm_tac 3 ¨yÆ);
a(DROP_NTH_ASM_T 4(fn _ => id_tac));
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|câ1 dominates R_exist r}Æ]size_squash_plus1_thm));
a contr_tac;
a(DROP_NTH_ASM_T 5 ante_tac THEN DROP_NTH_ASM_T 3 ante_tac 
	THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2.1.2" *** *)
a(rewrite_tac[rel_combine_one_lemma]);
(* *** Goal "2.1.2.2" *** *)
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨câ1Æ,¨usÆ,¨tÆ]conjunct1_lemma1));
a(asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2.2" *** *)
a(asm_rewrite_tac[rel_combine_one_lemma,squash_Î_thm]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨câ1Æ,¨usÆ,¨tÆ]conjunct1_lemma1));
a(asm_rewrite_tac[]);
(* *** Goal "2.3" *** *)
a(cases_tac¨∂ up ∑ (#(Squash (Id (Dom (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r})))),up) ç usÆ);
(* *** Goal "2.3.1" *** *)
a(strip_asm_tac(list_µ_elim[¨câ1Æ,¨lastÆ,¨lÆ,¨upÆ,¨usÆ,¨tÆ]conjunct1_lemma2)
	THEN POP_ASM_T rewrite_thm_tac);
a(lemma_tac¨isVal(updateRow câ1 (TS_class t) (up, last))Æ);
(* *** Goal "2.3.1.1" *** *)
a(strip_asm_tac(µ_elim¨(updateRow câ1 (TS_class t) (up, last))Æval_or_error_type));
a(DROP_NTH_ASM_T 7 (strip_asm_tac o rewrite_rule[rel_ext_clauses,rel_combine_def]));
a(list_spec_nth_asm_tac 1 [¨# l + 1Æ,¨destError(updateRow câ1 (TS_class t) (up, last))Æ]);
a(spec_nth_asm_tac 1 ¨(updateRow câ1 (TS_class t) (up, last))Æ);
a(POP_ASM_T(strip_asm_tac o rewrite_rule[] o µ_elim ¨(up, last)Æ));
(* *** Goal "2.3.1.1.1" *** *)
a(spec_nth_asm_tac 1 ¨#(Squash (Id (Dom (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r}))))Æ);
a(POP_ASM_T ante_tac THEN asm_rewrite_tac[inv_rel_def]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|câ1 dominates R_exist r}Æ]size_Î_one_thm));
(* *** Goal "2.3.1.1.2" *** *)
a(POP_ASM_T(strip_asm_tac o rewrite_rule[list_rel_def,dot_dot_def,
	length_Î_one_thm,nth_length_one_thm]));
=TEX
=SML
(* *** Goal "2.3.1.2" *** *)
a(LEMMA_T¨≥ câ2 dominates R_exist
                         (destVal (updateRow câ1 (TS_class t) (up, last)))Ærewrite_thm_tac);
a(POP_ASM_T ante_tac THEN rewrite_tac[updateRow_def]);
a(cases_tac¨≥ up ç FunctionalÆTHEN
	cases_tac¨((RelCombine up (R_data last)
                                 ª Graph (updateField câ1 (TS_class t)))
                               í {x|isError x})
                             ª Graph destError
                           = {}Æ
	THEN asm_rewrite_tac[≥isVal_giveError_thm,destVal_def,get_spec¨MkRowÆ,
	row_components]THEN REPEAT strip_tac);
=TEX
=SML
(* *** Goal "2.3.2" *** *)
a(LEMMA_T¨RelCombine ((Squash
                                       (Id
                                           (Dom
                                               (ListRel (l Î [last])
                                                   í {r|câ1 dominates R_exist r}))))Á~Í
                                 ª us)
                             (ListRel (l Î [last]))
	=RelCombine ((Squash
                                       (Id
                                           (Dom
                                               (ListRel l
                                                   í {r|câ1 dominates R_exist r}))))Á~Í
                                 ª us)
                             (ListRel l)Ærewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.3.2.1" *** *)
a(asm_rewrite_tac[squash_Î_thm]);
a(LEMMA_T¨{(# (Squash (Id (Dom (ListRel l í 
	{r |câ1 dominates R_exist r})))) + 1, # l + 1)}Á~Í
                     ª us = {}Ærewrite_thm_tac);
=TEX
=SML
(* *** Goal "2.3.2.1.1" *** *)
a(rewrite_tac[rel_ext_clauses,inv_rel_def]THEN REPEAT strip_tac);
a(spec_nth_asm_tac 3 ¨yÆ);
a(DROP_NTH_ASM_T 4(fn _ => id_tac));
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨{r|câ1 dominates R_exist r}Æ]size_squash_plus1_thm));
a contr_tac;
a(DROP_NTH_ASM_T 5 ante_tac THEN DROP_NTH_ASM_T 3 ante_tac 
	THEN asm_rewrite_tac[]);
(* *** Goal "2.3.2.1.2" *** *)
a(rewrite_tac[rel_combine_one_lemma]);
(* *** Goal "2.3.2.2" *** *)
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨câ1Æ,¨usÆ,¨tÆ]conjunct1_lemma1));
a(asm_rewrite_tac[]);
(* *** Goal "2.4" *** *)
a(asm_rewrite_tac[rel_combine_one_lemma,squash_Î_thm]);
a(strip_asm_tac(list_µ_elim[¨lÆ,¨lastÆ,¨câ1Æ,¨usÆ,¨tÆ]conjunct1_lemma1));
a(asm_rewrite_tac[]);
val €updateRows_lemma› = save_pop_thm"updateRows_lemma";
=TEX
=GFT HOL output
updateRows_lemma =
 Ù µ câ1 câ2 s t us
  ∑ us ç Functional
	± ≥ câ2 dominates câ1
        ± câ1 dominates TS_class t
        ± ((RelCombine ((revealRow câ1 t)Á~Í ª us) (ListRel (TS_rows t))
                ª Graph (updateRow câ1 (TS_class t)))
              í {x|isError x})
            ª Graph destError
          = {}
      ¥ cleanTable câ2 t
        = cleanTable
          câ2
          (replaceRows
              t
              (RelList
                  (ListRel (TS_rows t)
                      ´ (RelCombine
                          ((revealRow câ1 t)Á~Í ª us)
                          (ListRel (TS_rows t))
                        ª Graph (updateRow câ1 (TS_class t)))
                      ª Graph destVal)))
=TEX
=SML
push_goal([],¨µ câ1 câ2 s i us
        ∑ (≥ câ2 dominates câ1 
	± tabExists câ1 (tabFromEffect (UpdateEffect (i,us))) (repState s)
	± câ1 dominates (TS_class ((getTable(tabFromEffect (UpdateEffect (i,us))))(repState s))))
	¥ hideR (câ2, repState s)
             = hideR(câ2, Fst(updateQuery
                           (câ1, destUpdate(UpdateEffect (i,us)), repState s,getTable 
			(tabFromEffect (UpdateEffect (i,us))) (repState s))))Æ);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac THEN rewrite_tac
	[destInsert_def,tabFromEffect_def,
	getTable_def,rewrite_rule[dom_def]tabExists_def]);
a(REPEAT strip_tac);
a(strip_asm_tac (pure_rewrite_rule[get_spec¨isStateÆ,get_spec¨StateSÆ,ﬂ_def,°_def]
	(µ_elim¨sÆisState_lemma)));
a(strip_asm_tac(list_µ_elim[¨repState sÆ,¨Front iÆ,¨yÆ]at_thm1));
=TEX
=SML
a(LIST_DROP_NTH_ASM_T[4,5,6,7](MAP_EVERY ante_tac) 
	THEN TOP_ASM_T rewrite_thm_tac);
a(REPEAT ¥_tac THEN DROP_NTH_ASM_T 7  ante_tac  THEN 
	rewrite_tac[™_def,get_spec¨IdeLÆ,get_spec¨DirectorySÆ,°_def,∏_def,
	get_spec¨UniverseÆ,rel_ext_clauses,get_spec¨$Æ]THEN strip_tac);
a(asm_fc_tac[]);
a(POP_ASM_T ante_tac THEN rewrite_tac[ﬂ_def,°_def]THEN REPEAT ¥_tac);
a(strip_asm_tac(list_µ_elim[¨Dir_tables yÆ,¨Last iÆ,¨y'Æ]at_thm1));
a(DROP_NTH_ASM_T 5 ante_tac THEN asm_rewrite_tac[] THEN ¥_tac);
a(REPEAT µ_tac);
a(rewrite_tac[updateQuery_def]);
a(conv_tac(MAP_C let_conv));
a(cases_tac¨us ç FunctionalÆ THEN 
	cases_tac¨Dom (ﬁ (Ran us)) Ä {n|∂ c∑ c ç visibleCols câ1 y' ± CS_posn c = n}Æ
	THEN asm_rewrite_tac[]);
a(cases_tac¨((RelCombine ((revealRow câ1 y')Á~Í ª us)(ListRel (TS_rows y'))
                   ª Graph(updateRow câ1 (TS_class y')))  í {x|isError x})
                                  ª Graph destError = {}Æ THEN asm_rewrite_tac[]);
a(asm_rewrite_tac[changeSpec_def,hideR_def,rel_ext_clauses]);
a(REPEAT strip_tac);
=TEX
=SML
(* *** Goal "1" *** *)
a(rewrite_tac[´_single]);
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "1.1" *** *)
a(∂_tac¨MkDirectory(Dir_tables y
                             ´ {(Last i,
                                 replaceRows
                                     y'
                                     (RelList
                                         (ListRel (TS_rows y')
                                             ´ (RelCombine
                                                 ((revealRow câ1 y')Á~Í ª us)
                                                 (ListRel (TS_rows y'))
                                               ª Graph
                                                 (updateRow câ1 (TS_class y')))
                                             ª Graph destVal)))})
                         (Dir_exist y)
                         (Dir_class y)ÆTHEN asm_rewrite_tac[get_spec¨MkDirectoryÆ]);
a(lemma_tac¨y = zÆ);
=TEX
=SML
(* *** Goal "1.1.1" *** *)
a(DROP_NTH_ASM_T 18 ante_tac THEN TOP_ASM_T (rewrite_thm_tac o eq_sym_rule)
	THEN strip_tac); 
a(DROP_NTH_ASM_T 18(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨xÆ,¨yÆ,¨zÆ]));
(* *** Goal "1.1.2" *** *)
a(asm_rewrite_tac[cleanDirectory_def]);
a(cases_tac¨câ2 dominates Dir_class zÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
=TEX
=SML
(* *** Goal "1.1.2.1" *** *)
a(lemma_tac¨y' = z'Æ);
(* *** Goal "1.1.2.1.1" *** *)
a(DROP_NTH_ASM_T 18 ante_tac THEN DROP_NTH_ASM_T 15 ante_tac 
	THEN asm_rewrite_tac[]THEN REPEAT ¥_tac);
a(DROP_NTH_ASM_T 2(asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨y'Æ,¨z'Æ]));
(* *** Goal "1.1.2.1.2" *** *)
a(prove_∂_tac);
a(DROP_NTH_ASM_T 14 ante_tac THEN DROP_NTH_ASM_T 11 ante_tac 
	THEN asm_rewrite_tac[] THEN REPEAT ¥_tac);
a(bc_tac[updateRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "1.1.2.2" *** *)
a(∂_tac¨y'Æ THEN asm_rewrite_tac[]);
a(DROP_NTH_ASM_T 5(asm_rewrite_thm_tac o eq_sym_rule));
a(conv_tac eq_sym_conv);
a(bc_tac[updateRows_lemma] THEN_TRY asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "2" *** *)
a(CASES_T¨x = Front iÆasm_tac);
(* *** Goal "2.1" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[´_single,get_spec¨MkDirectoryÆ,
	dir_components]THEN strip_tac);
a(∂_tac¨yÆTHEN asm_rewrite_tac[]);
a(GET_NTH_ASM_T 2 (rewrite_thm_tac o eq_sym_rule));
a(GET_NTH_ASM_T 6 rewrite_thm_tac);
a(rewrite_tac[cleanDirectory_def,rel_ext_clauses]);
a(cases_tac¨câ2 dominates Dir_class yÆTHEN asm_rewrite_tac
	[get_spec¨MkDirectoryÆ,dir_components]);
a(rewrite_tac[rel_ext_clauses,´_single]);
a(REPEAT µ_tac);
a(cases_tac¨x' = Last iÆTHEN asm_rewrite_tac[]);
a(§_T strip_asm_tac);
=TEX
=SML
(* *** Goal "2.1.1" *** *)
a(∂_tac¨y'ÆTHEN asm_rewrite_tac[]);
a(conv_tac eq_sym_conv);
a(bc_tac[updateRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2.1.2" *** *)
a prove_∂_tac;
a(lemma_tac¨z' = y'Æ);
(* *** Goal "2.1.2.1" *** *)
a(DROP_NTH_ASM_T 16 (asm_tac o rewrite_rule[functional_def]));
a(POP_ASM_T (strip_asm_tac o list_µ_elim[¨Last iÆ,¨z'Æ,¨y'Æ]));
(* *** Goal "2.1.2.2" *** *)
a(asm_rewrite_tac[]);
a(bc_tac[updateRows_lemma] THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(DROP_NTH_ASM_T 3 ante_tac THEN asm_rewrite_tac[´_single,get_spec¨MkDirectoryÆ,
	dir_components]THEN strip_tac);
a(∂_tac¨zÆTHEN asm_rewrite_tac[]);
val €updateQuery_lemma› = save_pop_thm"updateQuery_lemma";
=TEX
=GFT HOL output
updateQuery_lemma =
 Ù µ câ1 câ2 s i us
  ∑ ≥ câ2 dominates câ1
        ± tabExists câ1 (tabFromEffect (UpdateEffect (i, us))) (repState s)
        ± câ1
          dominates TS_class
            (getTable (tabFromEffect (UpdateEffect (i, us))) (repState s))
      ¥ hideR (câ2, repState s)
        = hideR
          (câ2,
              Fst
                  (updateQuery
                      (câ1, destUpdate (UpdateEffect (i, us)), repState s,
                          getTable
                              (tabFromEffect (UpdateEffect (i, us)))
                              (repState s))))
=TEX

\subsection{Proof of Conjunct 1}

=SML
push_goal([],¨µ câ1 câ2 s e
        ∑ ≥ hideR (câ2, repState s) = hideR (câ2, Fst (updateStateR (câ1, e, repState s))) 
	¥ câ2 dominates câ1Æ);
a(REPEAT strip_tac);
a(swap_nth_asm_concl_tac 1);
a(LEMMA_T¨e = (Fst e,Snd e)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],rewrite_tac[updateStateR_def]]);
a(strip_asm_tac(µ_elim ¨Fst eÆ query_type) THEN asm_rewrite_tac[]
	THEN cases_tac¨≥ Snd e = []Æ THEN asm_rewrite_tac[]
	THEN cases_tac¨tabExists câ1 (tabFromEffect (Fst e)) (repState s)Æ 
	THEN asm_rewrite_tac[]
	THEN cases_tac¨≥ câ1 dominates TS_class(getTable (tabFromEffect (Fst e)) 
		(repState s))Æ 
	THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** 3 subgoals - state unchanged for Select  *** *)
(* *** Goal "1" *** *)
(** Insert **)
a(POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T ante_tac);
a(DROP_NTH_ASM_T 5 (strip_asm_tac o rewrite_rule[isInsert_def]));
a(TOP_ASM_T rewrite_thm_tac);
a(LEMMA_T¨i = (Fst i,Snd i)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],¥_T asm_tac]);
a(bc_tac[insertQuery_lemma]THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
(** Delete **)
a(POP_ASM_T (fn _ => id_tac) THEN POP_ASM_T ante_tac);
a(DROP_NTH_ASM_T 5 (strip_asm_tac o rewrite_rule[isDelete_def]));
a(TOP_ASM_T rewrite_thm_tac);
a(LEMMA_T¨d = (Fst d,Snd d)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],¥_T asm_tac]);
a(bc_tac[deleteQuery_lemma]THEN asm_rewrite_tac[]);
=TEX
=SML
(* *** Goal "3" *** *)
(** Update **)
a(POP_ASM_T ante_tac THEN POP_ASM_T ante_tac);
a(DROP_NTH_ASM_T 5 (strip_asm_tac o rewrite_rule[isUpdate_def]));
a(TOP_ASM_T rewrite_thm_tac);
a(LEMMA_T¨u = (Fst u,Snd u)Æ pure_once_asm_rewrite_thm_tac 
	THEN_LIST[rewrite_tac[],REPEAT ¥_tac]);
a(bc_tac[updateQuery_lemma]THEN asm_rewrite_tac[]);
val €conjunct1› = save_pop_thm"conjunct1";
=TEX
=GFT HOL output
conjunct1 =
 Ù µ câ1 câ2 s e
  ∑ ≥ hideR (câ2, repState s)
          = hideR (câ2, Fst (updateStateR (câ1, e, repState s)))
      ¥ câ2 dominates câ1
=TEX

\section{CLOSING DOWN}
The following \Product{} instruction restores the previous proof context.
=SML
pop_pc();
=TEX



\newpage
\HOLindexOff
\input{fef012th.tex}
\HOLindexOn
\newpage
\twocolumn[\section{INDEX} \label{INDEX}]
\small
\printindex

\end{document}
