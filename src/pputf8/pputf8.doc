=TEX
\documentclass[12pt]{article}
\usepackage{ProofPower}
\usepackage{A4}
\title{Compatibility with UTF-8 for {\sf ProofPower}}
\author{Rob Arthan}
\date{14th June 2014}
\begin{document}
\maketitle
\section{Introduction}
This document describes work in progress on making {\Product} compatible with UTF-8
and Unicode.
The {\Product} fonts go back to the early 1990s, when text-processing applications were encouraged
to be ``8-bit clean'', i.e., work properly with characters with codes in the range 128 to 255. The {\Product}
fonts therefore make use of these codes. This approach predates ISO-8859, which encouraged applications
to treat characters with codes in the range 128 to 159 as control characters. Therefore, some text processing
applications either display characters with those codes specially or do not display them at all.
Since the early 2000s, support for UTF-8 character encoding has become the norm on all mainstream
operating systems.

The starting point for compatibility with UTF-8 in {\Product} is the ISO Z standard \cite{ISO02},
which defines Unicode codes for all the symbols needed for the Unicode
mark-up of an ISO Z specification.

\newpage
\bibliographystyle{plain}
\bibliography{fmu}

\appendix
\section{An example of each kind of Z Pararagraph in {\ProductZ}}

The following is not a Z paragraph, but comprises ML commands to establish
a theory in which to load the paragraphs.
=SML
open_theory "z_library";
new_theory "zparas";
set_pc "z_library";
=TEX
\vertbarfalse

Given set paragraph:
πZ
[ €GIVEN_SET› ]
∞
Free type paragraph (the guillemet brackets are optional):
πZ
€FREE_TYPE› ::= €Zero› | €Succ› %<<% FREE_TYPE %>>%
∞
Abbreviation definition paragraph:
πZ
€ABB_DEF› ¶ FREE_TYPE
∞
Fixity paragraph:
πZ
function 10 rightassoc _ Ax _, _ Ax2 _
∞
Axiomatic description paragraph:
πZAX
‹ €_ Ax _› : FREE_TYPE ∏ FREE_TYPE ≠ FREE_TYPE
˜¸¸¸¸¸¸
‹ µx, y : FREE_TYPE∑
‹	Zero Ax y = y
‹ ±	Succ x Ax y = Succ(x Ax y)
∞
In all the boxes, the mark-up for the horizontal and vertical bars is
for visual effect while editing the document and is optional. Here is
an axiomatic description paragraph, in which all the optional mark-up
is omitted in the source.
πZAX
 €_ Ax2 _› : FREE_TYPE ∏ FREE_TYPE ≠ FREE_TYPE
˜¸
 µx, y : FREE_TYPE∑
	Zero Ax2 y = Zero
 ±	Succ x Ax2 y = (x Ax2 y) Ax y
∞

Schema paragraph (without generic parameters, and with optional mark-up omitted in the source):
ˇ €SCHEMA› 
 x, y, z : FREE_TYPE
˜¸
 x Ax y Ax z Ω Zero
à¸
Schema paragraph (with generic parameters):
ˇ €GEN_SCHEMA› [X] ¸¸¸¸¸¸¸¸¸¸¸
‹ x, y, z : X
˜¸¸¸¸¸¸
‹ #{x, y, z} = 2
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸¸
Generic axiomatic description (with optional mark-up in the source):
ù[ X ]úúúúúúúúúúú
‹ €GenAx› : X ∏ X ≠ X ∏ X
˜¸¸¸¸¸¸
‹ µa, b : X∑ GenAx(a, b) = (b, a)
à¸¸¸¸¸¸¸¸¸¸¸¸¸¸
Generic axiomatic description (without optional mark-up in the source):
ù[ X, Y, Z ]
 €GenAx2› : (X ™ Z) ∏ (Y ™ Z) ≠ (X ™ Y)
˜¸¸¸¸¸¸
 µR : X ™ Z; S : Y ™ Z; x : X; y : Y∑
	x ıGenAx2(R, S)ˆ y § (∂z:Z∑ x ıRˆ z ± y ıSˆ z)  
à
(The above shows that underlining an arbitrary expression in {\ProductZ}
makes it behave as an infix relation symbol).
Constraint paragraph:
πZ
‹ GIVEN_SET ç (Ê _) ± #GIVEN_SET < 10
∞
Conjecture paragraph:
πZ
‹ €conjecture› ?Ù [X](µab : X ∏ X∑ GenAx(GenAx ab) = ab)
∞
\newpage
\section{\bf An example of each glyph in the {\Product} extended character set}

The following is an ML comment showing
all the {\Product} extended characters.

=SMLLITERAL
(*
 ± ≤ ≥ ¥ § µ ∂ ∑ „
 ç é ö Ä † ° ¿ £ • ﬁ Â ‰
 ™ ∏ Ì Ú í · Å ª Ö ® © ´
 ﬂ ≠ ˛ ‡ œ Ô è ü û
 ß ¢ Î ã ˘ Ï ˚ ˝ Ç
 º æ ¯ Ω ¶ ∫ Ù ‚
 ¡ ¬ « ƒ ≈ ⁄ »   … À Ã Õ
 Œ ÿ – “ ” ‘ ’ ∆ — Ÿ ◊
 á Ñ ä å ò ê ì ï Ü ô ó
 ñ ÷ Ê Ó  Û Ø ø É ˙ ı ˆ
 π ˇ ù ‹ ˜ à ¸ ú ∞ √ È
 ¨ î ë Ò Æ € › â õ Á Ë Í
*)
=TEX
\section{ML Code to Generate the Conversion Tables}
=TEX
This file generates C header files pputf8tab.h utf8pptab.h
containing definitions of tables mapping ProofPower extended characters
to and from UTF-8 encoded Unicode equivalents.
=SMLLITERAL
structure PPUtf8 = struct
local
structure W = Word;
structure C = SML97BasisLibrary.Char;
structure S = SML97BasisLibrary.String;
in
fun utf8_of_word (w : W.word) : string = (
	S.implode (map (C.chr o W.toInt) (
	if	w <= 0wx7f	(* <= 7 bits *)
	then	[	w]
	else if	w <= 0wx7ff	(* <= 11 bits *)
	then	[	W.orb(0wxc0, W.>>(w, 0wx6)),
			W.orb(0wx80, W.andb(w, 0wx3f))]
	else if	w <= 0wxffff	(* <= 16 bits *)
	then	[	W.orb(0wxe0, W.>>(w, 0wxc)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0), 0wx6)),
			W.orb(0wx80, W.andb(w, 0wx3f))]
	else if	w <= 0wx1fffff	(* <= 21 bits *)
	then	[	W.orb(0wxf0, W.>>(w, 0wx12)),
			W.orb(0wx80, W.>>(W.andb(w, 0wx3f000), 0wxc)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0), 0wx6)),
			W.orb(0wx80, W.andb(w, 0wx3f))]
	else if	w <= 0wx3ffffff	(* <= 26 bits *)
	then	[	W.orb(0wxf8, W.>>(w, 0wx18)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0000), 0wx12)),
			W.orb(0wx80, W.>>(W.andb(w, 0wx3f000), 0wxc)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0), 0wx6)),
			W.orb(0wx80, W.andb(w, 0wx3f))]
	else	[	W.orb(0wxfc, W.>>(w, 0wx1e)),
			W.orb(0wx80, W.>>(W.andb(w, 0wx3f000000), 0wx18)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0000), 0wx12)),
			W.orb(0wx80, W.>>(W.andb(w, 0wx3f000), 0wxc)),
			W.orb(0wx80, W.>>(W.andb(w, 0wxfc0), 0wx6)),
			W.orb(0wx80, W.andb(w, 0wx3f))]))
);


val byte_string_order : string ORDER = (fn s1 => fn s2 =>
	lexicographic (fn c1 => fn c2 => ord c1 - ord c2) (explode s1) (explode s2)
);

val pp_to_utf8_base_translation : ((string * W.word) * string) list = [
	(("-",	0wx002212 ),	"MINUS SIGN"),
	(("≥",	0wx0000AC ),	"NOT SIGN"),
	(("∏",	0wx0000d7 ),	"MULTIPLICATION SIGN"),
	(("á",	0wx000393 ),	"GREEK CAPITAL LETTER GAMMA"),
	(("Ñ",	0wx000394 ),	"GREEK CAPITAL LETTER DELTA"),
	(("ä",	0wx000398 ),	"GREEK CAPITAL LETTER THETA"),
	(("å",	0wx00039b ),	"GREEK CAPITAL LETTER LAMDA"),
	(("ò",	0wx00039e ),	"GREEK CAPITAL LETTER XI"),
	(("ê",	0wx0003a0 ),	"GREEK CAPITAL LETTER PI"),
	(("ì",	0wx0003a3 ),	"GREEK CAPITAL LETTER SIGMA"),
	(("ï",	0wx0003a5 ),	"GREEK CAPITAL LETTER UPSILON"),
	(("Ü",	0wx0003a6 ),	"GREEK CAPITAL LETTER PHI"),
	(("ô",	0wx0003a8 ),	"GREEK CAPITAL LETTER PSI"),
	(("ó",	0wx0003a9 ),	"GREEK CAPITAL LETTER OMEGA"),
	(("¡",	0wx0003b1 ),	"GREEK SMALL LETTER ALPHA"),
	(("¬",	0wx0003b2 ),	"GREEK SMALL LETTER BETA"),
	(("«",	0wx0003b3 ),	"GREEK SMALL LETTER GAMMA"),
	(("ƒ",	0wx0003b4 ),	"GREEK SMALL LETTER DELTA"),
	(("⁄",	0wx0003b6 ),	"GREEK SMALL LETTER ZETA"),
	(("»",	0wx0003b7 ),	"GREEK SMALL LETTER ETA"),
	((" ",	0wx0003b8 ),	"GREEK SMALL LETTER THETA"),
	(("…",	0wx0003b9 ),	"GREEK SMALL LETTER IOTA"),
	(("À",	0wx0003ba ),	"GREEK SMALL LETTER KAPPA"),
	(("Ã",	0wx0003bb ),	"GREEK SMALL LETTER LAMDA"),
	(("Õ",	0wx0003bc ),	"GREEK SMALL LETTER MU"),
	(("Œ",	0wx0003bd ),	"GREEK SMALL LETTER NU"),
	(("ÿ",	0wx0003be ),	"GREEK SMALL LETTER XI"),
	(("–",	0wx0003c0 ),	"GREEK SMALL LETTER PI"),
	(("“",	0wx0003c1 ),	"GREEK SMALL LETTER RHO"),
	(("”",	0wx0003c3 ),	"GREEK SMALL LETTER SIGMA"),
	(("‘",	0wx0003c4 ),	"GREEK SMALL LETTER TAU"),
	(("’",	0wx0003c5 ),	"GREEK SMALL LETTER UPSILON"),
	(("Ÿ",	0wx0003c6 ),	"GREEK SMALL LETTER PHI"),
	(("—",	0wx0003c7 ),	"GREEK SMALL LETTER CHI"),
	(("◊",	0wx0003c9 ),	"GREEK SMALL LETTER OMEGA"),
	(("∆",	0wx0003d5 ),	"GREEK PHI SYMBOL"),
	(("≈",	0wx0003f5 ),	"GREEK LUNATE EPSILON SYMBOL"),
	(("∞",	0wx002588 ),	"FULL BLOCK"),
	(("Î",	0wx002040 ),	"CHARACTER TIE"),
	(("÷",	0wx002102 ),	"DOUBLE-STRUCK CAPITAL C"),
	(("Ó",	0wx002115 ),	"DOUBLE-STRUCK CAPITAL N"),
	(("",	0wx002119 ),	"DOUBLE-STRUCK CAPITAL P"),
	(("Û",	0wx00211a ),	"DOUBLE-STRUCK CAPITAL Q"),
	(("Ø",	0wx00211d ),	"DOUBLE-STRUCK CAPITAL R"),
	(("˙",	0wx002124 ),	"DOUBLE-STRUCK CAPITAL Z"),
	(("≠",	0wx002192 ),	"RIGHTWARDS ARROW"),
	(("™",	0wx002194 ),	"LEFT RIGHT ARROW"),
	(("Í",	0wx002195 ),	"UP DOWN ARROW"),
	(("Á",	0wx002197 ),	"NORTH EAST ARROW"),
	(("Ë",	0wx002198 ),	"SOUTH EAST ARROW"),
	(("Ô",	0wx0021a0 ),	"RIGHTWARDS TWO HEADED ARROW"),
	(("‡",	0wx0021a3 ),	"RIGHTWARDS ARROW WITH TAIL"),
	(("Ì",	0wx0021a6 ),	"RIGHTWARDS ARROW FROM BAR"),
	(("˘",	0wx0021be ),	"UPWARDS HARPOON WITH BARB RIGHTWARDS"),
	(("Ï",	0wx0021bf ),	"UPWARDS HARPOON WITH BARB LEFTWARDS"),
	(("„",	0wx0021d0 ),	"LEFTWARDS DOUBLE ARROW"),
	(("¥",	0wx0021d2 ),	"RIGHTWARDS DOUBLE ARROW"),
	(("§",	0wx0021d4 ),	"LEFT RIGHT DOUBLE ARROW"),
	(("ﬂ",	0wx0021f8 ),	"RIGHTWARDS ARROW WITH VERTICAL STROKE"),
	(("ü",	0wx0021fb ),	"RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE"),
	(("µ",	0wx002200 ),	"FOR ALL"),
	(("∂",	0wx002203 ),	"THERE EXISTS"),
	(("ö",	0wx002205 ),	"EMPTY SET"),
	(("ç",	0wx002208 ),	"ELEMENT OF"),
	(("é",	0wx002209 ),	"NOT AN ELEMENT OF"),
	(("Ö",	0wx002218 ),	"RING OPERATOR"),
	(("±",	0wx002227 ),	"LOGICAL AND"),
	(("≤",	0wx002228 ),	"LOGICAL OR"),
	(("°",	0wx002229 ),	"INTERSECTION"),
	(("¿",	0wx00222a ),	"UNION"),
	(("¶",	0wx00225c ),	"DELTA EQUAL TO"),
	(("Ω",	0wx002260 ),	"NOT EQUAL TO"),
	(("È",	0wx002261 ),	"IDENTICAL TO"),
	(("º",	0wx002264 ),	"LESS-THAN OR EQUAL TO"),
	(("æ",	0wx002265 ),	"GREATER-THAN OR EQUAL TO"),
	(("†",	0wx002282 ),	"SUBSET OF"),
	(("‰",	0wx002283 ),	"SUPERSET OF"),
	(("Ä",	0wx002286 ),	"SUBSET OF OR EQUAL TO"),
	(("Â",	0wx002287 ),	"SUPERSET OF OR EQUAL TO"),
	(("√",	0wx002291 ),	"SQUARE IMAGE OF OR EQUAL TO"),
	(("´",	0wx002295 ),	"CIRCLED PLUS"),
	(("£",	0wx002296 ),	"CIRCLED MINUS"),
	(("Ù",	0wx0022a2 ),	"RIGHT TACK"),
	(("‚",	0wx0022a5 ),	"UP TACK"),
	(("•",	0wx0022c2 ),	"N-ARY INTERSECTION"),
	(("ﬁ",	0wx0022c3 ),	"N-ARY UNION"),
	(("â",	0wx0022ce ),	"CURLY LOGICAL OR"),
	(("õ",	0wx0022cf ),	"CURLY LOGICAL AND"),
	(("¨",	0wx00231c ),	"TOP LEFT CORNER"),
	(("Æ",	0wx00231d ),	"TOP RIGHT CORNER"),
	(("π",	0wx0024c8 ),	"CIRCLED LATIN CAPITAL LETTER S"),
	(("¸",	0wx002500 ),	"BOX DRAWINGS LIGHT HORIZONTAL"),	
	(("‹",	0wx002502 ),	"BOX DRAWINGS LIGHT VERTICAL"),	
	(("ˇ",	0wx00250c ),	"BOX DRAWINGS LIGHT DOWN AND RIGHT"),	
	(("à",	0wx002514 ),	"BOX DRAWINGS LIGHT UP AND RIGHT"),
	(("˜",	0wx00251c ),	"BOX DRAWINGS LIGHT VERTICAL AND RIGHT"),	
	(("ú",	0wx002550 ),  "BOX DRAWINGS DOUBLE HORIZONTAL"),
	(("ù",	0wx002552 ),	"BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE"),	
	(("í",	0wx0025b7 ),	"WHITE RIGHT-POINTING TRIANGLE"),
	(("Ú",	0wx0025c1 ),	"WHITE LEFT-POINTING TRIANGLE"),
	(("˚",	0wx0027e6 ),	"MATHEMATICAL LEFT WHITE SQUARE BRACKET"),
	(("˝",	0wx0027e7 ),	"MATHEMATICAL RIGHT WHITE SQUARE BRACKET"),
	(("œ",	0wx002900 ),	"RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE"),
	(("˛",	0wx002914 ),	"RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE"),
	(("û",	0wx002915 ),	"RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE"),
	(("è",	0wx002916 ),	"RIGHTWARDS TWO-HEADED ARROW WITH TAIL"),
	(("∑",	0wx002981 ),	"Z NOTATION SPOT"),
	(("∫",	0wx002982 ),	"Z NOTATION TYPE COLON"),
	(("®",	0wx002987 ),	"Z NOTATION LEFT IMAGE BRACKET"),
	(("©",	0wx002988 ),	"Z NOTATION RIGHT IMAGE BRACKET"),
	(("›",	0wx00298e ),	"RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER"),
	(("€",	0wx00298f ),	"LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER"),
	(("Ç",	0wx002a04 ),	"N-ARY UNION OPERATOR WITH PLUS"),
	(("ª",	0wx002a3e ),	"Z NOTATION RELATIONAL COMPOSITION"),
	(("·",	0wx002a64 ),	"Z NOTATION DOMAIN ANTIRESTRICTION"),
	(("Å",	0wx002a65 ),	"Z NOTATION RANGE ANTIRESTRICTION"),
	(("ß",	0wx003008 ),	"LEFT ANGLE BRACKET"),
	(("¢",	0wx003009 ),	"RIGHT ANGLE BRACKET"),
	(("ñ",	0wx01d539 ),	"MATHEMATICAL DOUBLE-STRUCK CAPITAL B"),
	(("Ê",	0wx01d53d ),	"MATHEMATICAL DOUBLE-STRUCK CAPITAL F"),
	(("ø",	0wx01d54a ),	"MATHEMATICAL DOUBLE-STRUCK CAPITAL S"),
	(("É",	0wx01d54c ),	"MATHEMATICAL DOUBLE-STRUCK CAPITAL U"),
	(("ı",	0wx00208d ),	"SUBSCRIPT LEFT PARENTHESIS"),
	(("ˆ",	0wx00208e ),	"SUBSCRIPT RIGHT PARENTHESIS"),
	(("¯",	0wx00002d ),	"HYPHEN-MINUS")
];

val pp_to_utf8_tab : (string * string) list = 
	(sort (pair_order byte_string_order byte_string_order) o
		map (fn ((c, w), _) => (c, utf8_of_word w))) 
		pp_to_utf8_base_translation;
=TEX
The following have no Unicode equivalent, but have equivalent
ProofPower forms that do.
=SMLLITERAL
val pp_to_pp_replacement : (string * string) list = 
	map (fn (c, s) => (c, implode (map (lassoc1 pp_to_utf8_tab) (explode s)))) [
	("ã",	"Î/" ),
	("ë",	"¨âSML " ),
	("î",	"¨â: " ),
	("Ò",	"¨âZ ")	
];

=TEX
The following Unicode characters used in the ISO Z standard,
have a suitable ProofPower equivalent that cannot be obtained
just by inverting the base translation (Note that the standard
used what seem to be the wrong double angle brackets, so here
we support both forms).
=SMLLITERAL
val utf8_to_pp_replacement_data : ((W.word * string) * (string * string)) list = [
	((0wx002028,	"πZ" ),
		("LINE SEPARATOR", "Introduces non-box paragraphs")),
	((0wx002199,	"Í" ),
		("SOUTH WEST ARROW", "Terminates superscript")),
	((0wx002196,	"Í" ),
		("NORTH WEST ARROW", "Terminates subscript")),
	((0wx00223c,	"~" ),
		("TILDE OPERATOR", "Relational inverse")),
	((0wx0027ea,	"\037<<\037" ),
		("MATHEMATICAL LEFT DOUBLE ANGLE BRACKET", "Left freetype bracket")),
	((0wx0027eb,	"\037>>\037" ),
		("MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET", "Right free type bracket")),
	((0wx002989,	"(" ),
		("Z NOTATION LEFT BINDING BRACKET", "See Unicode name")),
	((0wx00298a,	")" ),
		("Z NOTATION RIGHT BINDING BRACKET", "See Unicode name")),
	((0wx0029f9,	"\\" ),
		("BIG REVERSE SOLIDUS", "Schema hiding")),
	((0wx00300a,	"\037<<\037" ),
		("LEFT DOUBLE ANGLE BRACKET", "Left freetype bracket")),
	((0wx00300b,	"\037>>\037" ),
		("RIGHT DOUBLE ANGLE BRACKET", " Right free type bracket")),
	((0wx01d538,	"%bbA%" ),
		("MATHEMATICAL DOUBLE-STRUCK CAPITAL A", "Arithmos"))
];

val utf8_to_pp_replacement : (string * string) list =
	map (fn ((w, c), _) => (utf8_of_word w, c)) utf8_to_pp_replacement_data;

val pp_to_utf8 : string array =
	PPArray.arrayoflist
		(map (lassoc1 (pp_to_pp_replacement @ pp_to_utf8_tab))
			(map chr (interval 0 255)));

val utf8_to_pp_tab : (string * string) list =
	(sort (pair_order byte_string_order byte_string_order)) 
		(utf8_to_pp_replacement @ map swap pp_to_utf8_tab);

val hex_of_int : int -> string = Int.fmt StringCvt.HEX;

fun hex_of_char (c : char) : string = (
	let	val i = C.ord c;
	in	hex_of_int (i div 16) ^
		hex_of_int (i mod 16)
	end
);

fun c_hex_char_of_char (c : char) : string = (
	"\\x" ^ hex_of_char c
);

fun c_hex_string_of_string (s : string) : string = (
	implode(map c_hex_char_of_char(S.explode s))
);

fun c_pp_to_utf8 (outfile : string) : unit = (
	let	val strm = open_out outfile;
		fun say s = output(strm, s);
		fun aux i = (
			let	val s = PPArray.sub(pp_to_utf8, i);
				val text = c_hex_string_of_string s;
			in	say "\t\"";
				say text;
				(if	i < 255
				then	(say "\",\n";
					aux (i+1))
				else	say "\"\n")
			end
		);
	in	say (
"/*\n * " ^
 outfile ^ ": automatically generated by utf8.ML.\n * " ^
 Date.toString (Date.fromTimeLocal(Time.now())) ^ "\n" ^
" * Conversion from ProofPower characters to UTF-8 strings is done\n" ^
" * by an indexed lookup in the following array:\n" ^
" */\n");
		say "static const char *pp_to_utf8 [256] = {\n";
		aux 0;
		say "};\n";
		close_out strm
	end
);


fun c_utf8_to_pp (outfile : string) : unit = (
	let	val strm = open_out outfile;
		fun say s = output(strm, s);
		fun aux ((s1, s2) :: more) = (
			let	val text1 = c_hex_string_of_string s1;
				val text2 = c_hex_string_of_string s2;
			in	say "\t{\"";
				say text1;
				say "\", \"";
				say text2;
				(case more of
				 _ :: _	=> 	(
					say "\"},\n";
					aux more
				) | _	=>	say "\"}\n")
			end
		) | aux [] = ();
	in	say (
"/*\n * " ^
 outfile ^ ": automatically generated by utf8.ML.\n * " ^
  Date.toString (Date.fromTimeLocal(Time.now())) ^ "\n" ^
" * Conversion from UTF-8 encoded character to a string of 1 or more\n" ^
" * ProofPower extended characters is done by an associative lookup\n" ^
" * in the following sorted array of records:\n" ^
" */\n" ^
"typedef struct {\n" ^
"\tconst char *utf8_string;\n" ^
"\tconst char *pp_string;} utf8_to_pp_entry;\n");
		say "#define UTF8_TO_PP_LEN ";
		say(string_of_int (length utf8_to_pp_tab));
		say "\nstatic utf8_to_pp_entry utf8_to_pp [UTF8_TO_PP_LEN] = {\n";
		aux utf8_to_pp_tab;
		say "};\n";
		close_out strm
	end
);

val _ =
	if length utf8_to_pp_tab <> length pp_to_utf8_tab + length utf8_to_pp_replacement
	then	diag_line "WARNING: duplicate entries lost from utf8_to_pp_tab"
	else	();

val _ = c_pp_to_utf8 "pputf8tab.h";
val _ = c_utf8_to_pp "utf8pptab.h";

end (* of local ... in ... end *);
end (* of structure PPUtf8 *);
=TEX
\end{document}

