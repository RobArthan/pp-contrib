=IGN
********************************************************************************
wrk071.doc: this file is supplementary material for the ProofPower system

Copyright (c) 2004 Lemma 1 Ltd.

This file is supplied under the GNU General Public Licence (GPL) version 2.

See the file LICENSE supplied with ProofPower source for the terms of the GPL
or visit the OpenSource web site at http://www.opensource.org/

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
$Id$
********************************************************************************
=TEX
\documentclass[12pt]{article}
\usepackage{ProofPower}
\usepackage{A4}
\usepackage{latexsym}
\underscoreoff
\ftaboveboxskip=0.5\abovedisplayskip
\ftbelowboxskip=0.1\belowdisplayskip
\def\ZAxDesLabel{}
\def\ZGenericLabel{}
\def\ZOtherLabel{}
\def\ZSchemaLabel{}
\def\Hide#1{\relax}
\title{The Mutilated Chessboard Theorem in Z}
\author{R.D. Arthan\\Lemma 1 Ltd.\\{\tt rda@lemma-one.com}}
\makeindex
\begin{document}
\maketitle
\begin{abstract}
This note presents a statement and proof of the mutilated chessboard theorem in Z.
The formulation is along the lines of the one proposed by McCarthy for a `heavy duty set theory'' theorem prover.
The theorem and its proof are presented as a Z specification and a series of Z conjectures all of which have been mechanically verified using the {\Product} system.
For the entertainment of the theorem-proving community, we conclude by proposing a rather harder challenge problem.
\end{abstract}

\section{INTRODUCTION}

The mutilated chessboard theorem was proposed over 40 years ago by John McCarthy as a ``tough nut to crack'' for automated reasoning \cite{McCarthy64}.
The theorem is very simple: if a chess board is ``mutilated'' by removing two diagonally opposite corner squares, then the result cannot be tiled with domino-shaped tiles each covering two adjacent squares of the board.
Why is this so?
Well, as each domino covers one white square and one black, any such tiling must cover exactly as many black squares as it does white.
However, the two diagonally opposite corner squares have the same colour, and so the mutilated board contains two more squares of one colour than it does of the other.

A discussion of why this theorem is a challenge for theorem-proving is outside the scope of this note.
However, as McCarthy \cite{McCarthy95} points out, the counting argument given above should be ``admitted in any heavy duty set theory'', i.e., any general purpose theorem-proving system allowing reasoning about sets should be able to handle the proof.
The theorem has indeed been proved in a number of systems including NQTHM \cite{Subramanian94}, Mizar \cite{Bancerek95,Rudnicki95}, Isabelle \cite{Paulson01}.

The Z language \cite{ISO02,Spivey92} provides a convenient notation for set theory.
The {\Product} system \cite{Arthan05} supports specification and proof in Z.
This note presents a formalisation of the mutilated chess board theorem theorem in Z, prepared and checked using {\Product}.
The treatment is in the spirit of \cite{McCarthy95}, which turns out to admit a very concise rendition in Z.

\Hide{
The following ML sets up a context for giving the {\ProductZ} specifications.
=SML
open_theory"z_library";
set_pc"z_library1";
force_delete_theory"mutcb" handle Fail _ => ();
new_theory"mutcb";
=TEX
}
\section{STATEMENT OF THE THEOREM}
\vertbarfalse
{%\catcode`\^^I=\active
\obeyspaces

\gdef\FigureTwo{%
\begin{figure}
\ftaboveboxskip=0.1\abovedisplayskip
\ftbelowboxskip=0.5\belowdisplayskip
\begin{tabular}{|c|}\hline
\begin{minipage}[t]{0.975\hsize}
\ftaboveboxskip=0.1\abovedisplayskip
\ftbelowboxskip=0.5\belowdisplayskip
πZ
‹ €Adjacent› ¶ {x1, x2 : ˙ ∏ ˙ | abs(x1.1 - x2.1) + abs(x1.2 - x2.2) = 1}
∞
πZ
‹ €Domino› ¶ {x:Ê(˙ ∏ ˙) | #x = 2 ± (µx1, x2:x | x1 Ω x2 ∑ (x1, x2) ç Adjacent)}
∞
πZ
‹ €Tiling› ¶ {z:((˙ ∏ ˙)) | z Ä Domino ± (µx, y:z ∑ x = y ≤ x ° y = {})}
∞
πZ
‹ €Board› ¶ (0 .. 7) ∏ (0 .. 7)
∞
πZ
‹ €MutilatedBoard› ¶ Board \ {(0,0), (7,7)}
∞
\end{minipage}
\\\hline
\end{tabular}
\caption{The Specification}
\label{fig2}
\end{figure}%
} % \FigureTGwo
\gdef\FigureOne{%
\begin{figure}
\ftaboveboxskip=0.1\abovedisplayskip
\ftbelowboxskip=0.5\belowdisplayskip
\begin{tabular}{|c|}\hline
\begin{minipage}[t]{0.975\hsize}
πZ
‹ €mutilated_chessboard_thm› ?Ù ≥(∂z: Tiling ∑ ﬁz = MutilatedBoard)
∞
\end{minipage}
\\\hline
\end{tabular}
\caption{Statement of the Theorem}
\label{fig1}
\end{figure}
} %\FigureOne
} %\opeyspaces
Our statement of the theorem is the Z conjecture shown in figure~\ref{fig1}.
It involves the sets, {\em Tiling} and {\em MutilatedBoard} defined along with the sets {\em Adjacent}, {\em Domino} and {\em Board} in the little Z specification shown in figure~\ref{fig2}.
The specification is based on that of \cite{McCarthy95} with some simplifications.
Let us discuss each of the 5 sets in the order of their introduction in figure~\ref{fig2}.
\FigureOne
\FigureTwo


We represent a square on the chessboard as a pair of integers.
Two squares are adjacent iff. the distance between them is 1 (where we can conveniently measure distances using the Manhattan taxi-cab metric).
The set {\em Adjacent} represents this relation.

\Hide{
\footnote{%
A tutorial in the Z notation is outside the scope of this note, but the following points may help the reader:
\begin{itemize}
\item
If $x$ denotes an ordered pair, $(a, b)$, $x.1$ and $x.2$ denote the components, $a$ and $b$, of $x$.
\item
An expression of the form ``%
=INLINEFT
{decs | pred ∑ expr}
=TEX
'' denotes the set whose memebers comprise all values of the expression ``%
=INLINEFT
expr
=TEX
'' as the variables declared by the declarations ``%
=INLINEFT
decs
=TEX
'' range over values satisfying the predicate ``%
=INLINEFT
pred
=TEX
''.
If the part ``%
=INLINEFT
∑ expr
=TEX
'' is omitted, the expression giving the members of the set is inferred from the form of the declarations ``%
=INLINEFT
decs
=TEX
'', e.g., in the definitions of {\em Adjacent} and {\em Tiling} in figure~\ref{fig2}, it is taken to be ``%
=INLINEFT
(x1. x2)
=TEX
'' and ``%
=INLINEFT
z
=TEX
'' respectively.
If the part ``%
=INLINEFT
| pred
=TEX
'' is omitted the predicate is taken to be ``%
=INLINEFT
true
=TEX
''.
\end{itemize}
}
\footnote{%
Z would allow us to use predicate-style notation for membership of sets as McCarthy does, but it is convenient and seems natural to use $\in$ for membership of the sets in this example.
}.
} %\Hide


A domino in some position on the board is represented by the set comprising the two adjacent squares it occupies.
The set of all such sets is our set {\em Domino}.
% We could easily avoid the use of the size function (\#) in this definition (see [Paulson01]).
% However, the definitions are equivalent as is easily proved and the one given is closer to the natural language statement.
Unlike McCarthy, we do not constrain our dominoes to lie on the chessboard, this makes our statement a little more general than his.
(Yes, it is obvious that a tiling that contains dominoes that are not on the board doesn't tile the board, but the whole thing is ``obvious'' so we may as well formalise it as generally as we conveniently can.)

A tiling is a set of dominoes positioned so that no two dominoes overlap.
Our set {\em Tiling} is the set of all such tilings, specified using the obvious and direct translation of that description into set theory.
Paulson \cite{Paulson01} argues that it is good to specify this set using induction.
Certainly an inductive definition will be intuitive to someone whose mode of thinking about such things is to concentrate on the processes whereby they are constructed.
The resulting definition in Z would describe the set {\em Tiling} as the smallest set of domino configurations containing the empty configuration and closed under the operation that adds a non-overlapping domino to a configuration.
This is less general (since it does not allow for infinite tilings) and gives a bias towards an inductive proof, even though there is no induction in the informal proof.

As reflected in the definition of the set {\em Board}, the complete board is to be represented by the set of squares with co-ordinates in the range 0 to 7, which we can write as the cartesian product of the integer interval
=INLINEFT
0 .. 7
=TEX
\ with itself.
The set {\em MutilatedBoard} is then obtained by removing the squares $(0, 0)$ and $(7, 7)$.

With our representation of dominoes, the set of squares covered by a tiling $z$ is the union $\bigcup z$.
So, returning to the conjecture shown in figure~\ref{fig1}, we see that it says there is no tiling that covers the mutilated board.
This is precisely what we want the mutilated chessboard theorem to state.

\section{THE PROOF}\label{proof}

We now given a ``semiformal'' proof of our theorem couched strictly in terms of the Z formalisation.
The semiformal proof comprises rigorous formal statements of a series of lemmas interleaved with narrative explanations of these statements and how they relate.
The lemmas are given as Z conjecture paragraphs.

The informal proof uses the notion of the colour of a square that we have not yet formalised.
The following integer-valued function on the squares represents this notion.

πZAX
‹    €Colour› : ˙ ∏ ˙ ≠ ˙
˜¸¸¸¸¸¸
‹    µx:˙ ∏ ˙ ∑ Colour x = (x.1 + x.2) mod 2
∞

This definition and elementary facts about remainders {\it modulo} 2 imply that the colour of any square is either 0 or 1:

πZ
‹ €ran_colour_thm› ?Ù µu:˙ ∏ ˙ ∑ Colour u ç {0, 1}
∞

The following lemma gives a more explicit characterisation of adjacency saying that two squares are adjacent iff. their eastings differ by 1 and their northings are equal, or vice versa.
It follows from the definition of adjacency and from elementary properties of the absolute value function.

πZ
‹ €adjacent_thm› ?Ù
‹ 	µx1, x2:˙ ∏ ˙ ∑ 
‹		(x1, x2) ç Adjacent
‹ 	§	abs(x1.1 - x2.1) = 1 ± x1.2 = x2.2
‹	≤	abs(x1.2 - x2.2) = 1 ± x1.1 = x2.1
∞

That every domino comprises two squares is wired into our definition of domino.
That these two square have different colours needs to be proved.
Using the definition of the colour function, case analysis given by {\em adjacent_thm} and elementary facts about remainders {\it modulo} 2,
we have that the colours of any two adjacent squares are different:

πZ
‹ €adjacent_colour_thm› ?Ù µu, v:˙ ∏ ˙ | (u, v) ç Adjacent ∑ Colour u Ω Colour v
∞

From the above facts and the definition of {\em Domino}, using elementary facts about sets of cardinality 2, we conclude that every domino comprises two squares, one with colour 0 and one with colour 1.
This is the only fact about dominoes that will be used hereafter.

πZ
‹ €domino_colour_thm› ?Ù 
‹ 	µx:Domino ∑ ∂u, v:x ∑ x = {u, v} ± Colour u = 0 ± Colour v = 1
∞

If $z$ is a tiling then, within the squares it covers, there is a 1-1 correspondence between those coloured 0 and those coloured 1.

πZ
‹ €tiling_colour_thm› ?Ù
‹	µz:Tiling ∑ ∂f:{u:ﬁz | Colour u = 0} è {u:ﬁz|Colour u = 1} ∑ true
∞

The proof of the above is very simple and direct and does not require $z$ to be finite:
using the definition of a tiling together with what we have proved about the colour function and elementary facts about bijections, it is routine to verify that we may take the following definition for a witness:

=GFT
	f = {d:z; u, v:˙ ∏ ˙ | d = {u, v} ± Colour u = 0 ± Colour v = 1 ∑ (u, v)}
=TEX

It follows that if the set of squares covered by a tiling is finite, then the colour function divides it into two subsets of equal size:


πZ
‹ €tiling_colour_size_thm› ?Ù
‹	µz:Tiling | ﬁz ç (Ê_) ∑ #{u:ﬁz | Colour u = 0} = #{u:ﬁz | Colour u = 1}
∞

The proof of the above is immediate from elementary facts about finite cardinalities and the existence of the bijection between the two sets.

We now need to show that the mutilated board is not divided into two equal subsets by the colour function.
To do this, we will first show that the unmutilated board can be so divided, which we can conveniently prove using
{\em tiling_colour_size_thm}.
To apply that lemma, we must show that the unmutilated board is finite:

πZ
‹ €board_finite_thm› ?Ù Board ç (Ê_)
∞
\ldots and that it can be tiled:

πZ
‹ €board_tiling_thm› ?Ù ∂z:Tiling ∑ ﬁz = Board
∞

For the witness in the above lemma, one can observe that
=INLINEFT
{(i, 2*j), (i, 2*j+1)}
=TEX
\ is a domino and that two distinct dominoes of this form cannot overlap and so take:

=GFT
	z = Board ° {i, j : ˙ ∑ {(i, 2*j), (i, 2*j+1)}}
=TEX


Thus we may apply {\em tiling_colour_size_thm} and conclude that the unmutilated board is indeed divided into equal size subsets by the colour function:

πZ
‹ €colours_on_board_thm› ?Ù
‹	#{u:Board | Colour u = 0} = #{u:Board | Colour u = 1}
∞
The mutilated board is obtained by removing two squares of colour 0, and so we have: 

πZ
‹ €colours_on_mutilated_board_thm› ?Ù
‹	#{u:MutilatedBoard|Colour u = 0} = #{u:Board | Colour u = 0} - 2
‹ ±	#{u:MutilatedBoard|Colour u = 1} = #{u:Board | Colour u = 1}
∞

The mutilated chessboard theorem now follows, since {\em tiling_colour_size_thm} says that if a tiling of the mutilated board existed then the colour function would divide the mutilated board into two sets of equal size, whereas {\em colours_on_board_thm} and {\em colours_on_mutilated_board_thm} show this is not the case.

\section{THE MECHANIZED PROOFS}\label{machine}

The source text of this document is actually a script from which all the formal material can be extracted and checked using {\Product}\footnote{%
\raggedright
See {\tt http://www.lemma-one.com/ProofPower/index/} for more information on {\sf ProofPower}.}.
The source text also includes a proof script giving the commands to prove all the conjectures mechanically.
The proof script has not been included in the printed form of the document for brevity (it comprises some 11 pages of ML code).

Case studies like this are useful for pointing up areas in the mathematical library that need more supporting theory.  As Paulson~\cite{Paulson01} points out, finite cardinalities are tricky to reason about. Fortunately, all the groundwork for this had already been done in {\Product} and the present argument only required a few extras. The supporting theory that had to be developed comprised a lemma about absolute values, 4 lemmas about remainders {\em modulo 2} and 6 lemmas about finite cardinalities, see appendix~\ref{supporting} for more details.

The proof of the mutilated chessboard theorem as given in section~\ref{proof} and the proofs of the supporting theory discussed in appendix~\ref{supporting} comprise about 270 and 95 lines of proof commands respectively. The proof script also includes a few dozen lines of ``boiler-plate'', e.g., code to collect statistics on the numbers of inference steps.
The proofs themselves are quite routine.

The specification was originally formulated to correspond very closely with the treatment given in~\cite{McCarthy95} and inductive methods were used for the proofs as in~\cite{Paulson01}.
This was done for comparative reasons with the expectation that the inductive approach was likely to be harder than what we present above.
Including time taken on supporting theory, this approach took about 10 hours' work spread over three afternoons.
The result is longer and more complicated than what we have presented above.

The main complications are that you have to prove that the tilings of interest are finite\footnote{
Even closer to the approach of~\cite{Paulson01} would be to define the set of tilings as an intersection giving the smallest set of domino configurations containing the empty configuration and closed under the operation that adds a non-overlapping domino to a configuration.
This saves having to prove that the resulting tilings are finite, but at the expense of making the specification more complicated and less intuitive and the results less general.
It still results in a longer proof than the one presented above.
}. to justify proof by induction over them and then use induction to prove {\em tiling_colour_size_thm}.
This requires more work in the proof itself and more supporting theory (e.g., to reason about the finiteness of finite powersets).

The proof was then reworked to use the argument given in section~\ref{proof} above.
This amounted to proving what we have called {\em tiling_colour_thm} and using it to replace the relatively long inductive proof of
{\em tiling_colour_size_thm} with a simple derivation based on elementary properties of finite cardinalities.
This took about 2 hours and reduces the amount of supporting theory required to what is presented above.
A final hour or so was then spent simplifying and abbreviating the specification and adopting the proofs to accommodate. 

The de Bruijn factor\footnote{%
This term, due to Freek Wiedijk, denotes the ratio between the size of a formal mathematical text and the size of its informal original.
%
}
for the mutilated chessboard theorem as presented here is, in my opinion, quite good.
The same is true for the NQTHM, Mizar and Isabelle treatments.
To estimate fairly, I feel that one must compare the formal treatment with a reasonably detailed exposition of the discrete mathematics along the lines of section~\ref{proof} above.
For the treatment in this document, the de Bruijn factor turns out to be roughly 3 measured either in terms of A4 pages (6.5:3) or in terms of lines of ML code versus lines of {\LaTeX} source (270:110).

 
\section{CONCLUDING REMARKS}

Further work, of course, remains to be done! Putting aside certain methodological issues in the formalisation, a significant shortfall is that both the informal and the formal accounts deal only with dominoes that lock into place over two adjacent squares of the board.
I.e., both accounts tacitly make a discrete abstraction of what is intuitively a continuous problem.
One must surely consider the possibility of a tiling of the board in which dominoes can be placed at arbitrary positions and orientations.

The more general problem can be reduced to the discrete one, e.g., using the observation that no bounded subset of the plane can be tiled in more than one way using like squares.
Here, by ``tiling'', I mean simply a decomposition into squares whose interiors do not overlap. The tiling is not assumed to have any regularity and two squares may overlap along their boundaries in any way.
To those whose systems support enough real analysis to consider it, I commend the geometric challenge of this reduction as food for thought.


\subsection*{Acknowledgments}
Thanks to Roger Bishop Jones and Larry Paulson for their comments.
\raggedright
\bibliographystyle{plain}
\bibliography{fmu}

\appendix
\section{SUPPORTING THEORY}\label{supporting}
In the narrative in section~\ref{proof} above, we have appealed to elementary properties of the absolute value function, of remainders {\it modulo} 2 and of finite cardinalities.
In this appendix we state the lemmas that were needed in the mechanised proof in addition to what is already provided in {\Product}.

\subsection{Absolute Values}
The absolute value function is not defined in the standard Z toolkit but is available in the {\Product} Z library.
In addition to the existing theorems about it, we need the following:

πZ
‹ €z_abs_eq_1_thm› ?Ù
‹	µi, j:˙ ∑ abs (i - j) = 1 § i < j ± j = i + 1 ≤ j < i ± i = j + 1
∞
The proof is immediate by arithmetic after a case analysis on the sign on the operand allowing the absolute value function to be eliminated.

\subsection{Remainders {\it modulo} 2}
Our first fact about remainders {\it modulo} 2 just specialises an existing theorem characterising remainders modulo $d$ for any non-zero $d$.
The other results are easy consequences of this.
πZ
‹ €z_mod_2_thm› ?Ù µi, j:˙ ∑ i mod 2 = j § j ç {0, 1} ± (∂d:É∑ i = 2*d + j)
∞
πZ
‹ €z_mod_2_thm1› ?Ù µi:˙ ∑ (2*i) mod 2 = 0 ± (2*i + 1) mod 2 = 1
∞
πZ
‹ €z_ran_mod_2_thm› ?Ù µi:˙ ∑ i mod 2 ç {0, 1}
∞
πZ
‹ €z_plus_1_mod_2_thm› ?Ù µi:˙ ∑ ≥i mod 2 = (i + 1) mod 2
∞
\subsection{Finite Cardinalities}
The basics of the theory of finite cardinality are already provided, including the fundamental fact that if $a$ and $b$ are finite sets then $a \cup b$ and $a \cap b$ are also finite and one has $\#(a \cup b) + \#(a \cap b) = \#a + \#b$.
From this material, we derive the following facts:

πZ
‹ €z_size_pair_thm› ?Ù µx, y:É | ≥x = y ∑ {x, y} ç (Ê_) ± #{x, y} = 2
∞
πZ
‹ €z_size_eq_thm› ?Ù µa, b:(Ê_) | a Ä b ± #a = #b ∑ a = b 
∞
πZ
‹ €z_size_2_thm› ?Ù µa:(Ê_) ∑ #a = 2 § (∂x, y:É∑≥x = y ± a = {x, y})
∞
πZ
‹ €z_finite_subset_thm› ?Ù µa:(Ê_); b: É | b Ä a ∑ b ç (Ê_)
∞

The following are the only theorems in this note that are proved by induction.

πZ
‹ €z_size_product_thm› ?Ù µa : (Ê_); b:(Ê_) ∑ a ∏ b ç (Ê_) ± #(a ∏ b) = #a * #b
∞
πZ
‹ €z_finite_size_thm1› ?Ù µa: (Ê_) ∑ (∂f:1 .. #a è a ∑true)
∞


=TEX
\end{document}
\newpage
=TEX
{\HOLindexOff\small
\let\Section\section
\def\section#1{\Section{#1}\label{THEORYLISTING}}
\include{wrk071.th}}

\twocolumn[\section{INDEX}\label{INDEX}]
\printindex
=TEX
\newpage
\section{PROOF SCRIPTS}
\ftlinepenalty=9999
\subsection{Preliminaries}
=SML
val thm_stats : int S_DICT S_DICT ref = ref[];
fun save_pop_thm_stats name = (
	let	val thm = pop_thm();
	in	thm_stats := s_enter name (get_stats()) (!thm_stats);
		init_stats();
		save_thm(name, thm)
	end
);
val _ = (
	init_stats();
	set_flag("profiling", true)
);
=TEX
=SML
val €square_u_thm› = pc_rule1 "z_sets_ext" prove_rule[get_specÒ˙Æ]Ò˙ ∏ ˙ = ÉÆ;
=TEX
=SML
val €adjacent_def› = z_get_specÒAdjacentÆ;
val €board_def› = z_get_specÒBoardÆ;
val €mutilated_board_def› = z_get_specÒMutilatedBoardÆ;
val €domino_def› =
	rewrite_rule[square_u_thm](z_get_specÒDominoÆ);

val €tiling_def› =
	rewrite_rule[square_u_thm](z_get_specÒTilingÆ);
val €colour_def› = z_get_specÒColourÆ;
=TEX
\newpage
\subsection{Supporting Theory}
=TEX
=SML
set_goal([], get_conjecture "-" "z_abs_eq_1_thm");
a(z_µ_tac THEN strip_tac);
a(strip_asm_tac(z_µ_elim Òi + ~jÆ z_˙_cases_thm)
	THEN ALL_FC_T asm_rewrite_tac[z_abs_thm]
	THEN PC_T1 "z_lin_arith" asm_prove_tac[]);
val €z_abs_eq_1_thm› = save_pop_thm_stats "z_abs_eq_1_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_mod_2_thm");
a(z_µ_tac THEN strip_tac);
a(LEMMA_T Ò≥2 = 0Æ asm_tac THEN1 REPEAT strip_tac);
a(ALL_FC_T1 fc_§_canon rewrite_tac
	[rewrite_rule[](conv_rule (MAP_C z_µ_elim_conv) (z_mod_thm))]);
a(REPEAT strip_tac THEN_TRY
	z_∂_tac Òd ∫ ˙Æ THEN PC_T1 "z_lin_arith" asm_prove_tac[]);
val €z_mod_2_thm› = save_pop_thm_stats "z_mod_2_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_mod_2_thm1");
a(z_µ_tac THEN strip_tac);
a(rewrite_tac[z_mod_2_thm]);
a(z_∂_tacÒiÆ THEN REPEAT strip_tac);
val €z_mod_2_thm1› = save_pop_thm_stats "z_mod_2_thm1";
=TEX
=SML
set_goal([], get_conjecture "-" "z_ran_mod_2_thm");
a(contr_tac);
a(fc_tac[
	inst_term_rule [(Òi mod 2Æ, Òj ∫ ˙Æ)]
		(all_µ_elim (hd (fc_canon z_mod_2_thm)))]);
val €z_ran_mod_2_thm› = save_pop_thm_stats "z_ran_mod_2_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_plus_1_mod_2_thm");
a(REPEAT strip_tac);
a(lemma_tac¨∂j∑Ò(i + 1) mod 2 = jÆÆ THEN1 prove_∂_tac);
a(asm_rewrite_tac[] THEN POP_ASM_T ante_tac);
a(rewrite_tac[z_mod_2_thm] THEN REPEAT strip_tac
	THEN all_var_elim_asm_tac1
	THEN all_asm_ante_tac THEN rewrite_tac[] THEN contr_tac);
(* *** Goal "1" duplicates "2" *** *)
a(lemma_tacÒ0 < d - d' < 1 Æ THEN
	PC_T1 "z_lin_arith" asm_prove_tac[]);
val €z_plus_1_mod_2_thm› = save_pop_thm_stats "z_plus_1_mod_2_thm";
val €z_plus_1_mod_2_thm1› =
	conv_rule (ONCE_MAP_C z_anf_conv) z_plus_1_mod_2_thm;
=TEX
=SML
val €z_Ê_¿_singleton_thm1› = z_gen_pred_elim[ÒÉÆ] z_Ê_¿_singleton_thm;
=TEX
=SML
set_goal([], get_conjecture "-" "z_size_pair_thm");
a(z_µ_tac THEN strip_tac);
a(lemma_tacÒ{y} ç (Ê_) ± #{y} = 1Æ THEN1 rewrite_tac[z_size_singleton_thm]);
a(ante_tac (z_µ_elimÒ(x ¶ x, a ¶ {y})Æ z_size_¿_singleton_thm));
a(ante_tac (z_µ_elimÒ(x ¶ x, a ¶ {y})Æ z_Ê_¿_singleton_thm1));
a(asm_rewrite_tac[z_size_singleton_thm]);
a(LEMMA_T Ò{x, y} = {y} ¿ {x}Æ rewrite_thm_tac
	THEN PC_T1 "z_sets_ext" prove_tac[]);
val €z_size_pair_thm› = save_pop_thm_stats "z_size_pair_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_size_eq_thm");
a(PC_T "z_sets_ext" contr_tac
	THEN1 all_asm_fc_tac[]);
a(lemma_tacÒa Ä a ¿ {x1} ± a ¿ {x1} Ä bÆ THEN1
	PC_T1 "z_sets_ext" asm_prove_tac[]);
a(strip_asm_tac (z_µ_elimÒ(x ¶ x1, a ¶ a)Æ z_size_¿_singleton_thm));
a(strip_asm_tac (z_µ_elimÒ(x ¶ x1, a ¶ a)Æ z_Ê_¿_singleton_thm1));
a(strip_asm_tac (z_µ_elimÒ(a ¶ b, b ¶ a ¿ {x1})Æ z_size_mono_thm));
a(PC_T1 "z_lin_arith" asm_prove_tac[]);
val €z_size_eq_thm› = save_pop_thm_stats "z_size_eq_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_size_2_thm");
a(REPEAT strip_tac);
(* *** Goal "1" *** *)
a(PC_T1 "z_sets_ext" lemma_tac Ò≥a = {}Æ
	THEN1 (swap_nth_asm_concl_tac 1 THEN asm_rewrite_tac[z_size_empty_thm]));
a(PC_T1 "z_sets_ext" lemma_tac Ò≥a = {x1}Æ
	THEN1 (swap_nth_asm_concl_tac 2 THEN asm_rewrite_tac[z_size_singleton_thm])
	THEN_TRY all_var_elim_asm_tac1);
a(lemma_tacÒ{x2, x1} ç (Ê_) ± #{x2, x1} = 2Æ THEN1
	ALL_FC_T rewrite_tac[z_size_pair_thm]);
a(LEMMA_TÒ{x2, x1} Ä aÆ asm_tac THEN1
	PC_T1 "z_sets_ext" asm_prove_tac[]);
a(ante_tac (z_µ_elimÒ(a ¶ {x2, x1}, b ¶ a)Æ z_size_eq_thm));
a(asm_rewrite_tac[] THEN REPEAT strip_tac);
a(z_∂_tacÒ(x ¶ x2, y ¶ x1)Æ THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(ALL_FC_T asm_rewrite_tac[z_size_pair_thm]);
val €z_size_2_thm› = save_pop_thm_stats "z_size_2_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_size_product_thm");
a(z_µ_tac THEN strip_tac);
a(z_Ê_induction_tacÒaÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[z_size_empty_thm]);
(* *** Goal "2" *** *)
a(rewrite_tac[
	pc_rule1 "z_library_ext"
		prove_rule[] Ò(a ¿ {x}) ∏ b = (a ∏ b) ¿ ({x} ∏ b)Æ]);
a(lemma_tacÒ(a ∏ b) ° ({x} ∏ b) = {}Æ THEN1
	PC_T1 "z_sets_ext" asm_prove_tac[]);
a(lemma_tacÒ({x} ∏ b) ç (Ê_) ± #({x} ∏ b) = #bÆ);
(* *** Goal "2.1" *** *)
a(LIST_DROP_NTH_ASM_T [1, 2, 3, 4, 5] discard_tac);
a(z_Ê_induction_tacÒbÆ
	THEN1 rewrite_tac[z_size_empty_thm]);
a(rewrite_tac[
	pc_rule1 "z_library_ext"
		prove_rule[] Ò{x} ∏ (b ¿ {x'}) = ({x} ∏ b) ¿ {(x, x')}Æ]);
a(LEMMA_TÒ≥(x, x') ç ({x} ∏ b)Æ asm_tac THEN1
	PC_T1 "z_sets_ext" asm_prove_tac[]);
a(ante_tac (z_µ_elimÒ(x ¶ (x, x'), a ¶ {x} ∏ b)Æ z_size_¿_singleton_thm));
a(ante_tac (z_µ_elimÒ(x ¶ x', a ¶ b)Æ z_size_¿_singleton_thm));
a(ante_tac (z_µ_elimÒ(x ¶ (x, x'), a ¶ {x} ∏ b)Æ z_Ê_¿_singleton_thm1));
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(ante_tac (z_µ_elimÒ(a ¶ a ∏ b, b ¶ {x} ∏ b)Æ z_size_¿_thm));
a(asm_rewrite_tac[z_size_empty_thm]);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
a(ALL_FC_T rewrite_tac[z_size_¿_singleton_thm]);
a(PC_T1 "z_lin_arith" prove_tac[]);
val €z_size_product_thm› = save_pop_thm_stats "z_size_product_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_finite_subset_thm");
a(REPEAT strip_tac);
a(LEMMA_TÒb = a \ {x:a|≥x ç b}Æ once_rewrite_thm_tac
	THEN1 PC_T1 "z_sets_ext" asm_prove_tac[]);
a(ALL_FC_T rewrite_tac[z_Ê_diff_thm]);
val €z_finite_subset_thm› = save_pop_thm_stats "z_finite_subset_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "z_finite_size_thm1");
a(REPEAT strip_tac);
a(z_Ê_induction_tac ÒaÆ);
(* *** Goal "1" *** *)
a(rewrite_tac[z_size_empty_thm] THEN REPEAT strip_tac);
a(z_∂_tacÒ{}Æ THEN PC_T1 "z_library_ext" REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_fc_tac[z_size_¿_singleton_thm, z_size_Ó_thm]);
a(asm_rewrite_tac[]);
a(ALL_FC_T rewrite_tac[conv_rule(ONCE_MAP_C eq_sym_conv) z_dot_dot_¿_thm]);
a(z_∂_tacÒf ¿ {(#a + 1, x)}Æ THEN rewrite_tac[]);
a(bc_thm_tac
	(rewrite_rule[](conv_rule (MAP_C z_µ_elim_conv) (z_¿_è_thm))));
a(asm_rewrite_tac[
	pc_rule1 "z_library_ext" prove_rule[]
		Òµx:É; y:É∑{(x, y)} ç {x} è {y}Æ]);
a(PC_T1 "z_library_ext" REPEAT strip_tac
	THEN all_var_elim_asm_tac1);
val €z_finite_size_thm1› = save_pop_thm_stats "z_finite_size_thm1";
=TEX
\newpage
\subsection{Mutilated Chessboard Proof}
=SML
set_goal([], get_conjecture "-" "ran_colour_thm");
a(rewrite_tac[colour_def,
	rewrite_rule[]z_ran_mod_2_thm]);
val €ran_colour_thm› = save_pop_thm_stats "ran_colour_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "adjacent_thm");
a(z_µ_tac THEN strip_tac THEN rewrite_tac[adjacent_def]);
a(lemma_tacÒabs (x1.1 + ~ x2.1) ç Ó ± abs (x1.2 + ~ x2.2) ç ÓÆ
	THEN1 rewrite_tac[z_abs_Ó_thm]);
a(LEMMA_TÒµi, j:Ó∑
	i + j = 1 § i = 1 ± j = 0 ≤ i = 0 ± j = 1Æ
	(fn th => ALL_FC_T1 fc_§_canon rewrite_tac[th])
	THEN1 PC_T1 "z_lin_arith" prove_tac[]);
a(rewrite_tac[z_abs_eq_0_thm] THEN PC_T1 "z_lin_arith" prove_tac[]);
val €adjacent_thm› = save_pop_thm_stats "adjacent_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "adjacent_colour_thm");
a(rewrite_tac[adjacent_thm, colour_def, z_abs_eq_1_thm]
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(POP_ASM_T (asm_tac o eq_sym_rule) 
	THEN asm_rewrite_tac[]
	THEN conv_tac (ONCE_MAP_C z_anf_conv)
	THEN rewrite_tac[z_plus_1_mod_2_thm1]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[]
	THEN conv_tac (ONCE_MAP_C z_anf_conv)
	THEN conv_tac (RAND_C eq_sym_conv)
	THEN rewrite_tac[z_plus_1_mod_2_thm1]);
(* *** Goal "3" *** *)
a(POP_ASM_T (asm_tac o eq_sym_rule) 
	THEN asm_rewrite_tac[]
	THEN conv_tac (ONCE_MAP_C z_anf_conv)
	THEN rewrite_tac[z_plus_1_mod_2_thm1]);
(* *** Goal "4" *** *)
a(asm_rewrite_tac[]
	THEN conv_tac (ONCE_MAP_C z_anf_conv)
	THEN conv_tac (RAND_C eq_sym_conv)
	THEN rewrite_tac[z_plus_1_mod_2_thm1]);
val €adjacent_colour_thm› = save_pop_thm_stats "adjacent_colour_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "domino_colour_thm");
a(z_µ_tac THEN rewrite_tac[domino_def]
	THEN REPEAT strip_tac);
a(all_fc_tac[z_size_2_thm] THEN1 all_var_elim_asm_tac1);
a(z_spec_nth_asm_tac 2 Ò(x1 ¶ x', x2 ¶ y)Æ);
a(all_fc_tac[adjacent_colour_thm]);
a(strip_asm_tac (z_µ_elimÒx'Æ ran_colour_thm));
(* *** Goal "1" *** *)
a(z_∂_tacÒ(u¶x', v¶y)Æ THEN asm_rewrite_tac[]);
a(strip_asm_tac (z_µ_elimÒyÆ ran_colour_thm));
a(swap_nth_asm_concl_tac 3 THEN asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(z_∂_tacÒ(u¶y, v¶x')Æ THEN asm_rewrite_tac[]);
a(PC_T1 "z_sets_ext" REPEAT strip_tac);
a(strip_asm_tac (z_µ_elimÒyÆ ran_colour_thm));
a(swap_nth_asm_concl_tac 3 THEN asm_rewrite_tac[]);
val €domino_colour_thm› = save_pop_thm_stats "domino_colour_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "board_finite_thm");
a(rewrite_tac[board_def]);
a(lemma_tacÒ0 .. 7 ç (Ê_)Æ
	THEN1 rewrite_tac[z_size_dot_dot_thm1]);
a(all_fc_tac[z_size_product_thm]);
val €board_finite_thm› = save_pop_thm_stats "board_finite_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "tiling_colour_thm");
a(REPEAT strip_tac);
a(z_∂_tacÒ
	{	d:z; u, v:˙ ∏ ˙
	|	d = {u, v} ±
		Colour u = 0 ±
		Colour v = 1
	∑	(u, v) } Æ);
a(rewrite_tac[z_‡_thm1, z_Ô_thm, z_è_def,
	z_≠_thm, z_ﬂ_thm, z_™_thm]);
a(TOP_ASM_T (strip_asm_tac o rewrite_rule[tiling_def]));
a(REPEAT strip_tac);
(* *** Goal "1" duplicates "5" *** *)
a(PC_T1 "z_library_ext" once_rewrite_tac[]);
a(REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(z_∂_tacÒ{(x1, x2), (x3, x4)}Æ THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(z_∂_tacÒ{(x1, x2), (x3, x4)}Æ THEN asm_rewrite_tac[]);
(* *** Goal "2" duplicates "6" *** *)
a(lemma_tacÒ≥{x, y1} ° {x, y2} = {}Æ
	THEN1 PC_T1 "z_sets_ext" prove_tac[]);
a(z_spec_nth_asm_tac 13 Ò(x¶{x, y1}, y¶{x, y2})Æ);
a(POP_ASM_T ante_tac THEN rewrite_tac[
	pc_rule1 "z_sets_ext" prove_rule[]
	Òµa, b:É∑a = b § (µx:É∑x ç a § x ç b)Æ]);
a(STRIP_T (ante_tac o z_µ_elimÒy1Æ));
a(LEMMA_T Ò≥y1 = xÆ rewrite_thm_tac
	THEN1 (contr_tac THEN all_var_elim_asm_tac));
a(DROP_NTH_ASM_T 7 ante_tac THEN asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(PC_T1 "z_library_ext" REPEAT strip_tac);
(* *** Goal "3.1" *** *)
a(z_∂_tacÒ{(x1, x2), y}Æ THEN asm_rewrite_tac[]);
(* *** Goal "3.2" *** *)
a(PC_T1 "z_sets_ext" all_asm_fc_tac[]);
a(all_fc_tac[domino_colour_thm]);
a(z_∂_tacÒvÆ THEN asm_rewrite_tac[]);
a(lemma_tacÒ≥(x1, x2) = vÆ 
	THEN1 (contr_tac
	THEN all_var_elim_asm_tac1
	THEN PC_T1 "z_lin_arith" asm_prove_tac[]));
a(PC_T "z_predicates" all_var_elim_asm_tac1);
a(LEMMA_TÒ(x1, x2) = uÆ asm_rewrite_thm_tac);
a(DROP_NTH_ASM_T 8 strip_asm_tac);
(* *** Goal "4" duplicates "7" *** *)
a(PC_T1 "z_library_ext" REPEAT strip_tac);
(* *** Goal "4.1" *** *)
a(z_∂_tacÒ{x, (x1, x2)}Æ THEN asm_rewrite_tac[]);
(* *** Goal "4.2" *** *)
a(PC_T1 "z_sets_ext" all_asm_fc_tac[]);
a(all_fc_tac[domino_colour_thm]);
a(z_∂_tacÒuÆ THEN asm_rewrite_tac[]);
a(lemma_tacÒ≥(x1, x2) = uÆ 
	THEN1 (contr_tac
	THEN all_var_elim_asm_tac1
	THEN PC_T1 "z_lin_arith" asm_prove_tac[]));
a(PC_T "z_predicates" all_var_elim_asm_tac1);
a(LEMMA_TÒ(x1, x2) = vÆ asm_rewrite_thm_tac);
a(DROP_NTH_ASM_T 8 strip_asm_tac);
(* *** Goal "8" ("5", "6", "7" were duplicates) *** *)
a(lemma_tacÒ≥{x, z'} ° {y, z'} = {}Æ
	THEN1 PC_T1 "z_sets_ext" prove_tac[]);
a(z_spec_nth_asm_tac 7 Ò(x¶{x, z'}, y¶{y, z'})Æ);
a(POP_ASM_T ante_tac THEN rewrite_tac[
	pc_rule1 "z_sets_ext" prove_rule[]
	Òµa, b:É∑a = b § (µx:É∑x ç a § x ç b)Æ]);
a(STRIP_T (ante_tac o z_µ_elimÒxÆ));
a(rewrite_tac[]);
a(LEMMA_T Ò≥x = z'Æ rewrite_thm_tac
	THEN1 (contr_tac THEN all_var_elim_asm_tac));
a(DROP_NTH_ASM_T 4 ante_tac THEN asm_rewrite_tac[]);
val €tiling_colour_thm› = save_pop_thm_stats "tiling_colour_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "tiling_colour_size_thm");
a(REPEAT strip_tac);
a(all_fc_tac[tiling_colour_thm]);
a(lemma_tacÒ{u : ﬁ z | Colour u = 0} Ä ﬁzÆ
	THEN1 PC_T1 "z_sets_ext" prove_tac[]);
a(all_fc_tac[z_finite_subset_thm]);
a(LIST_DROP_NTH_ASM_T [2, 4, 5] discard_tac);
a(all_fc_tac[z_finite_size_thm1, z_size_Ó_thm]);
a(all_fc_tac[get_thm "z_functions1" "z_Ö_è_thm"
	handle Fail _ =>
	get_thm "z_functions1" "z_o_è_thm"]);
a(all_fc_tac[z_Ê_size_thm] THEN asm_rewrite_tac[]);
val €tiling_colour_size_thm› = save_pop_thm_stats "tiling_colour_size_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "board_tiling_thm");
a(lemma_tacÒµi, j:É∑≥2*i = 2*j + 1Æ THEN1
	(contr_tac THEN LEMMA_T
	Ò(2 * i) mod 2 = (2 * j + 1) mod 2Æ ante_tac
	THEN1 asm_rewrite_tac[]
	THEN rewrite_tac[z_mod_2_thm1]));
a(TOP_ASM_T (strip_asm_tac o conv_rule (ONCE_MAP_C eq_sym_conv)));
a(z_∂_tacÒBoard ° {i, j : ˙ ∑ {(i, 2*j), (i, 2*j+1)}}Æ
	THEN rewrite_tac[tiling_def]
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(PC_T "z_sets_ext" strip_tac
	THEN REPEAT strip_tac
	THEN all_var_elim_asm_tac1);
a(rewrite_tac[domino_def, adjacent_thm,
	rewrite_rule[]z_abs_eq_1_thm]);
a(LEMMA_TÒ≥(i, 2 * j) = (i, 2 * j + 1)Æ asm_tac
	THEN1 rewrite_tac[]);
a(ALL_FC_T rewrite_tac[z_size_pair_thm]);
a(REPEAT strip_tac
	THEN_TRY all_var_elim_asm_tac1
	THEN_TRY asm_rewrite_tac[]
	THEN all_asm_ante_tac
	THEN_TRY rewrite_tac[]
	THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_var_elim_asm_tac1);
(* Just stripping gives 64 subgoals here *)
a(POP_ASM_T ante_tac THEN
	LIST_DROP_NTH_ASM_T [5, 6]
	(fn ths => 
	PC_T1 "z_library_ext" REPEAT strip_tac
	THEN_TRY all_var_elim_asm_tac1
	THEN_TRY asm_rewrite_tac[]
	THEN all_asm_ante_tac
	THEN_TRY rewrite_tac ths
	THEN MAP_EVERY asm_tac ths
	THEN REPEAT strip_tac
	THEN_TRY PC_T1 "z_lin_arith" asm_prove_tac[]));
(* *** Goal "3" *** *)
a(rewrite_tac[
	pc_rule1 "z_sets_ext" prove_rule[]
		Ò(µa:É; b:É∑ ﬁ(a ° b) Ä a)
		± (µa:É; b:É∑ a = b § a Ä b ± b Ä a)Æ]);
a(PC_T "z_sets_ext" strip_tac
	THEN rewrite_tac[board_def]
	THEN REPEAT strip_tac);
a(LEMMA_T Òx2 mod 2 = x2 mod 2Æ ante_tac
	THEN1 REPEAT strip_tac);
a(pure_rewrite_tac[z_mod_2_thm]);
a(REPEAT strip_tac
	THEN POP_ASM_T ante_tac
	THEN asm_rewrite_tac[]
	THEN REPEAT strip_tac
	THEN all_var_elim_asm_tac1);
(* *** Goal "3.1" *** *)
a(z_∂_tacÒ{(x1, 2 * d), (x1, 2 * d + 1)}Æ
	THEN rewrite_tac[]);
a(REPEAT strip_tac);
(* *** Goal "3.1.1" *** *)
a(PC_T1 "z_lin_arith" asm_prove_tac[]);
(* *** Goal "3.1.2" *** *)
a(LEMMA_TÒ≥2*d = 2*3+1Æ (strip_asm_tac o rewrite_rule[])
	THEN1 (pure_asm_rewrite_tac[] THEN REPEAT strip_tac));
a(PC_T1 "z_lin_arith" asm_prove_tac[]);
(* *** Goal "3.1.3" *** *)
a(z_∂_tacÒ(i¶x1, j¶d)Æ
	THEN PC_T1 "z_library_ext" asm_rewrite_tac[]);
(* *** Goal "3.2" *** *)
a(z_∂_tacÒ{(x1, 2 * d), (x1, 2 * d + 1)}Æ
	THEN rewrite_tac[]);
a(REPEAT strip_tac);
(* *** Goal "3.2.1" *** *)
a(LEMMA_TÒ≥2*d + 1 = 2*0Æ (strip_asm_tac o rewrite_rule[])
	THEN1 (pure_asm_rewrite_tac[] THEN REPEAT strip_tac));
a(PC_T1 "z_lin_arith" asm_prove_tac[]);
(* *** Goal "3.2.2" *** *)
a(PC_T1 "z_lin_arith" asm_prove_tac[]);
(* *** Goal "3.2.3" *** *)
a(z_∂_tacÒ(i¶x1, j¶d)Æ
	THEN PC_T1 "z_library_ext" asm_rewrite_tac[]);
val €board_tiling_thm› = save_pop_thm_stats "board_tiling_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "colours_on_board_thm");
a(strip_asm_tac board_tiling_thm);
a(lemma_tacÒﬁz ç (Ê_)Æ THEN1
	asm_rewrite_tac[board_finite_thm]);
a(ALL_FC_T (MAP_EVERY ante_tac) [tiling_colour_size_thm]);
a(asm_rewrite_tac[]);
val €colours_on_board_thm› = save_pop_thm_stats "colours_on_board_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "colours_on_mutilated_board_thm");
a(LEMMA_T Ò
	{u : MutilatedBoard | Colour u = 0} =
	{u : Board | Colour u = 0} \ {(0, 0), (7, 7)}
±	{u : MutilatedBoard | Colour u = 1} =
	{u : Board | Colour u = 1}Æ
	rewrite_thm_tac);
(* *** Goal "1" *** *)
a(rewrite_tac[board_def, mutilated_board_def]
	THEN PC_T1 "z_library_ext" REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(swap_nth_asm_concl_tac 2 THEN
	asm_rewrite_tac[colour_def]);
(* *** Goal "1.2" *** *)
a(swap_nth_asm_concl_tac 2 THEN
	asm_rewrite_tac[colour_def]);
(* *** Goal "2" *** *)
a(LEMMA_T Ò{(0, 0), (7, 7)} Ä {u : Board | Colour u = 0}Æ asm_tac);
(* *** Goal "2.1" *** *)
a(PC_T1 "z_sets_ext" rewrite_tac[board_def]);
a(rewrite_tac[colour_def]);
(* *** Goal "2.2" *** *)
a(lemma_tac Ò{u : Board | Colour u = 0} Ä BoardÆ
	THEN1 PC_T1 "z_sets_ext" prove_tac[]);
a(strip_asm_tac board_finite_thm);
a(all_fc_tac[z_finite_subset_thm]);
a(LEMMA_TÒ≥(0, 0) = (7, 7)Æ asm_tac
	THEN1 REPEAT strip_tac);
a(all_fc_tac[z_size_pair_thm]);
a(ante_tac (
	z_µ_elim Ò(a¶{u : Board | Colour u = 0}, b¶{(0, 0), (7, 7)})Æ z_size_diff_thm
)
	THEN asm_rewrite_tac[]);
a(ALL_FC_T asm_rewrite_tac[
	pc_rule1 "z_sets_ext" prove_rule[]
	Òµa, b: É∑ b Ä a ¥ a ° b = bÆ]);
a(PC_T1 "z_lin_arith" prove_tac[]);
val €colours_on_mutilated_board_thm› =
	save_pop_thm_stats "colours_on_mutilated_board_thm";
=TEX
=SML
set_goal([], get_conjecture "-" "mutilated_chessboard_thm");
a(contr_tac);
a(lemma_tacÒﬁz Ä BoardÆ THEN1
	(asm_rewrite_tac[mutilated_board_def]
	THEN PC_T1 "z_sets_ext" prove_tac[]));
a(strip_asm_tac board_finite_thm);
a(all_fc_tac[z_finite_subset_thm]);
a(ALL_FC_T (MAP_EVERY ante_tac) [tiling_colour_size_thm]);
a(ante_tac colours_on_mutilated_board_thm
	THEN asm_rewrite_tac[colours_on_board_thm]);
a(PC_T1 "z_lin_arith" prove_tac[]);
val €mutilated_chessboard_thm› = save_pop_thm_stats "mutilated_chessboard_thm";
=TEX
=SML

=TEX
\newpage
\section{Epilogue}
=TEX
=SML
fun sum_stats s = (switch (fold (op+)) 0 o map snd) s;
val summary_stats = 
	map (Combinators.I ** sum_stats) (!thm_stats);
val total_stats = sum_stats summary_stats;
fun check_conjecture name = (
	if	let	val tm = get_conjecture "-" name;
			val thm = get_thm "-" name;
		in	is_nil (asms thm)
		andalso	tm =$ concl thm
		end	handle Fail _ => false
	then	(delete_conjecture name;
		true)
	else	(diag_line ("Conjecture " ^ name ^ " has not been proved");
		false)
);
if all (map (check_conjecture)
	(map (hd o fst) (get_conjectures "-")))
	(fn x => x)
then	diag_line "All conjectures have been proved."
else	();
=SML
z_output_theory{out_file="wrk071.th.doc", theory="-"};
=TEX
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROOF SCRIPTS END HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROOF SCRIPTS END HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROOF SCRIPTS END HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PROOF SCRIPTS END HERE
=TEX
\end{document}
=IGN
