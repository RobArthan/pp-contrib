=IGN
********************************************************************************
wrk083.doc: this file is supplementary material for the ProofPower system

Copyright (c) 2004 Lemma 1 Ltd.

This file is supplied under the GNU General Public Licence (GPL) version 2.

See the file LICENSE supplied with ProofPower source for the terms of the GPL
or visit the OpenSource web site at http://www.opensource.org/

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
wrk083.doc,v 1.115 2011/02/06 17:42:00 rda Exp
********************************************************************************
=TEX
\documentclass[11pt,a4paper]{article}
\usepackage{latexsym}
\usepackage{ProofPower}
%\usepackage{amsmath} % breaks the index!
\ftlinepenalty=9999
\usepackage{A4}
\makeindex
\title{Mathematical Case Studies: Tools}
\author{Rob Arthan}
%\makeindex
\author{R.D. Arthan \\ Lemma 1 Ltd. \\ rda@lemma-one.com}
\date{\FormatDate{$Date: 2012/05/06 15:17:10 $%
}}

\def\Func#1{\mathsf{#1}}
\def\I{\Func{I}}
\def\K{\Func{K}}
\def\Uncurry{\Func{Uncurry}}
\def\Frees{\Func{frees}}
\def\Constant{\Func{Constant}}
\def\Unary{\Func{Unary}}
\def\Binary{\Func{Binary}}
\def\Parametrized{\Func{Parametrized}}
\def\To{\rightarrow}

\begin{document}
\begin{titlepage}
\maketitle
\begin{abstract}

This document describes some tools that are used in the proofs in the {\Product} Mathematical Case Studies.
\end{abstract}
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd \number\year \\
Reference: LEMMA1/HOL/WRK083; issue 1.115%


\end{centering}
\thispagestyle{empty}
\end{titlepage}
\newpage
\addtocounter{page}{1}
%\section{DOCUMENT CONTROL}
%\subsection{Contents list}
\tableofcontents
%\newpage
%\subsection{Document cross references}
\newpage
\subsection*{To Do}
\begin{itemize}

\item
Think through the packaging of the tools
\item
Add more powerful tools.
\end{itemize}


\bibliographystyle{plain}
\bibliography{fmu}

%%%%
%%%%
%%%%
%%%%
\newpage
\section{INTRODUCTION}
Currently the tools describes some utilities primarily for use in the code of the tools themselves and simple support for proving that an expression denotes a morphism in a concrete category finitely generated by certain given morphism constructors and object constructors.
%%%%
%%%%
\section{UTILITIES}
=SML
fun Ûthm_freesÝ (thm : THM) : TERM list = (
	frees (list_mk_± (concl thm :: asms thm))
);
=TEX
=SML
new_error_message{id = 999001,
	text = "?0 is not of form ?1"};
new_error_message{id = 999002,
	text = "?0 expects a ?1-element argument list"};
new_error_message{id = 999003,
	text = "hd2 expects a list with at least 2 elements"};
fun Ûdest_anyÝ (pattern : TERM, fun_name : string) : TERM -> TERM list = (
	let	val (f, args) = strip_app pattern;
		val arity = length args;
		fun strip_and_check tm = (
			let	val (g, args) = strip_app tm;
				val _ = term_match g f;
			in	if	length args = arity
				then	args
				else	fail "" 0 []
			end	handle Fail _ => (
				term_fail fun_name 999001 [tm, pattern]
			)
		);
	in	strip_and_check
	end
);
=TEX
=SML
fun Ûis_anyÝ (pattern : TERM) : TERM -> bool = (
	let	val dest = dest_any (pattern, "is_any");
	in	fn tm => (dest tm; true) handle Fail _ => false
	end
);
=TEX
=SML
fun Ûmk_anyÝ (pattern : TERM, fun_name : string) : TERM list -> TERM = (
	let	val (f, args) = strip_app pattern;
		val arity_s = string_of_int (length args);
		val ftys = map type_of args;
		fun match_arg_tys i (aty :: more_atys) (fty :: more_ftys) = (
			let	val i = type_match1 i aty fty;
			in	match_arg_tys i more_atys more_ftys
			end
		) | match_arg_tys i [] [] = (i
		) | match_arg_tys _ _ _ = (
			fail fun_name 999002 [fn () => arity_s]
		);
		fun match_and_apply tms = (
			let	val atys = map type_of tms;
				val i = match_arg_tys [] atys ftys;
				val f' = inst [] i f;
			in	list_mk_app (f', tms)
			end
		);
	in	match_and_apply
	end
);
=SML
fun Ûhd2Ý (x :: y :: _ : 'a list) : 'a * 'a = (x, y)
|   hd2 _ = fail "hd2" 999003 [];
=TEX
=SML
=SML
local 
	val old_thy = get_current_theory_name();
	val _ = open_theory"combin";
	val _ = push_pc"basic_hol1";
in
val Ûmk_oÝ : TERM * TERM -> TERM = (
	let	val mk = mk_any (¬(t1 : 'b ­ 'c) o (t2 : 'a ­ 'b)®, "mk_o");
	in	fn (t1, t2) => mk [t1, t2]
	end
);
val Ûdest_oÝ : TERM -> TERM * TERM = (
	let	val dest = dest_any (¬(t1 : 'b ­ 'c) o (t2 : 'a ­ 'b)®, "mk_o");
	in	hd2 o dest
	end
);
val Ûis_oÝ : TERM -> bool = is_any ¬(t1 : 'b ­ 'c) o (t2 : 'a ­ 'b)®;
val _ = open_theory old_thy;
end;
=TEX
\section{PROVING MORPHISMHOOD}
%%%%
%%%%
=TEX
\subsection{Representing $\lambda$-abstractions using first-order combinators}

\subsubsection{The approach: a rewrite system}

We assume given a set of unary operators, binary operators and
parametrized operators (such $x^n$ viewed as an operator on $x$ parametrized by $n$) that are primitive morphisms in some concrete category of interest.
We expect the projections $\pi_i : X_1 \times X_2 \To X_i$ to be included amongst the unary operators.
We also assume give some set of constant elements of selected objects
in the category.

We want to convert a $\lambda$-abstraction whose body is a first-order formula built using the given operators, constants and the pairing operator $\_, \_)$ into an equivalent function expressed using the combinators of a category with binary products.
We do this using the following rewrite system, where $V$ denotes a {\em variable structure}, i.e., $V$ is a pattern formed from variables using pairing (such that each free variable of $V$ appears exactly once in $V$).

\[
\begin{array}{rcl@{\quad\quad}l}
(\lambda V \bullet x) &\leadsto& \pi^V_x
	& \mbox{if $x \in \Frees(V)$} \\
(\lambda V \bullet y) &\leadsto& \K\,y
	& \mbox{if $y \not\in \Frees(V)$} \\
(\lambda V \bullet c) &\leadsto& \K\,c
	& \mbox{if $c \in \Constant$} \\
(\lambda V \bullet (t_1, t_2)) &\leadsto& \langle(\lambda V\bullet t_1), (\lambda V\bullet t_2)\rangle
	&  \\
(\lambda V \bullet f\,t) &\leadsto& f \circ (\lambda V\bullet t)
	& \mbox{if $f \in \Unary$} \\
(\lambda V \bullet g\,t_1\,t_2) &\leadsto& \Uncurry\,g \circ \langle(\lambda V\bullet t_1), (\lambda V\bullet t_2)\rangle
	& \mbox{if $g \in \Binary$} \\
(\lambda V \bullet h\,t\,p) &\leadsto& (\lambda x\bullet h\,x\,p) \circ (\lambda V\bullet t)
	& \mbox{if $h \in \Parametrized$} \\
\end{array}
\]

Here, if $V$ is a varstruct with a free occurrence of the variable $x$,
$\pi^V_x$ denotes the combination of projections which extracts $x$.
For example $\pi^{((z, x), y)}_x$ is $\pi_2 \circ \pi_1$.
As a special case, $\pi^x_x = \I$ and we may simplify $f \circ I$ to $f$.

%Note that if pairing is implemented by taking `,' to be a binary operator
%of type $\alpha \rightarrow \beta \rightarrow \alpha \times \beta$,
%the rule for pairing is subsumed by the rule for binary operators
%together with a simplification rule $\Upsilon (,) = \iota$.
=TEX
\subsubsection{Implementation}

We prove template theorems that support the various clauses of the rewrite system.
=SML
local 
	val old_thy = get_current_theory_name();
	val _ = open_theory"combin";
	val _ = push_pc"basic_hol1";
in

=SML
val Ûi_rule_thmÝ = snd ("i_rule_thm", (
set_goal([], ¬(Ìx· x) = CombI®);
a(rewrite_tac [get_spec¬CombI®]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûo_i_rule_thmÝ = snd ("o_i_rule_thm", (
set_goal([], ¬µf·f o CombI = f®);
a(rewrite_tac [get_spec¬CombI®, get_spec¬$o®]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûk_rule_thmÝ = snd ("k_rule_thm", (
set_goal([], ¬µc· (Ìx· c) = CombK c®);
a(rewrite_tac [get_spec¬CombK®]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûunary_rule_thmÝ = snd ("unary_rule_thm", (
set_goal([], ¬ µf t· (Ìx·f (t x)) = f o t ®);
a(rewrite_tac[o_def]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûpair_rule_thmÝ = snd ("pair_rule_thm", (
set_goal([], ¬ µs t· (Ìx·(s x, t x)) = Pair(s, t)®);
a(rewrite_tac[pair_def, o_def, uncurry_def]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûbinary_rule_thmÝ = snd ("binary_rule_thm", (
set_goal([], ¬ µf s t· (Ìx·f (s x) (t x)) = Uncurry f o Pair(s, t)®);
a(rewrite_tac[pair_def, o_def, uncurry_def]);
pop_thm()
));
=TEX
%%%%

=SML
val Ûbinary_rule_thm1Ý = snd ("binary_rule_thm1", (
set_goal([], ¬ µf c t· (Ìx·f c (t x)) = Uncurry f o Pair ((Ìx·c), t)®);
a(rewrite_tac[pair_def, o_def, uncurry_def]);
pop_thm()
));
=TEX
%%%%
=SML
val Ûparametrized_rule_thmÝ = snd ("parametrized_rule_thm", (
set_goal([], ¬ µf s p· (Ìx·f (s x) p) = (Ìx·f x p) o s®);
a(rewrite_tac[o_def]);
pop_thm()
));
=TEX
=SML

val È_expand_thm : THM = prove_rule[]¬µf· f = Ìz· f z®;

val _ = pop_pc();
val _ = open_theory old_thy;
end (* of local ... in ... end *);
=TEX
%%%%
When we instantiate the template theorems, we want to rename type variables to avoid capture, we use the following utility to help with this.
=SML
fun Ûlist_string_variantÝ (avoid : string list) (ss : string list) : string list = (
	let	fun aux (s, (av, res)) = (
			let	val s' = string_variant av s;
			in	(s'::av, s'::res)
			end
		);
	in	rev(snd (revfold aux ss (avoid, [])))
	end
);
=TEX
%%%%
The derived rule 
=INLINEFT
gen_µ_elim
=TEX
\ is µ-elimination combined with renaming of type variables to avoid capture.
=SML
fun Ûgen_µ_elimÝ (tm : TERM) (thm : THM) : THM = (
	let	val tm_tyvs = term_tyvars tm;
		val (asms, conc) = dest_thm thm;
		val thm_tyvs = term_tyvars (mk_list(conc::asms));
		val thm_tyvs' = list_string_variant tm_tyvs thm_tyvs;
		val thm' = inst_type_rule (combine (map mk_vartype thm_tyvs') (map mk_vartype thm_tyvs)) thm;
	in	µ_elim tm thm'
	end
);
=TEX
The derived rule 
=INLINEFT
all_µ_intro1
=TEX
\ gives the universal closure of a theorem but leaving the free variables
of a specified term free.
=SML
fun Ûall_µ_intro1Ý (tm : TERM) (thm : THM) : THM = (
	let	val fvs = frees tm;
		val bvs = thm_frees thm diff fvs;
	in	list_µ_intro bvs thm
	end
);


=TEX
%%%%
Now
=INLINEFT
morphism\_conv
=TEX
\ implements our rewrite system.
=SML
fun Ûmorphism_convÝ
	{unary : TERM list, binary : TERM list, parametrized : TERM list}
	: CONV = (
	let	val unary_thms = map (fn t => all_µ_intro1 t (gen_µ_elim t unary_rule_thm))
			unary;
		val binary_thms = map (fn t => all_µ_intro1 t (gen_µ_elim t binary_rule_thm))
			binary;
		val binary_thms1 = map (fn t => all_µ_intro1 t (gen_µ_elim t binary_rule_thm1))
			binary;
		val parametrized_thms = map (switch gen_µ_elim parametrized_rule_thm)
			parametrized;
		val i_conv = simple_eq_match_conv i_rule_thm;
		val k_conv = simple_eq_match_conv k_rule_thm;
		val pair_conv = simple_ho_eq_match_conv pair_rule_thm;
		val unary_conv = FIRST_C (map simple_ho_eq_match_conv1 unary_thms)
			handle Fail _ => fail_conv;
		val binary_conv = FIRST_C (map simple_ho_eq_match_conv1 (binary_thms @ binary_thms1))
			handle Fail _ => fail_conv;
		val parametrized_conv = FIRST_C (map simple_ho_eq_match_conv1 parametrized_thms)
			handle Fail _ => fail_conv;
		val simp_conv = simple_eq_match_conv o_i_rule_thm;
		val rec rec_conv = (fn t =>
			((i_conv ORELSE_C
			k_conv ORELSE_C
			(pair_conv THEN_C RAND_C(RANDS_C(TRY_C rec_conv))) ORELSE_C
			(unary_conv THEN_TRY_C RIGHT_C rec_conv) ORELSE_C
			(binary_conv THEN_C RIGHT_C (RAND_C(RANDS_C (TRY_C rec_conv)))) ORELSE_C
			(parametrized_conv THEN_C RIGHT_C (TRY_C rec_conv)))
				AND_OR_C simp_conv) t
		);
	in	Ì_unpair_conv AND_OR_C rec_conv
	end
);
=TEX
=TEX
\subsection{A Generic Tactic Interface}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Now we build the basic morphismhood tactic.
It expects a goal of the form
=INLINEFT
f  (X, Y) Morphism
=TEX
.
The tactic begins by È-expanding $f$ if it not already an abstraction.
=SML

val  ÛÈ_expand_convÝ : CONV = (fn tm => (
	if	is_Ì tm
	then	fail_conv
	else	simple_eq_match_conv È_expand_thm) tm);

=TEX
The theorem is parametrized by a list of theorems that are used
as an initial set of rewrite rules. For convenience, we convert
any paired abstractions in these theorems into simple abstractions,
which makes them more general as rewrite rules.
=SML

val Ûunpair_rewrite_tacÝ : THM list -> TACTIC = 
	rewrite_tac o map (conv_rule (TRY_C (MAP_C Ì_unpair_conv)));
=TEX
Now the tactic. After the È-expansion and rewriting discussed above,
it converts the function into combinator form.
It then goes through a cycle of backchaining with implicative facts
applying the supplied tactic to guess
existential witnesses, then stripping and rewriting with the basic facts.
=SML
fun Ûbasic_morphism_tacÝ
	{
		unary : TERM list,
		binary : TERM list,
		parametrized : TERM list,
		facts : THM list,
		witness_tac : TACTIC} : THM list -> TACTIC = (
	let	val m_conv = morphism_conv {unary = unary, binary = binary, parametrized = parametrized};
		val is_rule = is_´ o snd o strip_µ o concl;
		val rule_thms = facts drop (not o is_rule);
		val axiom_thms = facts drop is_rule;
	in	fn rw_thms =>
			TRY (conv_tac (LEFT_C È_expand_conv))
		THEN	TRY (unpair_rewrite_tac rw_thms)
		THEN	conv_tac (LEFT_C m_conv)	
		THEN 	(REPEAT o CHANGED_T) (
				(TRY o bc_tac) rule_thms
			THEN	TRY witness_tac
			THEN	REPEAT strip_tac
			THEN	(TRY o rewrite_tac) axiom_thms)
	end
);
=TEX
The following constructs witnesses to objecthood using a supplied list of object constructors based on the type of the desired witness.
Each object constructor is given with a list of type variables that are not to be instantiated in the search for a witness.
=SML
fun Ûobject_by_typeÝ (ocs : (string list * TERM) list) : TYPE -> TERM = (
	let	fun preprocess acc [] = acc
		|   preprocess acc ((tvs, oc) :: more) = (
			let	val rev_tys = rev(strip_­_type (type_of oc));
				val res_ty = hd (rev_tys);
				val tysubs0 = map (fn tv => (mk_vartype tv, mk_vartype tv)) tvs;
				val arg_tys = rev (tl rev_tys);
			in	preprocess ((res_ty,  (oc, tysubs0, arg_tys)) :: acc) more
			end
		);
		val table = preprocess [] ocs;
		fun solve [] ty = fail "object_by_type" 1005 []
		|   solve ((res_ty, (oc, tysubs0, arg_tys)) :: more) ty = (
			let	val recur = solve table;
				val tysubs = type_match1 tysubs0 ty res_ty;
				val args = map (recur o inst_type tysubs) arg_tys;
				val ioc = inst [] tysubs oc;
			in	list_mk_app(ioc, args)
			end	handle Fail _ => solve more ty
		);
	in	solve table
	end
);
=TEX
%%%%

In the following, the list of strings with each object constructor is a list of type variables that are not to be instantiated when matching with this constructor. Typically these would be type variables appearing in the type of something which is an object by dint of an assumption of the goal.

=SML
fun Û¶_object_by_type_tacÝ (ocs : (string list * TERM) list) : TACTIC = (
	let	val witness_by_type = object_by_type ocs;
	in	fn gl as (_, conc) => 
		let	val (x, _) = dest_simple_¶ conc;
		in	(simple_¶_tac o witness_by_type o type_of) x gl
		end
	end
);

=TEX
=TEX
\end{document}
=IGN
