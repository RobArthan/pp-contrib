=IGN
********************************************************************************
wrk068.doc: this file is supplementary material for the ProofPower system

Copyright (c) 2004 Lemma 1 Ltd.

This file is supplied under the GNU General Public Licence (GPL) version 2.

See the file LICENSE supplied with ProofPower source for the terms of the GPL
or visit the OpenSource web site at http://www.opensource.org/

Contact: Rob Arthan < rda@lemma-one.com >
********************************************************************************
=IGN
pp_make_database -f -p hol maths_egs
docsml wrk068
xpp wrk068.doc -d maths_egs -i wrk068 &
doctex wrk068 wrk068.th; texdvi -b wrk068; texdvi wrk068; texdvi wrk068
=TEX
\documentclass[11pt,a4paper]{article}
\usepackage{latexsym}
\usepackage{ProofPower}
\ftlinepenalty=9999
\usepackage{A4}
\def\N{\mathbb{N}}
\def\D{\mathbb{D}}
\def\B{\mathbb{B}}
\def\R{\mathbb{R}}
\def\Z{\mathbb{Z}}
\def\Q{\mathbb{Q}}
\def\Lim{\mbox{{\sf lim}}}
\def\LimInf{\mbox{{\sf lim inf}}}
\def\LimSup{\mbox{{\sf lim sup}}}

\def\ExpName{\mbox{{\sf exp}}}
\def\Exp#1{\ExpName(#1)}

\def\LogName{\mbox{{\sf log}}}
\def\Log#1{\LogName(#1)}

\def\SinName{\mbox{{\sf sin}}}
\def\Sin#1{\SinName(#1)}

\def\CosName{\mbox{{\sf cos}}}
\def\Cos#1{\CosName(#1)}

\def\Abs#1{|#1|}

\tabstop=0.4in
\def\ThmsI#1{%
{\vertbarfalse#1}}

\def\ThmsII#1#2{%
{\vertbarfalse
\begin{minipage}[t]{0.48\hsize}
#1
\end{minipage}
\begin{minipage}[t]{0.48\hsize}
#2
\end{minipage}}}

\def\ThmsIII#1#2#3{%
{\vertbarfalse
\begin{minipage}[t]{0.32\hsize}
#1
\end{minipage}
\begin{minipage}[t]{0.32\hsize}
#2
\end{minipage}
\begin{minipage}[t]{0.32\hsize}
#3
\end{minipage}}}

\def\Hide#1{\relax}

\makeindex
\title{Mathematical Case Studies: \\ --- \\ Some Group Theory}
\author{Rob Arthan}
\makeindex
\author{R.D. Arthan \\ Lemma 1 Ltd. \\ rda@lemma-one.com}
\date{\FormatDate{$Date: 2004/05/06 19:29:24 $%
}}

\begin{document}
\begin{titlepage}
\maketitle
\begin{abstract}
This {\ProductHOL} script contains definitions and proofs concerning
the elements of group theory.
What is currently covered is what is covered in the first chapter of any good text on the subject:
in preparation for the introduction of quotient groups, we begin with a purely set-theoretical study of equivalence relations and the quotient of a set with respect to an equivalence relation.
This is followed by the definitions of the concepts of group, homomorphism between groups, subgroup, normal subgroup, kernel of a homomorphism, congruence modulo a subgroup, coset of a subgroup, and quotient group.
We exhibit a few examples of groups and show that the various abstract notions lead to the expected theorems: e.g., that the quotient group construction is consistent and does indeed give rise to a group.

\end{abstract}
\vfill
\begin{centering}

\bf Copyright \copyright\ : Lemma 1 Ltd \number\year \\
Reference: LEMMA1/HOL/WRK068; issue $Revision: 1.16 $%


\end{centering}
\thispagestyle{empty}
\end{titlepage}
\newpage
\addtocounter{page}{1}
%\section{DOCUMENT CONTROL}
%\subsection{Contents list}
\tableofcontents
%\newpage
%\subsection{Document cross references}

\subsection*{To Do}
\begin{itemize}

\item
Implement the proposed extension to the {\ProductHOL} concrete syntax to allow infix operators with a parameter and see how it works out.
\item
Prove a lot more results! The next in line might be the three isomorphism theorems,
the Cayley representation theorems etc., etc., etc.

\item
Extend the examples.

\item
Compare with other approaches (e.g., Elsa Gunter's).

\end{itemize}

{\raggedright
\bibliographystyle{fmu}
\bibliography{fmu}
} %\raggedright
%%%%
%%%%
%%%%
%%%%
\newpage
\section{INTRODUCTION}
%%%%
%%%%
%%%%
%%%%
This document gives specifications and proofs relating to group theory.
It includes a theory of equivalence relations to support the construction of quotient groups.
This is part of a series of case studies in formalising some basic pure  mathematics in {\ProductHOL}.
Other parts of the case study deal with real analysis \cite{LEMMA1/HOL/WRK066} and with topology \cite{LEMMA1/HOL/WRK067}.

While the mathematical content of this document is very elementary, it does raise some interesting points about how to formalise abstract algebraic theory in polymorphic simple type theory.
We want the abstract theory to be readable, general and easy to develop, we also want it to be easy to apply to specific examples.

Substructures and quotient structures in algebra are very important, so it is vital to deal smoothly with subgroups and quotient groups.
Taken verbatim, the traditional explication of these concepts in set theory leads to significant notational and semantic difficulties.
The problem is this: in doing the general theory, an expression like $x.y$ denoting the product of two elements of a group $G$ actually contains three variables: the group elements `$x$', `$y$', and the multiplication operator `$.$'.
Syntactic tricks allow one to preserve something like the traditional infix notation for such expressions.
But there is a semantic problem when we need to deal with subgroups: according to the traditional account, the `$.$', in $x.y$ will denote a different set-theoretic function in $H$ from what it does in $G$.  Coercing operations from subgroup to containing group or from one subgroup to another becomes an excessive burden.

Our solution to this problem is to formulate all  definitions relative to some carrier set of interest in such a way that the behaviour of operators or properties outside the carrier set is irrelevant.
We advocate this approach in general for dealing with algebraic structures.
The apparent extra complication actually achieves an economy, because when you are working with substructures, the operators and properties can all be those of the containing structure: you have no need to restrict them to the substructures or to worry about coercing the operations of one substructure into the operations of another.
{\it Pace} Quine \cite[article on ``Mathematosis'']{Quine87}, it is actually counter-productive to define the concept of a group so that the carrier set can be recovered from the set that represents the multiplication.

As an example, we define the operations on a group $G$ to be total functions on the universe of the type of its elements whose behaviour outside the carrier set of $G$ is immaterial.
We require the operations on a subgroup $H$ of $G$ to  be represented by the same total functions.
This involves no loss of generality and removes a great deal of complexity in both specifications and proofs.

This document is a {\Product} literate script. It contains all the metalanguage (ML) commands required to create three theories, populate them with the formal definitions and prove and record all the theorems.
The three theories,  ``equiv\_rel'', ``groups'' and ``group\_egs'' are described in sections~\ref{equivrel}, ~\ref{groups} and ~\ref{groupegs} respectively.
The descriptions include all the formal definitions in the Z-like concrete syntax for specification in {\ProductHOL}.
and a discussion of the theorems that have been proved about the objects specified.
To keep our use of the {\Product} document preparation system simple, in this discussion we identify the theorems by name and refer the reader to the theory listings in sections~\ref{Theory1},~\ref{Theory2} and~\ref{Theory3} for the formal statements of the theorems.
There is an index to the formal definitions and the theory listings in section~\ref{index}.

%%%%
%%%%
%%%%
%%%%
\section{EQUIVALENCE RELATIONS}\label{equivrel}
The construction of quotient groups is very important in group theory and so introductory texts on the subject often begin with a review of the set-theoretic notions that support this construction, {\it viz.} the notion of the quotient of a set by an equivalence relation.
This section contains our formal development of this material.

John Harrison \cite{Harrison96} and Peter Homeier \cite{Homeier01} have both produced powerful metalanguage tools for automating such constructions when a new HOL type is introduced as a quotient set.
However, these tools do not fit the case in question: we will only wish to construct new types for specific quotient constructions: when we are doing general theory everything in view is a variable including the set of sets representing a quotient group.

Larry Paulson \cite{Paulson04} has pointed out that there are advantages in providing a lemma library to support quotient constructions rather than metalanguage tools.
In particular, Paulson notes that if we use a lemma library, ``we are not restricted to top-level  properties, but can reason about equivalence classes in a larger proof''.
This is precisely what happens in our development of elementary group theory.
This section presents the definitions and results that make up the lemma library.
The mathematics is entirely trivial: the point in formulating the theorems is not for their intrinsic interest, but to provide templates for carrying out quotient constructions in larger proofs.

\subsection{Technical Prelude}

First of all, we must give the the ML commands to  introduce the new theory ``equiv\_rel'' as a child of the theory ``orders'' of ordered sets (whence comes our definition of transitivity,
see \cite{LEMMA1/HOL/DTD115}).


=SML
force_delete_theory"equiv_rel" handle Fail _ => ();
open_theory"orders";
set_merge_pcs["basic_hol1", "'sets_alg"];
new_theory"equiv_rel";
=TEX
%%%%
%%%%
%%%%
%%%%

%%%%
%%%%
%%%%
%%%%
\subsection{The Definitions}
We need to define the notion of an equivalence relation, i.e., a binary relation that is transitive, reflexive and symmetric.
Transitivity is defined elsewhere, but we now need the notions of reflexivity and symmetry.
We follow the theory of orders in making these notions properties of set-relation pairs.
We will often use the infix symbol
=INLINEFT
¦
=TEX
\ as a variable ranging over binary relations. This symbol appears preceded by a `\$' where infix notation is not being used.
=SML
declare_infix(210, "¦");
¹HOLCONST
Ü ÛReflÝ : ('a SET ¸ ('a ­ 'a ­ BOOL)) ­ BOOL
÷üüüüüü
Ü µ X $¦· Refl(X, $¦) ¤ µx·x  X ´ x ¦  x
°
¹HOLCONST
Ü ÛSymÝ : ('a SET ¸ ('a ­ 'a ­ BOOL)) ­ BOOL
÷üüüüüü
Ü µ X $¦· Sym(X, $¦) ¤ µx y·x  X ± y  X ± x ¦  y ´ y ¦ x
°
An equivalence relation on a set $X$ is then one which is reflexive, symmetric and transitive on $X$.
In the traditional explication of mathematics as set theory, one requires an equivalence relation on a set $X$ to be restricted to $X$. Instead, we prefer to ignore the behaviour of the relation outside $X$.

This means that an equivalence relation on a set $X$ is, as it stands, an equivalence relation on any subset of $X$.
This works well in the formal treatment and works well informally too.
For example, the relation that holds between two numbers $x$ and $y$ when $x - y$ is an integer, is an equivalence relation on any subset of the real numbers.
There seems to be no conceptual or practical gain in treating such a relation as having  a different set-theoretic representation for different subsets.

¹HOLCONST
Ü ÛEquivÝ : ('a SET ¸ ('a ­ 'a ­ BOOL)) ­ BOOL
÷üüüüüü
Ü µ X $¦· Equiv(X, $¦) ¤ Refl(X, $¦) ± Sym(X, $¦) ± Trans(X, $¦)
°
Now we can define the notions of equivalence class and the quotient set (which is the set of all equivalence classes).
There is no need to stipulate that relations be equivalence relations in these definitions, that is done in the  statements of the theorems about them.
We arrange things so that if
=INLINEFT
¦
=TEX
\ is an equivalence relation on $X$, the function
=INLINEFT
EquivClass(X, $¦)
=TEX
\ is the projection of $X$ onto the quotient set.

¹HOLCONST
Ü ÛEquivClassÝ : ('a SET ¸ ('a ­ 'a ­ BOOL)) ­ 'a ­ 'a SET
÷üüüüüü
Ü µ X $¦ x· EquivClass(X, $¦) x = {y | y  X ± x ¦ y}
°

¹HOLCONST
Ü ÛQuotientSetÝ : 'a SET ­ ('a ­ 'a ­ BOOL) ­ 'a SET SET
÷üüüüüü
Ü µ X $¦· QuotientSet X ($¦) = {A | ¶x· x  X ± A = EquivClass(X, $¦) x}
°

We adopt Paulson's notation, writing
=INLINEFT
X//¦
=TEX
\ for the quotient set.
Since we want to use the same notation for other things, we introduce it as an alias, so that it can be overloaded later.

=SML
declare_infix(300, "//");
declare_alias("//", ¬QuotientSet®);
=TEX
We say a function $f$ respects an equivalence relation
=INLINEFT
¦
=TEX
\ on $X$, iff. the function does not distinguish between related values:

=SML
declare_infix(200, "Respects");
=TEX
¹HOLCONST
Ü Û$RespectsÝ : ('a ­ 'b) ­ ('a ­ 'a ­ BOOL) ­ 'a SET ­ BOOL
÷üüüüüü
Ü µ f $¦ X· (f Respects $¦) X ¤ µx y·x  X ± y  X ± x ¦ y ´ f x = f y
°
Following Paulson, we define a function
=INLINEFT
Contents
=TEX
\ whose value on a singleton set $\{x\}$ is $x$ (and whose value on any other kind of set is unspecified).
The consistency of this definition is not proved automatically, and the development of the theorems begins with the easy proof that it is consistent.
¹HOLCONST
Ü ÛContentsÝ : 'a SET ­ 'a
÷üüüüüü
Ü µ x· Contents {x} = x
°
Given any function $f : X \rightarrow Y$, the relation, $R_f$, say, defined so that $x\,R_f\,y$ holds iff. $f(x) = f(y)$ is an equivalence relation.
$f$ respects an equivalence relation $R$ iff. $R$ is no coarser than $R_f$ (i.e., iff. every $R$-equivalence class is contained in an $R_f$-equivalence class).
Given such an $R$, $f$ induces a function, $\overline{f}$, from the quotient of $X//R$ to $Y$.
The following function is the function comprising the union over all $R$ of the corresponding $\overline{f}$ extended to a total function in an unspecified way.
We write it using the postfix notation
=INLINEFT
f -
=TEX
.
=SML
declare_postfix(330, "-");
=TEX
¹HOLCONST
Ü Û$-Ý : ('a ­ 'b) ­ 'a  SET ­ 'b
÷üüüüüü
Ü µ f A· (f -) A = Contents{y | ¶x·  x  A ± y = f x}
°
Our lemma library begins with the consistency of the contents function and then a handful of simple facts about equivalence relations, equivalence classes and the contents function.
This comprises the following theorems.

\ThmsII{%
=GFT
Contents_consistent
contents_def
equiv_class_eq_thm
equiv_class__thm
constant_image_thm
=TEX
}{%
=GFT
respects_image_thm
respects_image_contents_thm
quotient_map_onto_thm
quotient__thm
quotient_rep_¶_thm
=TEX
}

The next block of theorems begins with two theorems which show, in effect, that given any function, $f:X \rightarrow Y$, and any relation
=INLINEFT
¦
=TEX
\ that $f$ respects on $X$,
$f$ factors through the projection of $X$ onto
=INLINEFT
X // ¦
=TEX
, the induced function from
=INLINEFT
X // ¦
=TEX
\ to $Y$ being given by
=INLINEFT
f -
=TEX
.
The first version states this in terms of equivalence classes and the second in terms of members of a quotient set.
The third theorem in this block is our alternative to the treatment of dyadic functions suggested by Paulson.
It shows that the operation
=INLINEFT
Ìf· f -
=TEX
\ can be iterated to produced a curried version of the induced function theorem for functions of two arguments.

\ThmsIII{%
=GFT
induced_fun_equiv_class_thm
=TEX
}{%
=GFT
induced_fun_thm
=TEX
}{%
=GFT
induced_fun_induced_fun_thm
=TEX
}

Finally we list the theorems that act as the main ``external interface'' to the lemma library. These give the characterising properties of the quotient set construction as pure existence theorems for the one-argument and two-argument cases.
The characterising properties are that the induced functions exist under the appropriate hypotheses and are unique.
The uniqueness is trivial and is only stated formally for completeness.
In applications of the lemma library, one will typically just prove instances of the hypotheses for a particular function and a particular equivalence relation (or relations) and forward chain with the existence theorems to give the induced function.
In this sense, these theorems act as templates for constructing induced functions.


\ThmsII{%
=GFT
induced_fun_¶_thm
induced_fun_¶_unique_thm
=TEX
}{%
=GFT
dyadic_induced_fun_¶_thm
dyadic_induced_fun_¶_unique_thm
=TEX
}
\section{GROUPS}\label{groups}

\subsection{Technical Prelude}

First of all, we must give the the ML commands to  introduce the new theory ``groups'' as a child of the theory ``equiv\_rel'' of equivalence relations.

=SML
force_delete_theory"groups" handle Fail _ => ();
open_theory"equiv_rel";
new_theory"groups";
set_merge_pcs["basic_hol1", "'sets_alg"];
=TEX
%%%%
%%%%
%%%%
%%%%

%%%%
%%%%
%%%%
%%%%
\subsection{The Signature of a Group}
We will represent a group  as a quadruple comprising a carrier set, a two-argument multiplication function, a unit element and a one-argument inverse function.
This signature is captured in the following type abbreviation, parametrised by the type variable $'a$ giving the type of the elements of the group.
=SML
declare_type_abbrev("GROUP", ["'a"], 'a SET ¸ ('a ­ 'a ­ 'a) ¸ 'a ¸ ('a ­ 'a)®);
=TEX
If $G$ is a structure with the above signature (i.e., a member of an instance of the above type), we write
=INLINEFT
Car G
=TEX
\ for the carrier set,
=INLINEFT
(x.y)G
=TEX
\ for the product of two elements, $x$ and $y$,
=INLINEFT
One G
=TEX
\ for the unit element and
=INLINEFT
(x ~)G
=TEX
\ for the inverse of an element, $x$.
This is achieved by the following fixity declarations and definition of access functions for the signature.

=SML
declare_infix(310, ".");
declare_postfix(330, "~");
¹HOLCONST
Ü ÛCarÝ :  'a GROUP ­ 'a SET;
Ü Û$.Ý :  'a ­ 'a ­ 'a GROUP ­ 'a;
Ü Û$~Ý :  'a ­ 'a GROUP ­ 'a;
Ü ÛOneÝ :  'a GROUP ­ 'a
÷üüüüüü
Ü µ (set, times, one, inverse)·
Ü	Car (set, times, one, inverse) = set
Ü ±	(µx y· (x . y) (set, times, one, inverse) = times x y)
Ü ±	One (set, times, one, inverse) = one
Ü ±	(µx· (x ~) (set, times, one, inverse) = inverse x)
°


We prove one theorem about these which is just a convenience for proving that two structures for this signature are equal.

\ThmsI{
=GFT
group_eq_group_thm
=TEX
}

\subsection{The Group Laws and Equational Reasoning in a Group}
We can now specify the group laws.
The polymorphic set {\it Group} comprises all structures with the signature of a group that satisfy the group laws.
The statement is entirely standard following our convention of relativising everything to the carrier set of the group.
The first two conditions on $G$ say that the carrier set is closed under multiplication and that multiplication is associative, the next two conditions say that the unit is a member of $G$ and is indeed a two-sided unit for multiplication. The remaining conditions say that $G$ is closed under inverse and that the inverse does indeed give a two-sided inverse for the multiplication.

¹HOLCONST
Ü ÛGroupÝ : 'a GROUP SET
÷üüüüüü
Ü µ G·
Ü	G  Group
Ü ¤	(µx y· x  Car G ± y  Car G ´ (x . y) G  Car G)
Ü ±	(µx y z· x  Car G ± y  Car G ± z  Car G ´ ((x . y)G . z)G = (x . (y . z)G)G)
Ü ±	One G  Car G
Ü ±	(µx· x  Car G ´ (x . One G) G = x ± (One G . x)G = x)
Ü ±	(µx· x  Car G ´ (x ~) G  Car G)
Ü ±	(µx· x  Car G ´ (x . (x ~)G)G = One G ± ((x ~)G . x)G = One G)
°
The above definition shows that our approach to the syntax of the group operations is not unworkable.
The syntax is certainly readable if one pretends not to notice all the ``$G$''s.
When working with a specific group, the definitions can easily be expanded to give the familiar notations for the group (see examples in section~\ref{groupegs}).

However, the syntax is not particular convenient to write for complex expressions, mainly because it forces the writer to write all the brackets in an expression explicitly.
An extension to the concrete syntax of {\ProductHOL} is being considered which would remedy this.
The extension would allow a form of ternary infix (and postfix) operator.
What we are currently writing as  $(x.y)G$ would become $x\,{.G}\,y$.
One would be allowed to write $x\,{.G}\,y{.G}\,z$ with no brackets.
Brackets would only be required when they are significant.

On the basis of this definition, we can prove the usual elementary consequences of these laws.
These are presented as a set of four portmanteau theorems ({\em group\_clauses1} \ldots {\em group\_clauses4})
together with some particular results such as a cancellation law that are needed to bootstrap the theory and prove the portmanteau theorems.

\ThmsII{%
=GFT
group_clauses1
group_clauses2
group_eq_thm
group_eq_thm1
left_cancel_thm
inverse_inverse_thm
=TEX
}{%
=GFT
group_clauses3
times_inverse_thm
inverse_unique_thm
group_clauses4
one_unique_thm
=TEX
}

Taken together, the portmanteau theorems provide the closure statements one needs to show that arbitrary combinations of the group operations applied to members of the group give members of the group and give the ``free group normal form'' for expressions over the signature of the group.
This normal form is obtained by repeatedly rewriting with the following rules:

\begin{enumerate}
\item $(x.y)^{-1} = y^{-1}.x^{-1}$
\item $(x^{-1})^{-1} = x$
\item $x.x^{-1} = 1$
\item $x^{-1}.x = 1$
\item $x.(x^{-1}.z) = z$
\item $x^{-1}.(x.z) = z$
\item $(x.y).z = x.(y.z)$
\item $x.1 = 1.x = x$
\end{enumerate}

Now for us, these are conditional rewrite rules: they only hold if the operands of the expressions on the left are members of the carrier set of the group.
At this point in the proof script, we use the portmanteau theorems to implement automated proof procedures for equality in a group and for membership of the carrier set of a group.
The proof procedures for equality apply the above rewrite rules setting the necessary membership conditions as lemmas.
The proof procedures for membership apply the closure conditions for the operations to simplify membership conditions on complex expressions into conditions on atomic subexpressions.
These procedures deal automatically with all of the equational reasoning that will be needed later except for providing existential witnesses and identifying points at which the argument for a membership condition is non-trivial (i.e., does not follow just from membership conditions on atomic subexpressions).

\subsection{Homomorphisms}
The definition of homomorphism between two groups, $G$ and $H$, is completely standard
For us, a homomorphism is given by a total function  whose behaviour outside the carrier set of $G$ is irrelevant.


¹HOLCONST
Ü ÛHomomorphismÝ : 'a GROUP ¸ 'b GROUP ­ ('a ­ 'b) SET
÷üüüüüü
Ü µ G H f·
Ü	f  Homomorphism(G, H)
Ü ¤	(µx · x  Car G ´ f x  Car H)
Ü ±	(µx y· x  Car G ± y  Car G´ f((x . y) G) = (f x . f y)H)
°

One only needs to specify that a homomorphism preserves the multiplication, since a homomorphism in that sense will automatically preserve the unit element and inverses as shown by the first two theorems in the following block.
The third and fourth are just extracts from the definition of a homomorphism that are technically useful.

\ThmsII{%
=GFT
homomorphism_one_thm
homomorphism_inverse_thm
=TEX
}{%
=GFT
homomorphism_clauses
homomorphism__car_thm
=TEX
}

\subsection{Subgroups}
Our definition of a subgroup is standard except that we require the multiplication and the inverse function of the subgroup to be identical with those in the containing group.
This is invaluable in simplifying later definitions and in stating and proving theorems.
It guarantees that one can just use the operations of the containing group wherever appropriate.
The reader who does not like this is cordially invited to replace the last two equations in the following by equations conditional on membership of the carrier set of $H$ and then to prove the theorems that follow.

¹HOLCONST
Ü ÛSubgroupÝ : 'a GROUP  ­ 'a GROUP SET
÷üüüüüü
Ü µ G H·
Ü	H  Subgroup G
Ü ¤	Car H  Car G
Ü ±	H  Group
Ü ±	(µx y·  (x.y)H = (x.y)G)
Ü ±	(µx·  (x ~)H = (x ~)G)
°

The following theorem extends the equations in the above definition to add the statement that the unit element of a subgroup is the same as that of the containing group.

\ThmsI{%
=GFT
subgroup_clauses
=TEX
}

The unit subgroup of a group is the subgroup whose carrier set comprises only the unit element.

¹HOLCONST
Ü ÛUnitSubgroupÝ : 'a GROUP  ­ 'a GROUP
÷üüüüüü
Ü µ G·
Ü	UnitSubgroup G = ({One G}, (Ìx y·(x.y)G), One G, (Ìx·(x ~)G))
°

Iif $G$ is a group then $G$ itself and its unit subgroup are both subgroups of $G$.
The inclusion of a subgroup, $H$, of $G$, is a homomorphism from $H$ to $G$
In particular, the identity function on $G$ is a homomorphism from $G$ to $G$.s

\ThmsIII{%
=GFT
trivial_subgroups_thm
=TEX
}{%
=GFT
subgroup_homomorphism_thm
=TEX
}{%
=GFT
id_homomorphism_thm
=TEX
}

\subsection{Normal Subgroups and Kernels of Homomorphisms}

A normal subgroup is one that is closed under conjugation. (The conjugate of $x$ by $y$ is $y^{-1}.x.y$).

¹HOLCONST
Ü ÛNormalSubgroupÝ : 'a GROUP  ­ 'a GROUP SET
÷üüüüüü
Ü µ G H·
Ü	H  NormalSubgroup G
Ü ¤	H  Subgroup G
Ü ±	(µx y· x  Car H ± y  Car G ´ ((y ~)G.(x.y)G)G  Car H)
°

The kernel of a homomorphism from $G$ to $H$  has as its carrier set the pre-image of the unit element of $H$ and inherits the group operations from $G$:

¹HOLCONST
Ü ÛKernelÝ : ('a ­ 'b) ­ 'a GROUP ¸ 'b GROUP­ 'a GROUP
÷üüüüüü
Ü µ f G H·
Ü	Kernel f (G, H)
Ü =	({x | x  Car G ± f x = One H}, (Ìx y· (x . y)G), One G, (Ìx·(x ~) G))
°

Kernels of homomorphisms are normal subgroups as stated in the following theorem:

\ThmsI{%
=GFT
kernel_normal_subgroup_thm
=TEX
}
\subsection{Congruence modulo a Subgroup}
Elements $x$ and $y$ are (right) congruent modulo a subgroup $H$ iff. $x^{-1}y$ is a member of $H$.
Right congruence is equivalence modulo right translation by elements of $H$.

¹HOLCONST
Ü ÛRightCongruentÝ :'a GROUP ­ 'a GROUP ­ 'a ­ 'a ­ BOOL
÷üüüüüü
Ü µ G H x y· RightCongruent H G x y ¤ ((x ~) G . y) G  Car H
°

The following theorems states that right congruence is an equivalence relation:

\ThmsI{%
=GFT
right_congruent_equiv_thm
=TEX
}
\subsection{Right Cosets}
If $H$ is a subgroup of $G$ and $x$ is an element of $G$, the right coset generated  $x$  is the set comprising all elements $x.z$ for $z$ in $H$.
I.e., perhaps confusingly, a right coset is a left translate of $H$. Some texts call these left cosets (and then, perhaps confusingly, left congruence is equivalence modulo right translation by elements of $H$).
Our terminology follows \cite{Cohn74}.

¹HOLCONST
Ü ÛRightCosetÝ :'a GROUP ­ 'a GROUP­ 'a ­ 'a SET
÷üüüüüü
Ü µ G H x· RightCoset H G x = {y | ¶z·z  Car H ± y = (x.z) G}
°

The following theorems state that the right cosets of a subgroup are the equivalence classes of its right congruence relation and that the right cosets generated by elements $x$ and $y$ are equal iff. $x$ and $y$ are right congruent.


\ThmsI{%
=GFT
right_coset_equiv_class_thm
right_coset_eq_thm
=TEX
}

\subsection{The Quotient Group Construction}
If $G$ is a group and $H$ is a normal subgroup, then the multiplication and inverse operations on $G$ induce a multiplication  and inverse operation on the set of right cosets of $H$ which make it into a group in such a way that the projection onto the set of right cosets is a homomorphism.
Most of this is captured in the consistency proof for the following definition of this quotient group construction.

¹HOLCONST
Ü ÛQuotientGroupÝ :'a GROUP ­ 'a GROUP­ 'a SET GROUP
÷üüüüüü
Ü µ G H· G  Group ± H  NormalSubgroup G
Ü ´	Car (QuotientGroup G H) = {A | ¶x·x  Car G ± A = RightCoset H G x}
Ü ±	(µx y· x  Car G ± y  Car G ´
Ü		(RightCoset H G x.RightCoset H G y) (QuotientGroup G H)
Ü	=	RightCoset H G ((x.y)G))
Ü ±	One (QuotientGroup G H) = RightCoset H G (One G)
Ü ± 	(µx· x  Car G ´
Ü		(RightCoset H G x ~) (QuotientGroup G H)
Ü	=	RightCoset H G ((x ~)G))
°
We write $G//H$ for the quotient of $G$ by $H$ by dint of the following alias declaration (overloading the alias for the quotient set operator).
=SML
declare_alias("//", ¬QuotientGroup®);
=TEX

Since the right cosets are the equivalence classes of the right congruence relation, the consistency of the above definition is an immediate consequence of the template theorems for introducing induced functions on quotient sets provided in the theory ``equiv\_rel'' once we have proved that the appropriate instances of the hypotheses of those theorems hold. This is captured in the following theorems.

\ThmsII{%
=GFT
group_clauses1
times_respects_right_congruent_lemma1
times_respects_right_congruent_lemma2
=TEX
}{%
=GFT
inverse_respects_right_congruent_lemma
QuotientGroup_consistent
quotient_group_def
=TEX
}

We can now show that the projection to the quotient of $G$ by a normal subgroup $H$ is surjective, that the quotient  is a group under the induced operations and that the projection is a homomorphism with kernel $H$.

\ThmsII{%
=GFT
quotient_group_rep_¶_thm
quotient_group_group_thm
=TEX
}{%
=GFT
quotient_group_homomorphism_thm
kernel_right_coset_thm
=TEX
}

\subsection{Images of Homomorphisms}

The following image group construction is needed in the statement of the first isomorphism theorem.

¹HOLCONST
Ü ÛImageÝ : ('a ­ 'b) ­ 'a SET ­ 'b GROUP  ­ 'b GROUP
÷üüüüüü
Ü µ f X G·
Ü	Image f X G = ({y | ¶x·x  X ± y = f x}, (Ìx y· (x.y)G), One G, (Ìx· (x ~)G))
°

The next theorem states that the image of a group homomorphism is a subgroup of the range of the homomorphism:

\ThmsII{%
=GFT
image_subgroup_thm
=TEX
}{%
\relax
}

\subsection{Isomorphisms}

An isomorphism is a one-to-one onto homomorphism
¹HOLCONST
Ü ÛIsomorphismÝ : 'a GROUP ¸ 'b GROUP ­ ('a ­ 'b) SET
÷üüüüüü
Ü µ G H f·
Ü	f  Isomorphism(G, H)
Ü ¤	f  Homomorphism(G, H)
Ü ±	(µx y· x  Car G ± y  Car G ± f x = f y ´ x = y)
Ü ±	(µz· z  Car H ´ ¶x·x  Car G ± f x = z)
°

The following theorms lead up to the proof of the first isomorphism theorem (which says that if $f : G \rightarrow H$ is a homomorphism with kernel $K$, then $f$ factors thorugh a homomorphism $H//K \rightarrow G$ which gives an isomorphism between $H//K$ and the image of $f$).

\ThmsII{%
=GFT
mage_subgroup_thm
equiv_right_congruent_kernel_thm
homomorphism_respects_kernel_thm
=TEX
}{%
=GFT
car_quotient_group_thm
first_isomorphism_thm
=TEX
}

\newpage
\section{Examples of Groups}\label{groupegs}

In this section we give one or two examples of specific groups.
We specialise some of the theorems from section~\ref{groups} to show how they look.

\subsection{Technical Prelude}

First of all, we must give the the ML commands to  introduce the new theory ``group\_egs'' as a child of the theory `groups'' of groups.

=SML
force_delete_theory"group_egs" handle Fail _ => ();
open_theory"groups";
new_theory"group_egs";
new_parent"¯";
set_merge_pcs["basic_hol1", "'sets_alg", "'ú", "'¯"];
=TEX
%%%%
%%%%
%%%%
%%%%

%%%%
%%%%
%%%%
%%%%
\subsection{The Examples}

We define the group of integers under addition and the group of unit integers under multiplication:

¹HOLCONST
Ü Ûú_plusÝ :  ú GROUP;
Ü Ûú_unitsÝ :  ú GROUP
÷üüüüüü
Ü	ú_plus = (Universe, $+, îú 0, ~)
Ü ±	ú_units = ({~(îú 1); îú 1}, $*, îú 1, (Ìx·x))
°

We prove that both of these are indeed groups.
The notational devices of our treatment of abstract group theory convert easily into the familiar notation for specific groups.
As an example of this, we show how the definition of a homomorphism specialises to the notion of a homomorphism from
=INLINEFT
ú_plus
=TEX
\ to
=INLINEFT
ú_units
=TEX
.

\ThmsII{
=GFT
ú_plus_group_thm
ú_units_group_thm
ú_plus_ops_thm
ú_units_ops_thm
=TEX
}{%
=GFT
ú_plus_ú_units_homomorphism_def
ú_plus_ú_units_homomorphism_one_thm
ú_plus_ú_units_homomorphism_inverse_thm
=TEX
}
%%%%
%%%%
%%%%
%%%%
{\let\Section\section
\newcounter{ThyNum}
\def\section#1{\Section{#1}
\addtocounter{ThyNum}{1}\label{Theory\arabic{ThyNum}}}
\include{wrk0681.th}
\include{wrk0682.th}
\include{wrk0683.th}
}  %\let

\twocolumn[\section{INDEX}\label{index}]
{\small\printindex}

\end{document}

{\HOLindexOff
%%%%
%%%%
%%%%
%%%%
\onecolumn
\section{THEOREMS}\label{THEOREMS}
=SML
fun arb_gen (thm : THM) : THM = (
	let	val ty_map = map
			(fn tv => (mk_vartype("@_" ^ tv), mk_vartype tv))
			(term_tyvars(concl thm));
		val thm1 = asm_inst_type_rule ty_map thm;
	in	all_µ_intro (all_µ_arb_elim thm1)
	end
);
=TEX
%%%%
%%%%
%%%%
%%%%
\subsection{The Definitions and Their Consistency}
%%%%
%%%%
%%%%
%%%%
=SML
open_theory"equiv_rel";
set_merge_pcs["basic_hol1", "'sets_alg"];
=TEX
=SML
val Ûrefl_defÝ = get_spec¬Refl®;
val Ûsym_defÝ = get_spec¬Sym®;
val Ûequiv_defÝ = get_spec¬Equiv®;
val Ûequiv_class_defÝ = get_spec¬EquivClass®;
val Ûquotient_set_defÝ = get_spec¬$//®;
val Ûrespects_defÝ = get_spec¬$Respects®;
val Ûinduced_defÝ = get_spec¬$-®;
=SML
push_consistency_goal ¬Contents®;
a(¶_tac¬ÌA·Åx·A = {x}® THEN REPEAT strip_tac THEN rewrite_tac[]);
a(all_Å_tac);
(* *** Goal "1" *** *)
a(¶_tac¬x® THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(POP_ASM_T ante_tac THEN PC_T1 "sets_ext" REPEAT strip_tac);
a(POP_ASM_T (ante_tac o µ_elim¬x®));
a(rewrite_tac[] THEN STRIP_T (rewrite_thm_tac o eq_sym_rule));
val _ = save_consistency_thm ¬Contents® (pop_thm());
val Ûcontents_defÝ = save_thm("contents_def", get_spec¬$Contents®);
=TEX
%%%%
%%%%
%%%%
%%%%
\subsection{Equivalence Relations}
%%%%
%%%%
%%%%
%%%%
=SML
set_goal([], ¬
	µX; $¦; x y·
	Equiv(X, $¦) ± x  X ± y  X ´
	(EquivClass(X, $¦)  x = EquivClass(X, $¦) y ¤ x ¦ y)
®);
a(PC_T1 "sets_ext1" rewrite_tac[equiv_class_def, equiv_def, sym_def, refl_def, trans_def]
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(DROP_NTH_ASM_T 5 bc_thm_tac THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 1 (ante_tac o µ_elim¬x®));
a(ALL_ASM_FC_T asm_rewrite_tac[]);
(* *** Goal "2" *** *)
a(REPEAT (all_asm_fc_tac[]));
(* *** Goal "3" *** *)
a(REPEAT (all_asm_fc_tac[]));
val Ûequiv_class_eq_thmÝ = save_pop_thm "equiv_class_eq_thm";
=TEX
=SML
set_goal([], ¬
	µX; $¦; x y·
	Equiv(X, $¦) ± x  X ´ x  EquivClass(X, $¦) x
®);
a(PC_T1 "sets_ext1" rewrite_tac[equiv_class_def, equiv_def, sym_def, refl_def, trans_def]
	THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
val Ûequiv_class__thmÝ = save_pop_thm "equiv_class__thm";
=TEX
=SML
set_goal([], ¬
	µA a c·
		a  A ± (µx·x  A ´ f x = c)
	´	{y | ¶x·x  A ± y = f x} = {c}
®);
a(PC_T1 "sets_ext1"  REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[] THEN all_var_elim_asm_tac1);
(* *** Goal "2" *** *)
a(¶_tac¬a® THEN REPEAT strip_tac);
a(ALL_ASM_FC_T asm_rewrite_tac[]);
val Ûconstant_image_thmÝ = save_pop_thm "constant_image_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f x·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	±	x  X
	´	{y | ¶z·z  EquivClass(X, $¦) x ± y = f z} = {f x}
®);
a(REPEAT strip_tac);
a(bc_thm_tac constant_image_thm);
a(¶_tac¬x® THEN all_asm_ante_tac);
a(PC_T1 "sets_ext1" rewrite_tac[ respects_def,
	equiv_class_def, equiv_def, sym_def, refl_def, trans_def]
		THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(ALL_ASM_FC_T rewrite_tac[]);
val Ûrespects_image_thmÝ = save_pop_thm "respects_image_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f x·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	±	x  X
	´	Contents {y | ¶z·z  EquivClass(X, $¦) x ± y = f z} = f x
®);
a(REPEAT strip_tac);
a(ALL_FC_T rewrite_tac[arb_gen respects_image_thm]);
a(rewrite_tac[contents_def]);
val Ûrespects_image_contents_thmÝ = save_pop_thm "respects_image_contents_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦·
		Equiv(X, $¦)
	´	µA· A  X // ($¦) ´ ¶x· x  X ± A = EquivClass(X, $¦) x

®);
a(rewrite_tac[ quotient_set_def]);
val Ûquotient_map_onto_thmÝ = save_pop_thm "quotient_map_onto_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦· A  X // ($¦) ± x  A ´ x  X
®);
a(rewrite_tac[ quotient_set_def, equiv_class_def] THEN REPEAT strip_tac);
a(all_var_elim_asm_tac1);
val Ûquotient__thmÝ = save_pop_thm "quotient__thm";
=TEX
=SML
set_goal([], ¬
	µX $¦·
		Equiv(X, $¦)
	´	A  X // ($¦) ´ ¶x· x  X ± x  A
®);
a(rewrite_tac[ quotient_set_def, equiv_class_def, equiv_def, refl_def] THEN REPEAT strip_tac);
a(all_var_elim_asm_tac1);
a(¶_tac¬x® THEN REPEAT strip_tac THEN all_asm_fc_tac[]);
val Ûquotient_rep_¶_thmÝ = save_pop_thm "quotient_rep_¶_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f x·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	±	x  X
	´	(f -) (EquivClass(X, $¦) x) = f x
®);
a(rewrite_tac[induced_def] THEN REPEAT strip_tac);
a(bc_thm_tac respects_image_contents_thm THEN REPEAT strip_tac);
val Ûinduced_fun_equiv_class_thmÝ = save_pop_thm "induced_fun_equiv_class_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f ·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	´	µA x· A  X // $¦ ± x  A ´ (f -) A = f x
®);
a(rewrite_tac[quotient_set_def] THEN REPEAT strip_tac THEN all_var_elim_asm_tac1);
a(TOP_ASM_T (strip_asm_tac o rewrite_rule[equiv_class_def]));
a(ALL_FC_T  rewrite_tac[conv_rule(ONCE_MAP_C eq_sym_conv) equiv_class_eq_thm,
	induced_fun_equiv_class_thm]);
a(DROP_NTH_ASM_T 5 (strip_asm_tac o rewrite_rule[respects_def]));
a(all_asm_fc_tac[]);
val Ûinduced_fun_thmÝ = save_pop_thm "induced_fun_thm";
=TEX
=SML
set_goal([], ¬
	µX R Y S f ·
		Equiv(X, R)
	±	Equiv(Y, S)
	±	(µy· y  Y ´ ((Ìx·f x y) Respects R) X)
	±	(µx· x  X ´ ((Ìy·f x y) Respects S) Y)
	´	µA x B y· A  X // R ± x  A ± B  Y // S ± y  B
			´ ((Ìx·(f x -) B )-) A = f x y
®);
a(conv_tac (ONCE_MAP_C È_conv) THEN REPEAT strip_tac);
a(lemma_tac¬µx·x  X ´ (f x -) B = f x y® THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_asm_fc_tac[] THEN all_fc_tac[induced_fun_thm]);
(* *** Goal "2" *** *)
a(lemma_tac¬((Ì x· (f x -) B) Respects R) X®);
(* *** Goal "2.1" *** *)
a(rewrite_tac[respects_def] THEN REPEAT strip_tac THEN ALL_ASM_FC_T rewrite_tac[]);
a(lemma_tac¬y  Y® THEN1 all_fc_tac[arb_gen quotient__thm]);
a(DROP_NTH_ASM_T 11 (ante_tac o rewrite_rule[respects_def] o µ_elim¬y®));
a(REPEAT strip_tac THEN all_asm_fc_tac[]);
(* *** Goal "2.2" *** *)
a(ALL_FC_T rewrite_tac[induced_fun_thm]);
a(lemma_tac¬x  X® THEN1 all_fc_tac[arb_gen quotient__thm]);
a(ALL_ASM_FC_T rewrite_tac[]);
val Ûinduced_fun_induced_fun_thmÝ = save_pop_thm "induced_fun_induced_fun_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f ·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	´	¶g· µA x· A  X // $¦ ± x  A ´ g A = f x
®);
a(REPEAT strip_tac);
a(¶_tac¬f -® THEN REPEAT strip_tac);
a(all_fc_tac[arb_gen induced_fun_thm]);
val Ûinduced_fun_¶_thmÝ = save_pop_thm "induced_fun_¶_thm";
=TEX
=SML
set_goal([], ¬
	µX $¦ f g h·
		Equiv(X, $¦)
	±	(f Respects $¦) X
	±	(µA x· A  X // $¦ ± x  A ´ g A = f x)
	±	(µA x· A  X // $¦ ± x  A ´ h A = f x)
	´	(µA· A  X // $¦  ´ h A = g A)
®);
a(REPEAT strip_tac);
a(all_fc_tac[quotient_rep_¶_thm]);
a(ALL_ASM_FC_T rewrite_tac[]);
val Ûinduced_fun_¶_unique_thmÝ = save_pop_thm "induced_fun_¶_unique_thm";
=TEX
=SML
set_goal([], ¬
	µX R Y S f ·
		Equiv(X, R)
	±	Equiv(Y, S)
	±	(µy· y  Y ´ ((Ìx·f x y) Respects R) X)
	±	(µx· x  X ´ ((Ìy·f x y) Respects S) Y)
	´	¶g· µA x B y· A  X // R ± x  A ± B  Y // S ± y  B
			´ g A B = f x y
®);
a(REPEAT strip_tac);
a(¶_tac¬ ÌA B· ((Ìx·(f x -) B )-) A® THEN REPEAT strip_tac THEN rewrite_tac[]);
a(all_fc_tac[ induced_fun_induced_fun_thm]);
val Ûdyadic_induced_fun_¶_thmÝ = save_pop_thm "dyadic_induced_fun_¶_thm";
=TEX
=SML
set_goal([], ¬
	µX R Y S f g h·
		Equiv(X, R)
	±	Equiv(Y, S)
	±	(µy· y  Y ´ ((Ìx·f x y) Respects R) X)
	±	(µx· x  X ´ ((Ìy·f x y) Respects S) Y)
	±	(µA x B y· A  X // R ± x  A ± B  Y // S ± y  B ´ g A B = f x y)
	±	(µA x B y· A  X // R ± x  A ± B  Y // S ± y  B ´ h A B = f x y)
	´	(µA B y· A  X // R ± B  Y // S ´ h A B = g A B)
®);
a(REPEAT strip_tac);
a(all_fc_tac[quotient_rep_¶_thm]);
a(ALL_ASM_FC_T rewrite_tac[]);
val Ûdyadic_induced_fun_¶_unique_thmÝ = save_pop_thm "dyadic_induced_fun_¶_unique_thm";
=TEX
%%%%
%%%%
%%%%
%%%%
\subsection{Groups}
%%%%
%%%%
%%%%
%%%%
=SML
open_theory"groups";
set_merge_pcs["basic_hol1", "'sets_alg"];
=TEX
=SML
val Ûgroup_ops_defÝ = get_spec¬One®;
val Ûgroup_defÝ = get_spec¬Group®;
val Ûhomomorphism_defÝ = get_spec¬Homomorphism®;
val Ûsubgroup_defÝ = get_spec¬Subgroup®;
val Ûsubgroup_def1Ý = pc_rule1 "sets_ext1" rewrite_rule[] (get_spec¬Subgroup®);
val Ûunit_subgroup_defÝ = get_spec¬UnitSubgroup®;
val Ûnormal_subgroup_defÝ = get_spec¬NormalSubgroup®;
val Ûkernel_defÝ = get_spec¬Kernel®;
val Ûright_congruent_defÝ = get_spec¬RightCongruent®;
val Ûright_coset_defÝ = get_spec¬RightCoset®;
val Ûimage_defÝ = get_spec¬Image®;
val Ûisomorphism_defÝ = get_spec¬Isomorphism®;
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
		G = H
	¤	Car G = Car H
	±	(µx y· (x.y)G = (x.y)H)
	±	One G = One H
	±	(µx·(x ~) G = (x ~)H)
®);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[] THEN all_asm_ante_tac);
a(PC_T1 "predicates"
	lemma_tac¬¶gc gm g1 gi hc hm h1 hi· G  = (gc, gm, g1, gi)  ± H = (hc, hm, h1, hi)® THEN1
	( MAP_EVERY ¶_tac[
		¬Fst G®, ¬Fst(Snd G)®, ¬Fst(Snd(Snd G))®, ¬Snd(Snd(Snd G))®,
		¬Fst H®, ¬Fst(Snd H)®, ¬Fst(Snd(Snd H))®, ¬Snd(Snd(Snd H))®]
		THEN rewrite_tac[]));
a(DROP_ASMS_T rewrite_tac);
a(rewrite_tac[group_ops_def]);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
val Ûgroup_eq_group_thmÝ = save_pop_thm "group_eq_group_thm";
=TEX
%%%%
%%%%
%%%%
%%%%
=SML
open_theory"groups";
set_merge_pcs["basic_hol1", "'sets_alg"];
=TEX
=SML
set_goal([], ¬
	µG x·
	G  Group ± x  Car G
´	(x ~)G  Car G
±	(x.One G) G = x
±	(One G.x)G = x
±	((x ~)G . x) G = One G
±	(x . (x ~)G) G = One G
®);
a(rewrite_tac[group_def] THEN REPEAT strip_tac THEN all_asm_fc_tac[]);
val Ûgroup_clauses1Ý = save_pop_thm"group_clauses1";
=TEX
=SML
set_goal([], ¬
	µG x y z·
	G  Group ± x  Car G ± y  Car G
´	(x.y)G  Car G
±	µz· z  Car G ´ ((x.y)G.z)G = (x. (y.z)G)G
®);
a(rewrite_tac[group_def] THEN REPEAT strip_tac THEN all_asm_fc_tac[]);
val Ûgroup_clauses2Ý =  save_pop_thm"group_clauses2";
=TEX
=SML
set_goal([], ¬
	µG x y·
	G  Group ± x  Car G ± y  Car G
´	(x = y ¤ (x.(y ~)G)G = One G)
®);
a(REPEAT strip_tac THEN1
	(ALL_FC_T asm_rewrite_tac[group_clauses1]));
a(LEMMA_T ¬((x . (y ~) G) G .y)G = (One G.y)G® ante_tac THEN1 asm_rewrite_tac[]);
a(lemma_tac¬(y ~)G   Car G® THEN1 all_fc_tac[group_clauses1]);
a(ALL_FC_T rewrite_tac[group_clauses1, group_clauses2]);
val Ûgroup_eq_thmÝ = save_pop_thm"group_eq_thm";
=TEX
=SML
set_goal([], ¬
	µG x y·
	G  Group ± x  Car G ± y  Car G
´	(x = y ¤ ((x ~)G.y)G = One G)
®);
a(REPEAT strip_tac THEN1
	(ALL_FC_T asm_rewrite_tac[group_clauses1]));
a(LEMMA_T ¬(x.((x ~) G . y) G)G = (x.One G)G® ante_tac THEN1 asm_rewrite_tac[]);
a(lemma_tac¬(x ~)G   Car G® THEN1 all_fc_tac[group_clauses1]);
a(ALL_FC_T rewrite_tac[group_clauses1, 
	conv_rule (ONCE_MAP_C eq_sym_conv) group_clauses2]);
a(REPEAT strip_tac THEN asm_rewrite_tac[]);
val Ûgroup_eq_thm1Ý = save_pop_thm"group_eq_thm1";
=TEX
=SML
set_goal([], ¬
	µG x y z·
	G  Group ± x  Car G ± y  Car G ± z  Car G
´	( (x.y) G = (x.z) G ¤ y = z)
®);
a(REPEAT strip_tac THEN_LIST [id_tac, asm_rewrite_tac[]]);
a(lemma_tac¬ (x ~) G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(LEMMA_T¬(( (x ~) G. x) G. y) G = (( (x ~) G. x) G. z) G ® ante_tac THEN1
	ALL_FC_T asm_rewrite_tac[group_clauses2]);
a(ALL_FC_T rewrite_tac[group_clauses1]);
val Ûleft_cancel_thmÝ = save_pop_thm"left_cancel_thm";
=TEX
=SML
set_goal([], ¬
	µG x y z·
	G  Group ± x  Car G
´	((x ~)G ~)G = x
®);
a(REPEAT strip_tac);
a(lemma_tac¬ (x ~) G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(lemma_tac¬ ((x ~) G. (((x ~)G ~)G)) G = ((x ~) G. x)  G ® THEN1
	ALL_FC_T asm_rewrite_tac[group_clauses1]);
a(lemma_tac¬ ((x ~) G ~)G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(all_fc_tac[left_cancel_thm]);
val Ûinverse_inverse_thmÝ = save_pop_thm"inverse_inverse_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; x y·
	G  Group ± x  Car G ± y  Car G
´	(x.((x ~)G.y)G)G = y
±	((x ~)G.(x.y)G)G = y
®);
a(REPEAT strip_tac THEN
	(lemma_tac¬((x:'a) ~)G  Car G® THEN1 all_fc_tac[group_clauses1]));
(* *** Goal "1" *** *)
a(LEMMA_T¬(x.((x ~)G.y)G)G = ((x.(x ~)G)G.y)G® rewrite_thm_tac THEN1
	ALL_FC_T rewrite_tac[group_clauses2]);
a(ALL_FC_T rewrite_tac[group_clauses1]);
(* *** Goal "2" *** *)
a(LEMMA_T¬((x ~)G.(x.y)G)G = (((x ~)G.x)G.y)G® rewrite_thm_tac THEN1
	ALL_FC_T rewrite_tac[group_clauses2]);
a(ALL_FC_T rewrite_tac[group_clauses1]);
val Ûgroup_clauses3Ý = save_pop_thm"group_clauses3";
=TEX
=SML
set_goal([], ¬
	µG x y·
	G  Group ± x  Car G ± y  Car G
´	((x.y)G ~)G = ((y ~)G. (x ~)G)G
®);
a(REPEAT strip_tac);
a(lemma_tac¬(x.y)G  Car G ±  (x ~) G  Car G  ±  (y ~) G  Car G® THEN1 
	(all_fc_tac[group_clauses1, group_clauses2] THEN REPEAT strip_tac));
a(lemma_tac¬((x.y)G.((x . y) G ~) G)G = ((x.y)G.((y ~) G . (x ~) G) G)G®);
(* *** Goal "1" *** *)
a(ALL_FC_T rewrite_tac[group_clauses1]);
a(lemma_tac¬((y ~) G . (x ~) G) G  Car G® THEN1 all_fc_tac[arb_gen group_clauses2]);
a(ALL_FC_T rewrite_tac[ group_clauses1,
	arb_gen group_clauses2, arb_gen group_clauses3]);
(* *** Goal "2" *** *)
a(lemma_tac¬((x . y) G ~) G  Car G ±  ((y ~) G . (x ~) G) G  Car G ® THEN1
	(all_fc_tac[arb_gen group_clauses1,
		arb_gen group_clauses2] THEN REPEAT strip_tac));
a(all_fc_tac[arb_gen left_cancel_thm]);
val Ûtimes_inverse_thmÝ = save_pop_thm"times_inverse_thm";
=TEX
=SML
set_goal([], ¬
	µG x y·
	G  Group ± x  Car G ± y  Car G
´	((x.y)G = One G ¤ y = (x ~)G)
®);
a(REPEAT strip_tac THEN_LIST [id_tac,
	all_var_elim_asm_tac1 THEN all_fc_tac[group_clauses1]]);
a(lemma_tac¬(x.y) G = (x.(x ~)G)G® THEN1
	ALL_FC_T asm_rewrite_tac[group_clauses1]);
a(lemma_tac¬(x ~)G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(all_fc_tac[left_cancel_thm]);
val Ûinverse_unique_thmÝ = save_pop_thm"inverse_unique_thm";
=TEX
=SML
set_goal([], ¬
	µG·
	G  Group
´	One G  Car G
®);
a(rewrite_tac[group_def] THEN REPEAT strip_tac THEN asm_rewrite_tac[]);
val Ûone_clauses_lemmaÝ = pop_thm();
=TEX
=SML
set_goal([], ¬
	µG·
	G  Group
´	One G  Car G
±	((One G) ~)G = One G
®);
a(REPEAT strip_tac THEN all_fc_tac[one_clauses_lemma]);
a(lemma_tac¬(One G.One G)G = One G® THEN1 ALL_FC_T rewrite_tac[group_clauses1]);
a(all_fc_tac[inverse_unique_thm]);
a(conv_tac eq_sym_conv THEN REPEAT strip_tac);
val Ûgroup_clauses4Ý = save_pop_thm"group_clauses4";
=TEX
=SML
set_goal([], ¬
	µG x y·
	G  Group ± x  Car G ± y  Car G
´	( (x.y)G = x ¤ y = One G )
®);
a(REPEAT strip_tac THEN_LIST [id_tac,
	all_var_elim_asm_tac1 THEN all_fc_tac[group_clauses1]]);
a(lemma_tac ¬(x . y) G = (x. One G) G® THEN1
	ALL_FC_T asm_rewrite_tac[group_clauses1]);
a(all_fc_tac[group_clauses4] THEN all_fc_tac[left_cancel_thm]);
val Ûone_unique_thmÝ = save_pop_thm"one_unique_thm";
=TEX
Some proof automation is now in order. A really good conditional rewriting tool could do
most of this automatically. Given the tools to hand, we create a customised conditional
rewriting tool.

The following two rules are lifted from WRK066; they probably belong in ProofPower.
=SML
fun Ûasm_±_intro_ruleÝ (thm : THM) : THM = (
	case asms thm of
		(asm1::asm2::_) => (
		let	val thm1 = asm_rule (mk_±(asm1, asm2));
			val thm2 = ±_left_elim thm1;
			val thm3 = ±_right_elim thm1;
			val thm4 = prove_asm_rule thm2 thm;
			val thm5 = prove_asm_rule thm3 thm4;
		in	asm_±_intro_rule thm5
		end
	) | 	_ => thm
);
fun Ûall_undisch_ruleÝ (thm : THM)  : THM = (
	all_undisch_rule (undisch_rule thm) handle Fail _ =>  thm
);
=TEX
Our customised rewriting tool will take terms constructed using the group operations (multiplication, inverse and unit) and put them in the ``free group normal form'' obtained by repeatedly applying the following (convergent) rewrite rules:

\begin{enumerate}
\item $(xy)^{-1} = y^{-1}{x^-1}
\item ${x^{-1}}^{-1} = x$
\item $x{x^-1} = 1$
\item ${x^-1x} = 1$
\item $x{x^-1}z = z$
\item ${x^-1x}z = z$
\item $(xy)z = x(yz)$
\item $x1 = 1x = x$
\end{enumerate}

The complication is that each of these rules depends on the operations actually being those of a group and on all the intermediate subexpressions being members of that group.
Typically the necessary side-condition can be simplified effectively by back-chaining with the theorems that say that the group is closed under multiplication and inverse and contains the unit element.
To deal with this we will set up the simplified side-condition as a lemma.
This will normally be a conjunction of atomic membership assertions which will all be assumptions of the goal being proved.

First of all we extract the lemmas we need from the various portmanteau theorems:
=SML
val all_thms =  (fc_canon( list_±_intro [
	group_clauses1,
	group_clauses2,
	inverse_inverse_thm,
	group_clauses3,
	times_inverse_thm,
	group_clauses4
]));
val eq_thms = map (all_undisch_rule o all_µ_elim o rewrite_rule[]) all_thms drop (not o is_eq o concl);
val _thms = map ¤_t_intro (map (all_undisch_rule o all_µ_elim o rewrite_rule[])
	all_thms drop (is_eq o concl));
=TEX
We derive equation contexts (efficient rewrite systems) from the two sets of lemmas:
=SML
val eq_eqn_cxt :EQN_CXT = map (fn th => (fst(dest_eq(concl th)), eq_match_conv th)) eq_thms;
val _eqn_cxt :EQN_CXT = map (fn th => (fst(dest_eq(concl th)), eq_match_conv th)) _thms;
=TEX
The corresponding conversions do one step of the expression rewriting or side-condition simplification:
=SML
val eq_rw_conv = eqn_cxt_conv eq_eqn_cxt;
val _rw_conv = eqn_cxt_conv _eqn_cxt;
=TEX
The following rule simplifies the assumptions by repeatedly looking for assumptions that can be simplified and simplifying them.
=SML
fun simplify_asm (thm : THM)  : THM = (
	let	fun try [] = fail "simplify_asm" 7061 []
		|   try (tm :: more) =(
			¤_t_elim (_rw_conv tm)
			handle Fail _ => try more
		);
	in	prove_asm_rule (try (asms thm)) thm
	end
);
=TEX
That gives a general tactic for groups which is parametrised by a conversional to control how the the term structure is to be traversed:
=SML
fun gen_group_eq_tac (cnvl : CONV -> CONV) : TACTIC = (fn gl as (hyps, conc) =>
	let	val thm1 = cnvl eq_rw_conv conc;
		val thm2 = all_´_intro (asm_±_intro_rule (iterate simplify_asm thm1));
		val lemma_tm = fst(dest_´(concl thm2));
		fun thm_tac lemma_thm = (
			let	val thm3 = ´_elim thm2 lemma_thm;
			in	conv_tac (simple_eq_match_conv thm3)
			end
		);
	in	LEMMA_T lemma_tm thm_tac gl
	end
);
=TEX
Next, we define the form we will use most frequently which uses the standard top-down traversal doing as much as you can at each node before doing sub-nodes.
=SML
val group_eq_tac : TACTIC = gen_group_eq_tac TOP_MAP_C;
=TEX
We also derive a tactic which will simplify assertions that expressions are members of a group:
=SML
fun gen_group__tac (cnvl : CONV -> CONV) : TACTIC = (fn gl as (hyps, conc) =>
	let	val thm1 = cnvl _rw_conv conc;
		val thm2 = all_´_intro (asm_±_intro_rule thm1);
		val lemma_tm = fst(dest_´(concl thm2));
		fun thm_tac lemma_thm = (
			let	val thm3 = ´_elim thm2 lemma_thm;
			in	conv_tac (simple_eq_match_conv thm3)
			end
		);
	in	LEMMA_T lemma_tm thm_tac gl
	end
);
val group__tac : TACTIC = REPEAT (gen_group__tac ONCE_MAP_C);
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	f(One G) = One H
®);
a(rewrite_tac[homomorphism_def,
	group_ops_def] THEN
	REPEAT strip_tac);
a(lemma_tac ¬One G  Car G® THEN1 all_fc_tac[group_clauses4]);
a(LEMMA_T ¬f( (One G.One G)G) = f(One G)® ante_tac THEN1
	(group_eq_tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T rewrite_tac[]);
a(REPEAT strip_tac);
a(lemma_tac¬f(One G)  Car H® THEN1 all_asm_fc_tac[]);
a(all_fc_tac[one_unique_thm]);
val Ûhomomorphism_one_thmÝ = save_pop_thm "homomorphism_one_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b; x : 'a·
	G  Group ± H  Group ± f  Homomorphism(G, H) ± x  Car G
´	f((x ~)G) = ((f x) ~) H
®);
a(REPEAT strip_tac THEN all_fc_tac[homomorphism_one_thm] THEN all_asm_ante_tac THEN
	rewrite_tac[homomorphism_def,
		group_ops_def] THEN
		REPEAT strip_tac);
a(lemma_tac¬(x ~) G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(lemma_tac¬f x  Car H® THEN1 all_asm_fc_tac[]);
a(lemma_tac¬f ((x ~) G)  Car H® THEN1 all_asm_fc_tac[]);
a(LEMMA_T ¬f((x.(x ~)G)G ) = One H® ante_tac THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T rewrite_tac[]);
a(ALL_FC_T1 fc_¤_canon rewrite_tac[inverse_unique_thm]);
val Ûhomomorphism_inverse_thmÝ = save_pop_thm "homomorphism_inverse_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b ·
	G  Group ± H  Group ± f  Homomorphism(G, H) 
´	f(One G) = One H
±	(µx· x  Car G ´ f((x ~)G) = ((f x) ~) H)
±	(µx y·x  Car G ± y  Car G ´  f ((x . y) G) = (f x . f y) H)
®);
a(REPEAT µ_tac THEN ´_tac THEN TOP_ASM_T ante_tac THEN
	rewrite_tac[homomorphism_def, group_ops_def] THEN
		REPEAT strip_tac THEN_TRY
		ALL_ASM_FC_T rewrite_tac[homomorphism_one_thm, homomorphism_inverse_thm]);
val Ûhomomorphism_clausesÝ = save_pop_thm "homomorphism_clauses";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b; x : 'a ·
	G  Group ± H  Group ± f  Homomorphism(G, H) ± x  Car G
´	f x  Car H
®);
a(rewrite_tac[homomorphism_def] THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
val Ûhomomorphism__car_thmÝ = save_pop_thm "homomorphism__car_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP; x y : 'a·
	G  Group ± H  Subgroup G
´	((x.y)H = (x.y)G)
±	One H = One G
±	 (x ~)H = (x ~)G
®);
a(rewrite_tac[subgroup_def1] THEN REPEAT µ_tac THEN ´_tac);
a(lemma_tac¬One H  Car H® THEN1 (group__tac THEN REPEAT strip_tac));
a(lemma_tac¬One H  Car G® THEN1 all_asm_fc_tac[]);
a(LEMMA_T¬(One H.One H)G = (One H.One H)H® ante_tac THEN1 asm_rewrite_tac[]);
a(group_eq_tac THEN1 strip_tac);
a(ALL_FC_T1 fc_¤_canon asm_rewrite_tac[one_unique_thm]);
val Ûsubgroup_clausesÝ = save_pop_thm "subgroup_clauses";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP· G  Group
´	G  Subgroup G
±	UnitSubgroup G  Subgroup G
®);
a(rewrite_tac[subgroup_def1, unit_subgroup_def, group_ops_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_var_elim_asm_tac1 THEN group__tac THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(rewrite_tac[group_def, group_ops_def]);
a(REPEAT strip_tac THEN_TRY all_var_elim_asm_tac1 THEN_TRY
	group_eq_tac THEN REPEAT strip_tac);
val Ûtrivial_subgroups_thmÝ = save_pop_thm "trivial_subgroups_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  Subgroup G
´	(Ìx· x)  Homomorphism (H, G)
®);
a(rewrite_tac[homomorphism_def, subgroup_def1] THEN REPEAT strip_tac
	THEN ALL_ASM_FC_T asm_rewrite_tac[]);
val Ûsubgroup_homomorphism_thmÝ = save_pop_thm "subgroup_homomorphism_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP·
	G  Group
´	(Ìx· x)  Homomorphism (G, G)
®);
a(REPEAT strip_tac THEN all_fc_tac[trivial_subgroups_thm] THEN
	all_fc_tac[subgroup_homomorphism_thm]);
val Ûid_homomorphism_thmÝ = save_pop_thm "id_homomorphism_thm";
=TEX
Without the custom tactics for groups, the first strip in the next theorem produces 13 subgoals rather than 4.
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	Kernel f (G, H)  NormalSubgroup G
®);
a(rewrite_tac[kernel_def, normal_subgroup_def, subgroup_def1, group_ops_def] THEN
	REPEAT strip_tac THEN1
	rewrite_tac[group_def, group_ops_def] THEN REPEAT strip_tac
	THEN_TRY (SOLVED_T ((group_eq_tac ORELSE group__tac)THEN REPEAT strip_tac)));
(* *** Goal "1" *** *)
a(ALL_FC_T asm_rewrite_tac[group_clauses1, homomorphism_clauses]);
a(all_fc_tac[group_clauses4]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(all_fc_tac[homomorphism_one_thm]);
(* *** Goal "3" *** *)
a(ALL_FC_T asm_rewrite_tac[homomorphism_inverse_thm, group_clauses4]);
(* *** Goal "4" *** *)
a(lemma_tac¬(y ~) G  Car G ± (x.y) G  Car G® THEN1 
	(group__tac THEN REPEAT strip_tac));
a(rename_tac[(¬y®, "yy")] THEN  ALL_FC_T asm_rewrite_tac[arb_gen homomorphism_clauses,
	arb_gen homomorphism_inverse_thm]);
a(group_eq_tac THEN REPEAT strip_tac);
a(all_fc_tac[homomorphism__car_thm]);
val Ûkernel_normal_subgroup_thmÝ = save_pop_thm "kernel_normal_subgroup_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  Subgroup G
´	Equiv(Car G, RightCongruent H G)
®);
a(rewrite_tac[equiv_def, refl_def, sym_def, trans_def, right_congruent_def] THEN REPEAT strip_tac 
	THEN all_fc_tac[subgroup_def1]);
(* *** Goal "1" *** *)
a(ALL_FC_T rewrite_tac[group_clauses1]);
a(LEMMA_T ¬One G = One H® rewrite_thm_tac THEN1 ALL_FC_T rewrite_tac[subgroup_clauses]);
a(all_fc_tac [group_clauses4]);
(* *** Goal "2" *** *)
a(LEMMA_T ¬((((x ~) G . y) G)  ~)H  Car H® ante_tac
	THEN1 all_fc_tac[arb_gen group_clauses1]);
a(ALL_FC_T rewrite_tac[subgroup_clauses]);
a(lemma_tac¬(x ~)G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(ALL_FC_T rewrite_tac[times_inverse_thm, inverse_inverse_thm]);
(* *** Goal "3" *** *)
a(LEMMA_T ¬(((x ~) G . y) G . ((y ~) G . z) G) H  Car H® ante_tac
	THEN1 all_fc_tac[arb_gen group_clauses2]);
a(ALL_FC_T rewrite_tac[arb_gen subgroup_clauses]);
a(lemma_tac¬(x ~)G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(lemma_tac¬(y ~)G  Car G® THEN1 all_fc_tac[group_clauses1]);
a(ALL_FC_T rewrite_tac[group_clauses2, arb_gen group_clauses3]);
val Ûright_congruent_equiv_thmÝ = save_pop_thm "right_congruent_equiv_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP; x : 'a·
	G  Group ± H  Subgroup G ± x  Car G
´	RightCoset H G x = EquivClass(Car G, RightCongruent H G) x
®);
a(rewrite_tac[respects_def, subgroup_def1, right_coset_def, right_congruent_def,
	equiv_class_def]
	THEN PC_T1 "sets_ext1" REPEAT strip_tac);
(* *** Goal "1" *** *)
a(asm_rewrite_tac[] THEN group__tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
(* *** Goal "3" *** *)
a(¶_tac¬((x ~)G.x')G® THEN REPEAT strip_tac);
a(group_eq_tac THEN REPEAT strip_tac);
val Ûright_coset_equiv_class_thmÝ = save_pop_thm "right_coset_equiv_class_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP; x : 'a·
	G  Group ± H  Subgroup G ± x  Car G ± y  Car G
´	(RightCoset H G x = RightCoset H G y ¤ RightCongruent H G x y)
®);
a(REPEAT µ_tac THEN ´_tac);
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(all_fc_tac[right_congruent_equiv_thm]);
a(ALL_FC_T1 fc_¤_canon rewrite_tac[equiv_class_eq_thm]);
val Ûright_coset_eq_thmÝ = save_pop_thm "right_coset_eq_thm";
=TEX
The proofs of the following theorems incorporate a slightly odd technique that uses the multiplication in $H$ at certain points where using the multiplication in $G$ might be more natural.
This is historical and arose as work-around for an infelicity in the original coding of the proof procedure for group membership.
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	µy· y  Car G ´ (
		(Ìx· (Ìa b·RightCoset H G ((a.b)G)) x y)
		Respects	(RightCongruent H G)
	) (Car G)
®);
a(rewrite_tac[respects_def, normal_subgroup_def, right_coset_def, right_congruent_def,
	equiv_class_def]
	THEN PC_T1 "sets_ext1" REPEAT strip_tac);
(* *** Goal "1" *** *)
a(¶_tac¬(((y ~)G.(((y' ~)G.x)G.y)G)G.z)H®);
a(GET_NTH_ASM_T 8 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(GET_NTH_ASM_T 11 bc_thm_tac);
a(LEMMA_T ¬((y' ~) G . x)G = (((x ~)G.y')G ~)H® rewrite_thm_tac
	THEN1 (asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac));
a(REPEAT strip_tac);
a(group__tac THEN REPEAT strip_tac);
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(¶_tac¬(((y ~)G.(((x ~)G.y')G.y)G)G.z)H®);
a(GET_NTH_ASM_T 8 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a(GET_NTH_ASM_T 11 bc_thm_tac);
a(REPEAT strip_tac);
(* *** Goal "2.2" *** *)
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.2" *** *)
a(all_asm_fc_tac[]);
val Ûtimes_respects_right_congruent_lemma1Ý = save_pop_thm "times_respects_right_congruent_lemma1";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	µx· x  Car G ´ (
		(Ìy· (Ìa b·RightCoset H G ((a.b)G)) x y)
		Respects	(RightCongruent H G)
	) (Car G)
®);
a(rewrite_tac[respects_def, normal_subgroup_def, right_coset_def, right_congruent_def,
	equiv_class_def]
	THEN PC_T1 "sets_ext1" REPEAT strip_tac);
(* *** Goal "1" *** *)
a(¶_tac¬(((y ~)G.x')G.z)H®);
a(GET_NTH_ASM_T 8 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(LEMMA_T ¬((y ~) G . x')G = (((x' ~)G.y)G ~)H® rewrite_thm_tac
	THEN1 (asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(¶_tac¬(((x' ~)G.y)G.z)H®);
a(GET_NTH_ASM_T 8 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
val Ûtimes_respects_right_congruent_lemma2Ý = save_pop_thm "times_respects_right_congruent_lemma2";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	(
		(Ìa·RightCoset H G ((a ~)G))
		Respects	(RightCongruent H G)
	) (Car G)
®);
a(rewrite_tac[respects_def, normal_subgroup_def, right_coset_def, right_congruent_def,
	equiv_class_def]
	THEN PC_T1 "sets_ext1" REPEAT strip_tac);
(* *** Goal "1" *** *)
a(¶_tac¬((y.(x ~)G)G.z)H®);
a(GET_NTH_ASM_T 7 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(LEMMA_T ¬(y . (x ~) G) G = (x .(((x ~) G.y)G.(x ~)G)G)G® rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(LEMMA_T ¬x  = ((x ~)G ~)G® once_rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(LEMMA_T ¬(((x ~)G ~)G ~)G = (x ~)G® once_rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(GET_NTH_ASM_T 10 bc_thm_tac THEN REPEAT strip_tac);
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "1.2" *** *)
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
(* *** Goal "2" *** *)
a(¶_tac¬((x.(y ~)G)G.z)H®);
a(GET_NTH_ASM_T 7 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a(LEMMA_T ¬(x . (y ~) G) G = (y .(((y ~) G.x)G.(y ~)G)G)G® rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(LEMMA_T ¬y = ((y ~)G ~)G® once_rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(LEMMA_T ¬(((y ~)G ~)G ~)G = (y ~)G® once_rewrite_thm_tac
	THEN1 (group_eq_tac THEN REPEAT strip_tac));
a(GET_NTH_ASM_T 10 bc_thm_tac THEN REPEAT strip_tac);
(* *** Goal "2.1.1" *** *)
a(LEMMA_T ¬((y ~) G . x) G = (((x ~) G . y) G ~)H® rewrite_thm_tac
	THEN1 (asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac));
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "2.1.2" *** *)
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "2.2" *** *)
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
a(all_asm_fc_tac[]);
val Ûinverse_respects_right_congruent_lemmaÝ = save_pop_thm "inverse_respects_right_congruent_lemma";
=TEX
=SML
(drop_main_goal(); ()) handle Fail _ => ();
push_consistency_goal¬QuotientGroup®;
a(prove_¶_tac THEN REPEAT strip_tac);
a(cases_tac¬G'  Group ± H'  NormalSubgroup G'® THEN asm_rewrite_tac[]);
a(TOP_ASM_T (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
a(lemma_tac¬Equiv (Car G', RightCongruent H' G')® THEN1
	ALL_FC_T rewrite_tac[right_congruent_equiv_thm]);
a(LEMMA_T¬
	¶ times· µ A x B y·
	A  Car G' // RightCongruent H' G' ± x  A ±
	B  Car G' // RightCongruent H' G' ± y  B
	´ times A B =  (Ì a b· RightCoset H' G' ((a . b) G')) x y® 
	(strip_asm_tac o rewrite_rule[]) THEN1 bc_thm_tac dyadic_induced_fun_¶_thm);
 (* ** Goal "1" *** *)
a(REPEAT strip_tac THEN ALL_FC_T rewrite_tac[
	times_respects_right_congruent_lemma1,
	times_respects_right_congruent_lemma2]);
(* *** Goal "2" *** *)
a(LEMMA_T¬
	¶ inverse· µ A x· A  Car G' // RightCongruent H' G' ± x  A´
	inverse A = (Ì a· RightCoset H' G' ((a ~) G')) x® 
	(strip_asm_tac o rewrite_rule[]) THEN1 bc_thm_tac induced_fun_¶_thm);
(* *** Goal "2.1" *** *)
a(REPEAT strip_tac THEN ALL_FC_T rewrite_tac[inverse_respects_right_congruent_lemma]);
(* *** Goal "2.2" *** *)
a(¶_tac¬ (Car G' // RightCongruent H' G', times, RightCoset H' G' (One G'), inverse)®);
a(rewrite_tac[group_ops_def] THEN PC_T1 "sets_ext1" once_rewrite_tac[] THEN
	REPEAT strip_tac);
(* *** Goal "2.2.1" *** *)
a(PC_T1 "sets_ext1" REPEAT strip_tac);
a(all_fc_tac[quotient_rep_¶_thm]);
a(¶_tac¬x'® THEN REPEAT strip_tac);
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(all_fc_tac [quotient_map_onto_thm] THEN all_var_elim_asm_tac1);
a(ALL_FC_T1 fc_¤_canon rewrite_tac[equiv_class_eq_thm]);
a(DROP_NTH_ASM_T 2 ante_tac THEN rewrite_tac[equiv_class_def]);
a(PC_T1 "sets_ext1" asm_rewrite_tac[]);
(* *** Goal "2.2.2" *** *)
a(all_var_elim_asm_tac1);
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(rewrite_tac[quotient_set_def]);
a(¶_tac¬x'® THEN REPEAT strip_tac);
(* *** Goal "2.2.3" *** *)
a(POP_ASM_T ante_tac THEN ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(LEMMA_T ¬
	times
                 (EquivClass (Car G', RightCongruent H' G') x)
                 (EquivClass (Car G', RightCongruent H' G') y) =
	RightCoset H' G' ((x . y) G')® rewrite_thm_tac);
a(GET_NTH_ASM_T 4 bc_thm_tac);
a(ALL_FC_T rewrite_tac[equiv_class__thm]);
a(rewrite_tac[quotient_set_def] THEN REPEAT strip_tac);
(* *** Goal "2.2.3.1" *** *)
a(¶_tac¬x® THEN REPEAT strip_tac);
(* *** Goal "2.2.3.2" *** *)
a(¶_tac¬y® THEN REPEAT strip_tac);
(* *** Goal "2.2.4" *** *)
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(LEMMA_T ¬
	times
                 (EquivClass (Car G', RightCongruent H' G') x)
                 (EquivClass (Car G', RightCongruent H' G') y) =
	RightCoset H' G' ((x . y) G')® asm_rewrite_thm_tac);
a(GET_NTH_ASM_T 5 bc_thm_tac);
a(ALL_FC_T rewrite_tac[equiv_class__thm]);
a(rewrite_tac[quotient_set_def]  THEN REPEAT strip_tac);
(* *** Goal "2.2.4.1" *** *)
a(¶_tac¬x® THEN REPEAT strip_tac);
(* *** Goal "2.2.4.2" *** *)
a(¶_tac¬y® THEN REPEAT strip_tac);
(* *** Goal "2.2.5" *** *)
a(POP_ASM_T ante_tac THEN ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(LEMMA_T ¬
	inverse(EquivClass (Car G', RightCongruent H' G') x) =
	RightCoset H' G' ((x ~) G')® rewrite_thm_tac);
a(GET_NTH_ASM_T 2 bc_thm_tac);
a(ALL_FC_T rewrite_tac[equiv_class__thm]);
a(rewrite_tac[quotient_set_def] THEN REPEAT strip_tac);
a(¶_tac¬x® THEN REPEAT strip_tac);
(* *** Goal "2.2.6" *** *)
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
a(LEMMA_T ¬
	inverse(EquivClass (Car G', RightCongruent H' G') x) =
	RightCoset H' G' ((x ~) G')® asm_rewrite_thm_tac);
a(GET_NTH_ASM_T 3 bc_thm_tac);
a(ALL_FC_T rewrite_tac[equiv_class__thm]);
a(rewrite_tac[quotient_set_def] THEN REPEAT strip_tac);
a(¶_tac¬x® THEN REPEAT strip_tac);
val _ = save_consistency_thm ¬QuotientGroup® (pop_thm());
val Ûquotient_group_defÝ = save_thm("quotient_group_def", get_spec¬QuotientGroup®);
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP; C : 'a SET·
	G  Group ± H  NormalSubgroup G ± C  Car (G // H)
´	¶x·x  Car G ± C = RightCoset H G x
®);
a(REPEAT strip_tac);
a(POP_ASM_T ante_tac THEN ALL_FC_T rewrite_tac[quotient_group_def]);
val Ûquotient_group_rep_¶_thmÝ = save_pop_thm "quotient_group_rep_¶_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	G // H  Group
®);
a(REPEAT strip_tac THEN rewrite_tac[group_def]);
a(strip_asm_tac(list_µ_elim[¬G®, ¬H®]quotient_group_def));
a(asm_rewrite_tac[] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(¶_tac¬(x'.x'')G® THEN1 group__tac THEN REPEAT strip_tac);
a(all_var_elim_asm_tac1);
a(ALL_ASM_FC_T rewrite_tac[]);
(* *** Goal "2" *** *)
a(all_var_elim_asm_tac1);
a(lemma_tac¬(x'.x'') G  Car G ± (x''.x''')G  Car G® THEN1
	(group__tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T rewrite_tac[]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "3" *** *)
a(¶_tac¬One G® THEN group__tac THEN REPEAT strip_tac);
(* *** Goal "4" *** *)
a(all_var_elim_asm_tac1);
a(lemma_tac¬One G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T rewrite_tac[]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "5" *** *)
a(all_var_elim_asm_tac1);
a(lemma_tac¬One G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T rewrite_tac[]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "6" *** *)
a(¶_tac¬(x' ~)G® THEN1 group__tac THEN REPEAT strip_tac);
a(all_var_elim_asm_tac1);
a(ALL_ASM_FC_T rewrite_tac[]);
(* *** Goal "7" *** *)
a(lemma_tac¬(x' ~)G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(all_var_elim_asm_tac1);
a(ALL_ASM_FC_T rewrite_tac[]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "8" *** *)
a(lemma_tac¬(x' ~)G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(all_var_elim_asm_tac1);
a(ALL_ASM_FC_T rewrite_tac[]);
a(group_eq_tac THEN REPEAT strip_tac);
val Ûquotient_group_group_thmÝ = save_pop_thm "quotient_group_group_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	RightCoset H G  Homomorphism (G, G // H)
®);
a(rewrite_tac[homomorphism_def] THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(ALL_FC_T rewrite_tac[quotient_group_def]);
a(¶_tac¬x® THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(ALL_FC_T rewrite_tac[quotient_group_def]);
val Ûquotient_group_homomorphism_thmÝ = save_pop_thm "quotient_group_homomorphism_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	Kernel (RightCoset H G)  (G, G // H) = H
®);
a(rewrite_tac[kernel_def, group_eq_group_thm, group_ops_def] THEN REPEAT strip_tac
	THEN TOP_ASM_T (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
(* *** Goal "1" *** *)
a(ALL_FC_T  rewrite_tac [quotient_group_def]);
a(PC_T "sets_ext1" strip_tac THEN REPEAT strip_tac);
(* *** Goal "1.1" *** *)
a(lemma_tac¬One G  Car G® THEN1 group__tac THEN REPEAT strip_tac);
a(all_fc_tac[arb_gen right_coset_eq_thm]);
a(POP_ASM_T ante_tac THEN rewrite_tac[right_congruent_def]);
a(group_eq_tac THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T  6 (strip_asm_tac o rewrite_rule[subgroup_def]));
a(LEMMA_T ¬x = ((x ~)H ~)H® once_rewrite_thm_tac THEN1
	(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac));
a(gen_group__tac ONCE_MAP_C THEN asm_rewrite_tac[]);
(* *** Goal "1.2" *** *)
a(DROP_NTH_ASM_T  3 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(all_asm_fc_tac[]);
(* *** Goal "1.3" *** *)
a(lemma_tac¬One G  Car G® THEN1 group__tac THEN REPEAT strip_tac);
a(GET_NTH_ASM_T  4 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(all_asm_fc_tac[]);
a(ALL_FC_T1 fc_¤_canon rewrite_tac[arb_gen right_coset_eq_thm]);
a(rewrite_tac[right_congruent_def]);
a(group_eq_tac THEN REPEAT strip_tac);
a(LEMMA_T ¬(x ~) G = (x ~) H® rewrite_thm_tac THEN1 asm_rewrite_tac[]);
a(group__tac THEN REPEAT strip_tac);
(* *** Goal "2" *** *)
a(GET_NTH_ASM_T  2 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(asm_rewrite_tac[]);
(* *** Goal "3" *** *)
a(ALL_FC_T rewrite_tac[subgroup_clauses]);
(* *** Goal "4" *** *)
a(GET_NTH_ASM_T  2 (strip_asm_tac o rewrite_rule[subgroup_def1]));
a(asm_rewrite_tac[]);
val Ûkernel_right_coset_thmÝ = save_pop_thm "kernel_right_coset_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	Image f (Car G)  H  Subgroup H
®);
a(REPEAT strip_tac THEN rewrite_tac[image_def, subgroup_def, group_ops_def]
	THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(PC_T1 "sets_ext1" REPEAT strip_tac);
a(all_var_elim_asm_tac1 THEN all_fc_tac[homomorphism__car_thm]);
(* *** Goal "2" *** *)
a(LIST_GET_NTH_ASM_T [1, 2] (MAP_EVERY ante_tac));
a(rewrite_tac[homomorphism_def, group_def, group_ops_def] THEN REPEAT strip_tac
	THEN_TRY all_var_elim_asm_tac1);
(* *** Goal "2.1" *** *)
a(¶_tac¬(x'.x'')G®);
a(group__tac THEN REPEAT strip_tac THEN ALL_ASM_FC_T rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(all_fc_tac[homomorphism__car_thm] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.3" *** *)
a(¶_tac¬One G®);
a(group__tac THEN REPEAT strip_tac THEN ALL_FC_T rewrite_tac[homomorphism_one_thm]);
(* *** Goal "2.4" *** *)
a(all_fc_tac[homomorphism__car_thm] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.5" *** *)
a(all_fc_tac[homomorphism__car_thm] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.6" *** *)
a(¶_tac¬(x' ~)G®);
a(group__tac THEN REPEAT strip_tac THEN ALL_FC_T rewrite_tac[homomorphism_inverse_thm]);
(* *** Goal "2.7" *** *)
a(all_fc_tac[homomorphism__car_thm]);
a(group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.8" *** *)
a(all_fc_tac[homomorphism__car_thm]);
a(group_eq_tac THEN REPEAT strip_tac);
val Ûimage_subgroup_thmÝ = save_pop_thm "image_subgroup_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	Equiv(Car G, RightCongruent (Kernel f (G, H))  G)
®);
a(REPEAT strip_tac THEN bc_thm_tac right_congruent_equiv_thm);
a(REPEAT strip_tac THEN all_fc_tac [kernel_normal_subgroup_thm]);
a(POP_ASM_T ante_tac THEN rewrite_tac[normal_subgroup_def] THEN taut_tac);
val Ûequiv_right_congruent_kernel_thmÝ = save_pop_thm "equiv_right_congruent_kernel_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	(f Respects RightCongruent (Kernel f (G, H))  G)  (Car G)
®);
a(rewrite_tac[respects_def, right_congruent_def, group_ops_def]
	THEN PC_T1 "sets_ext1" REPEAT strip_tac);
a(all_fc_tac[kernel_normal_subgroup_thm]);
a(POP_ASM_T (strip_asm_tac  o rewrite_rule[normal_subgroup_def]));
a(POP_ASM_T (ante_tac o list_µ_elim[¬((x ~) G . y) G®, ¬(x ~)G®]));
a(asm_rewrite_tac[] THEN group__tac THEN asm_rewrite_tac[kernel_def, group_ops_def]);
a(group_eq_tac THEN REPEAT strip_tac);
a(all_fc_tac[homomorphism__car_thm]);
a(conv_tac eq_sym_conv THEN ALL_FC_T1 fc_¤_canon rewrite_tac[group_eq_thm]);
a(DROP_NTH_ASM_T 4 ante_tac);
a(lemma_tac¬(x ~)G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(GET_NTH_ASM_T 10 (strip_asm_tac o rewrite_rule[homomorphism_def]));
a(rename_tac[] THEN ALL_ASM_FC_T rewrite_tac[homomorphism_inverse_thm]);
val Ûhomomorphism_respects_kernel_thmÝ =
	save_pop_thm "homomorphism_respects_kernel_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'a GROUP·
	G  Group ± H  NormalSubgroup G
´	Car (G//H) = Car G // RightCongruent H G
®);
a(REPEAT strip_tac THEN ALL_FC_T rewrite_tac[quotient_group_def]);
a(rewrite_tac[quotient_set_def]);
a(PC_T "sets_ext1" strip_tac THEN REPEAT strip_tac);
(* *** Goal "1" *** *)
a(all_var_elim_asm_tac1 THEN ¶_tac¬x'® THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 2 (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
(* *** Goal "2" *** *)
a(all_var_elim_asm_tac1 THEN ¶_tac¬x'® THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 2 (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm]);
val Ûcar_quotient_group_thmÝ = save_pop_thm "car_quotient_group_thm";
=TEX
=SML
set_goal([], ¬
	µG : 'a GROUP; H : 'b GROUP; f : 'a ­ 'b·
	G  Group ± H  Group ± f  Homomorphism(G, H)
´	¶g·
		(µx·x   Car G ´ g (RightCoset (Kernel f (G, H)) G x) = f  x)
	±	g  Isomorphism((G // Kernel f (G, H)), Image f (Car G) H)
®);
a(REPEAT strip_tac);
a(lemma_tac ¬¶g·µx·x   Car G ´ g (RightCoset (Kernel f (G, H)) G x) = f  x®);
(* *** Goal "1" *** *)
a(REPEAT strip_tac THEN all_fc_tac[
	equiv_right_congruent_kernel_thm,
	homomorphism_respects_kernel_thm]);
a(all_fc_tac[arb_gen induced_fun_¶_thm, kernel_normal_subgroup_thm]);
a(¶_tac¬g® THEN REPEAT strip_tac);
a(DROP_NTH_ASM_T 2 bc_thm_tac);
a(ALL_FC_T rewrite_tac[conv_rule (ONCE_MAP_C eq_sym_conv) car_quotient_group_thm]);
a(ALL_FC_T rewrite_tac[quotient_group_def]);
a(REPEAT strip_tac THEN1 ¶_tac¬x® THEN REPEAT strip_tac);
a(GET_NTH_ASM_T 2 (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
a(ALL_FC_T rewrite_tac[right_coset_equiv_class_thm, equiv_class__thm]);
(* *** Goal "2" *** *)
a(¶_tac¬g® THEN asm_rewrite_tac[isomorphism_def, homomorphism_def, image_def]);
a(all_fc_tac[kernel_normal_subgroup_thm]);
a(ALL_FC_T rewrite_tac[quotient_group_def] THEN rewrite_tac[group_ops_def]);
a(REPEAT strip_tac);
(* *** Goal "2.1" *** *)
a(all_var_elim_asm_tac1);
a(¶_tac¬x'® THEN ALL_ASM_FC_T asm_rewrite_tac[]);
(* *** Goal "2.2" *** *)
a(all_var_elim_asm_tac1);
a(ALL_FC_T rewrite_tac[quotient_group_def]);
a(lemma_tac¬(x' . x'') G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(ALL_ASM_FC_T asm_rewrite_tac[homomorphism_clauses]);
(* *** Goal "2.3" *** *)
a(all_var_elim_asm_tac1 THEN POP_ASM_T ante_tac);
a(GET_NTH_ASM_T 3 (strip_asm_tac o rewrite_rule[normal_subgroup_def]));
a(ALL_ASM_FC_T1 fc_¤_canon rewrite_tac[right_coset_eq_thm]);
a(rewrite_tac[right_congruent_def, kernel_def, group_ops_def]);
a(group__tac THEN REPEAT strip_tac);
a(lemma_tac¬(x' ~) G  Car G® THEN1 (group__tac THEN REPEAT strip_tac));
a(ALL_FC_T rewrite_tac[homomorphism_inverse_thm, homomorphism_clauses]);
a(all_fc_tac[homomorphism__car_thm]);
a(asm_rewrite_tac[] THEN group_eq_tac THEN REPEAT strip_tac);
(* *** Goal "2.4" *** *)
a(all_var_elim_asm_tac1);
a(¶_tac¬RightCoset (Kernel f (G, H)) G x®);
a(ALL_ASM_FC_T asm_rewrite_tac[]);
a(¶_tac¬x® THEN REPEAT strip_tac);
val first_isomorphism_thm = save_pop_thm "first_isomorphism_thm";
=TEX
%%%%
%%%%
%%%%
=SML
open_theory"group_egs";
set_merge_pcs["basic_hol1", "'sets_alg", "'ú", "'¯"];
=TEX
=SML
val Ûú_plus_defÝ = ±_left_elim(get_spec¬ú_plus®);
val Ûú_units_defÝ = ±_right_elim(get_spec¬ú_units®);
=TEX
=SML
set_goal([], ¬
	ú_plus  Group
®);
a(rewrite_tac[ú_plus_def, group_def, group_ops_def, ú_plus_assoc_thm]);
val Ûú_plus_group_thmÝ = save_pop_thm "ú_plus_group_thm";
=TEX
=SML
set_goal([], ¬
	ú_units  Group
®);
a(rewrite_tac[ú_units_def, group_def, group_ops_def, ú_times_assoc_thm]);
a(REPEAT strip_tac THEN_TRY asm_rewrite_tac[] THEN
	all_var_elim_asm_tac1 THEN all_asm_ante_tac THEN rewrite_tac[]);
val Ûú_units_group_thmÝ = save_pop_thm "ú_units_group_thm";
=TEX
=SML
val Ûú_plus_ops_thmÝ = save_thm("ú_plus_ops_thm", 
	rewrite_rule[conv_rule (ONCE_MAP_C eq_sym_conv) ú_plus_def](
		rewrite_rule[ú_plus_def](µ_elim¬ú_plus® group_ops_def)));
=TEX
=SML
val Ûú_units_ops_thmÝ = save_thm("ú_units_ops_thm", 
	rewrite_rule[conv_rule (ONCE_MAP_C eq_sym_conv) ú_units_def](
		rewrite_rule[ú_units_def](µ_elim¬ú_units® group_ops_def)));
=TEX
=SML
val Ûú_plus_ú_units_homomorphism_defÝ =
	save_thm("ú_plus_ú_units_homomorphism_def",
		rewrite_rule[ú_units_ops_thm, ú_plus_ops_thm]
			 (list_µ_elim[¬ú_plus®, ¬ú_units®] homomorphism_def));
val Ûú_plus_ú_units_homomorphism_one_thmÝ = save_thm("ú_plus_ú_units_homomorphism_one_thm",
		rewrite_rule[ú_units_ops_thm, ú_plus_ops_thm,
			ú_plus_group_thm, ú_units_group_thm]
			 (list_µ_elim[¬ú_plus®, ¬ú_units®] homomorphism_one_thm));
val Ûú_plus_ú_units_homomorphism_inverse_thmÝ = save_thm("ú_plus_ú_units_homomorphism_inverse_thm",
		rewrite_rule[ú_units_ops_thm, ú_plus_ops_thm,
			ú_plus_group_thm, ú_units_group_thm]
			 (list_µ_elim[¬ú_plus®, ¬ú_units®] homomorphism_inverse_thm));
=TEX
%%%%
=TEX
%%%%
%%%%
%%%%
%%%%
=TEX
\subsection{Epilogue}\label{END}
} % matches turning off of HOL index entries.
=TEX
%%%%
%%%%
=SML
open_theory"group_egs";
output_theory{out_file="wrk0681.th.doc", theory="equiv_rel"};
output_theory{out_file="wrk0682.th.doc", theory="groups"};
output_theory{out_file="wrk0683.th.doc", theory="group_egs"};
=TEX
\end{document}
=IGN
open_theory"groups";
set_merge_pcs["basic_hol1", "'sets_alg"];
